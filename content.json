{"posts":[{"title":"","text":"h2 { font-family: Consolas; color: #426cc2; text-align: center; font-style: bold; /* font-size: 3em; */ } .title_card { display: flex; position: relative; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); transition: 0.3s; width: auto; height: 100%; border-radius: 10px; overflow: hidden; align-items: center; justify-content: center; margin-left: 15px; margin-right: 15px; } .title_card:hover { box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2); } .title_card_text { position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: white; opacity: 0; transition: opacity 0.3s; font-family: 'Trebuchet MS'; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); /* 添加文字阴影 */ } .title_card:hover .title_card_text { opacity: 0.9; animation: jelly 0.5s; } @keyframes jelly { 0%, 100% { transform: scale(1, 1); } 25% { transform: scale(0.9, 1.1); } 50% { transform: scale(1.1, 0.9); } 75% { transform: scale(0.95, 1.05); } } HOME 🔭About Me 12345678910111213141516171819202122232425262728293031{ &quot;name&quot;: &quot;gjx&quot;, &quot;age&quot;: 20, &quot;gender&quot;: &quot;man!&quot;, &quot;school&quot;: &quot;UESTC&quot;, &quot;skills&quot;: [&quot;Copy&quot;, &quot;Paste&quot;], &quot;major&quot;: &quot;Software Engineering&quot;, &quot;occupation&quot;: &quot;Undergraduate&quot;, &quot;home&quot;: &quot;TsingTao, Shandong, CN&quot;, &quot;Email&quot;: [ &quot;gaojiaxing2004@qq.com&quot;, &quot;gaojiaxing0220@gmail.com&quot;, &quot;gjx@ltvf.onmicrosoft.com&quot; ] &quot;hobbies&quot;: [ &quot;🕹️Immersing in Diverse Gaming Universes&quot;, &quot;🎼Harmonizing with the Rhythm of Music&quot;, &quot;🪁Exploring the World of Literature&quot;, &quot;🧑🏻‍🎨DIY OS &amp; Desktop Beautification&quot;, &quot;🔦Unearthing Productivity Tools&quot;, &quot;📚Learning New Things About SE&quot;, &quot;📸Collecting Beautiful Pictures&quot; ], &quot;achievements&quot;: [ &quot;🤵🏻2006年《时代周刊》年度风云人物&quot;, &quot;🫂2008年《感动中国》年度人物&quot;, &quot;🌏联合国2019年度地球卫士奖联合获奖人&quot;, &quot;🥁国家一级退堂鼓演奏家&quot;, &quot;🐼熬夜冠军&quot; ]} 🌃How To Reach Me 😼Github 🐧QQ 📺Bilibili","link":"/Home/hello-world/"},{"title":"","text":"h2 { font-family: Microsoft JhengHei; /* font-family: 楷体; */ color: #426cc2; /* text-align: center; */ font-style: bold; } 蓬户掩兮井径荒 青苔满兮履綦绝 园种邵平之瓜 门栽先生之柳 晓起呼童子 问山桃落乎 辛夷开未 手瓮灌花 除虫丝蛛总于时 不巾不履 坐水窗 追凉风 焚好香 烹苦茗 忽见异鸟来鸣树间 小倦即卧 康凉枕一觉 美睡萧然无梦 即梦亦不离竹坪茶坞间","link":"/Home/%E8%93%AC%E6%88%B7%E6%89%8B%E5%8D%B7/"},{"title":"DataBase Base_函数&amp;约束","text":"函数AggregateFunctionOverview An SQL aggregate function calculates on a set of values and returns a single valueBecause an aggregate function operates on a set of values, it is often used with the GROUP BY clause of the SELECT statement. The GROUP BY clause divides the result set into groups of values and the aggregate function returns a single value for each group.SQL Tutorial The following are the commonly used SQL aggregate functions: AVG() – returns the average of a set COUNT() – returns the number of items in a set COUNT(*) – returns the number of items in a set (including NULL values) MAX() – returns the maximum value in a set MIN() – returns the minimum value in a set SUM() – returns the sum of all or distinct values in a set Except for the COUNT() function, SQL aggregate functions ignore null. You can use aggregate functions as expressions only in the following: The select list of a SELECT statement, either a subquery or an outer query. A HAVING clause StringFunctionFunctions that allow you to manipulate string data more effectively. CONCAT(s1,s2,...,sn) – return the result of concatenation two strings together. LOWER(str),UPPER(str) – converts a string to lower case or upper case. LPAD(str,n,padstr),RPAD(str,n,padstr) – left/right pads a string with another string to a certain length. TRIM(str),LTRIM(str),RTRIM(str) – removes all spaces from a string or from the left or right side of a string. REPLACE(str,source,replace) – replaces all occurrences of a substring within a string with another substring. SUBSTRING(str,pos,len) – returns a substring from a string starting at a specified position with a specified length.Reference: 123456789101112131415161718192021222324252627282930313233343536SELECT CONCAT('SQL',' is',' fun!');+-------------------------+| CONCAT(&quot;HELLO&quot;,&quot;WORLD&quot;) |+-------------------------+| HELLOWORLD |+-------------------------+SELECT LOWER(&quot;Hello,World&quot;);+----------------------+| LOWER(&quot;Hello,World&quot;) |+----------------------+| hello,world |+----------------------+SELECT RPAD(&quot;1&quot;,5,&quot;Z&quot;);+-----------------+| RPAD(&quot;1&quot;,5,&quot;Z&quot;) |+-----------------+| 1ZZZZ |+-----------------+SELECT RTRIM(&quot; HELLO &quot;);+---------------------+| RTRIM(&quot; HELLO &quot;) |+---------------------+| HELLO |+---------------------+SELECT REPLACE(&quot;Hello,World&quot;,&quot;World&quot;,&quot;SQL&quot;);+--------------------------------------+| REPLACE(&quot;Hello,World&quot;,&quot;World&quot;,&quot;SQL&quot;) |+--------------------------------------+| Hello,SQL |+--------------------------------------+SELECT SUBSTRING(&quot;Hello,World&quot;,1,5);+------------------------------+| SUBSTRING(&quot;Hello,World&quot;,1,5) |+------------------------------+| Hello |+------------------------------+ Math FunctionsSQL has many mathematical functions that allow you to perform business and engineering calculations. ABS(x) – returns the absolute value of x. CEIL(x) – returns the smallest integer that is greater than or equal to x. FLOOR(x) – returns the largest integer that is less than or equal to x. RAND() – returns a random floating-point value. MOD(x,y) – returns the remainder(modulo) of x divided by y, MOD(10,7) returns 3. e.g. ROUND(x,d) – returns a number rounded to d decimal places. ROUND(2.6666,3) returns 2.667 e.g. Exercise 1234567-- randomly generate 6 digitsSELECT SUBSTRING(ROUND(RAND(),6),3,6);+--------------------------------+| SUBSTRING(ROUND(RAND(),6),3,6) |+--------------------------------+| 578207 |+--------------------------------+ Date Functions123456789101112131415161718192021222324252627SELECT CURDATE(); -- YYYY-MM-DDSELECT CURTIME(); -- HH:MM:SSSELECT NOW(); -- YYYY-MM-DD HH:MM:SSYEAR(date); MONTH(date); DAY(date);SELECT YEAR(&quot;2023-1-2&quot;);+------------------+| YEAR(&quot;2023-1-2&quot;) |+------------------+| 2023 |+------------------+DATEADD(date,INTERVAL expr type);DATEDIFF(date1,date2); -- date1 - date2SELECT DATE_ADD(now(),INTERVAL 70 DAY);+---------------------------------+| DATE_ADD(now(),INTERVAL 70 DAY) |+---------------------------------+| 2024-04-06 20:09:20 |+---------------------------------+SELECT DATEDIFF(now(),&quot;2023-1-20&quot;);+-----------------------------+| DATEDIFF(now(),&quot;2023-1-20&quot;) |+-----------------------------+| 372 |+-----------------------------+ Exercises 12-- 查询每个员工的入职天数，并按照入职天数降序排列SELECT Name,DATEDIFF(now(),entrydate) AS days FROM emp ORDER BY days DESC; Control Flow Functions12345678-- if value is true, return if_true_expr, else return if_false_exprIF(value,if_true_expr,if_false_expr)-- if expr1 IS NULL, return expr2, else return expr1IFNULL(expr1,expr2)-- condition1为真，返回result1，condition2为真，返回result2，否则返回resultCASE WHEN &lt;condition1&gt; THEN &lt;result1&gt; WHEN &lt;condition2&gt; THEN &lt;result2&gt; ELSE &lt;result&gt; END-- expr = value1, return result1, expr = value2, return result2, else return resultCASE &lt;expr&gt; WHEN value1 THEN result1 WHEN value2 THEN result2 ELSE result END Exercises 123456789101112-- 查询emp表的员工的name,addr,如果addr为Beijing/Shanghai,则显示为一线城市，否则显示为二线城市SELECT name, (CASE addr WHEN 'Beijing' THEN '一线城市' WHEN &quot;Shanghai&quot; THEN &quot;一线城市&quot; ELSE '二线城市' END) AS addrTagFROM emp;-- 查询学生成绩表，如果成绩大于等于60，显示及格，否则显示不及格SELECT name. (CASE WHEN score &gt;= 60 THEN '及格' ELSE '不及格' END AS) math, (CASE WHEN english &gt;= 60 THEN '及格' ELSE '不及格' END AS) english,FROM score; 约束Overview概念: 约束是作用于表中字段上的规则,用于限制存储在表中的数据(类型、格式和范围等等)目的: 保证数据的正确性、有效性和完整性分类: 约束 描述 关键字 非空约束 限制该字段的数据不能为 null NOT NULL 唯一约束 保证该字段的所有数据都是唯一、不重复的 UNIQUE 主键约束 主键是一行数据的唯一标识，要求非空且唯一 PRIMARY KEY 默认约束 保存数据时，如果未指定该字段的值，则采用默认值 DEFAULT 检查约束（8.0.1 版本后） 保证字段值满足某一个条件 CHECK 外键约束 用来让两张图的数据之间建立连接，保证数据的一致性和完整性 FOREIGN KEY Example [DataBase01#DML] Review DML Syntax 123456CREATE TABLE USER( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(10) NOT NULL UNIQUE, age TINYINT UNSIGNED CHECK(age&gt;0 AND age&lt;120), gender ENUM('男','女','保密') DEFAULT '保密'); 外键约束概念 : 外键是表中的一个字段，它指向另一个表的主键，用来建立两张表之间的联系，保证数据的一致性和完整性 语法 : FOREIGN KEY (&lt;foreignKey&gt;) REFERENCES &lt;tableName&gt;(&lt;primaryKey&gt;) Example 12345678910111213141516171819-- 创建了两张表，Company表(主表,父表)中的Id字段是主键，Department表(子表,从表)中的depa_id字段是外键，指向Company表中的Id字CREATE TABLE Company ( Id int NOT NULL, name varchar(20) NOT NULL, PRIMARY KEY (Id));CREATE TABLE Department ( id int NOT NULL, name varchar(20) NOT NULL, salary decimal(10,2), depa_id int, PRIMARY KEY (id), FOREIGN KEY (depa_id) REFERENCES Company(Id));-- 添加外键约束ALTER TABLE Department ADD CONSTRAINT fk_depa_id FOREIGN KEY (depa_id) REFERENCES Company(Id);-- 删除外键约束ALTER TABLE Department DROP FOREIGN KEY fk_depa_id; 删除/更新行为 行为 说明 NO ACTION 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与 RESTRICT 一致） RESTRICT 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与 NO ACTION 一致） CASCADE 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录 SET NULL 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为 null（要求该外键允许为 null） SET DEFAULT 父表有变更时，子表将外键设为一个默认值（Innodb 不支持） 设置删除/更新行为的语法：ON DELETE/UPDATE &lt;action&gt;例如 ALTER TABLE Department ADD CONSTRAINT fk_depa_id FOREIGN KEY (depa_id) REFERENCES Company(Id) ON DELETE CASCADE ON UPDATE CASCADE;","link":"/Dev/DataBase/DataBase02/"},{"title":"DataBase Base_基础概念&amp;SQL语法","text":"MySQL Overview数据库相关概念数据库 : 数据库(DataBase,Scheme)就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。 数据库管理系统 : 数据库管理系统(Database Management System)是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。 数据库系统 : 数据库系统(Database System)通常由软件、数据库和数据管理员(DBA)组成。 数据库管理员 : 数据库管理员(Database Administrator)负责全面管理和控制数据库系统。 启动 &amp; 客户端连接MySQL80 服务将开始监听特定的端口（默认是 3306），等待客户端的连接请求。一旦接收到请求，它就会处理这些请求，执行 SQL 查询，返回查询结果 123# 启动&amp;停止 Servicenet start mysql80net stop mysql80 客户端连接数据库的方式： 命令行：mysql -h 主机名 -P 端口号 -u 用户名 -p 密码 图形化工具：Navicat、SQLyog、SQL Server Management Studio 数据模型数据模型可以分为两种.关系型数据模型和非关系型数据模型 关系型数据模型关系型数据模型（RDBMS,Relational Database Management System）：关系型数据库模型是基于关系（表）的数据模型，使用表格来组织和存储数据。最常见的关系型数据库是 MySQL、Oracle、SQL Server 等。 ps:table 是关系型数据库的术语，对应的中文是表，也可以称为关系，由行和列组成。在 SQL 中，”record”和”field”是两个基本的概念，它们分别对应于数据库表中的行和列。 Record：在数据库中，一个 record（也被称为 row 或 tuple）代表一组相关的数据，例如一个用户的信息或一个订单的详情。一个 record 包含了一组 field，每个 field 存储了一项特定的信息，例如用户的名字或订单的价格。 Field：在数据库中，一个 field（也被称为 field 或 attribute）代表一种类型的数据，例如所有用户的名字或所有订单的价格。一个 field 在一个表中是垂直的，它包含了一个特定类型的所有值。 例如，考虑一个简单的 table，它有两个 field（”User ID”和”User Name”）和两个 record： User ID User Name 1 Alice 2 Bob 在这个例子中，”1”和”Alice”是第一个 record，”2”和”Bob”是第二个 record。”User ID”和”User Name”是两个 field。 非关系型数据模型非关系型数据模型（NoSQL）：非关系型数据库模型是一种非结构化的数据模型，不使用表格来组织和存储数据。它们可以是键值对存储、文档存储、列存储、图形数据库等。常见的非关系型数据库有 MongoDB、Redis、Cassandra 等。 SQL GrammerOverview 单行或多行书写，以分号结尾SQL 语句可以用空格和缩进来增强可读性SQL 语句不区分大小写，关键字建议使用大写Comment：单行注释（– comment）；多行注释（/_ comment _/）Category：DDL,DML,DQL,DCL Data type数值类型 数据类型 内存大小(Byte) TINYINT 1 SMALLINT 2 MEDIUMINT 3 INT 4 BIGINT 8 FLOAT 4 DOUBLE 8 DECIMAL(M, N) 取决于 M和 N 数据类型后面可加 UNSIGNED修饰，例如 age TINYINT UNSIGNED 对于 DECIMAL(M, N)类型，M是数字的最大总位数，N是小数点后的位数。数值范围取决于 M和 N的值。如 123.45，M=5,N=2 字符串类型 数据类型 大小 描述 CHAR 0-255Bytes 定长字符串 VARCHAR 0-65535Bytes 变长字符串 BLOB 0-65535Bytes 二进制形式的长文本数据 TEXT 0-65535Bytes 长文本数据 char(10) 会占用 10 个字符的存储空间，不足 10 个字符会使用空格补齐；性能高于 varcharvarchar(10) 会根据实际存储的字符数来占用存储空间，不会浪费空间 Date &amp; Time 类型 格式 范围 DATE YYYY-MM-DD 1000-01-01 到 9999-12-31 TIME HH:MM:SS -838:59:59 到 838:59:59 YEAR YYYY 1901 到 2155, 以及 0000 DATETIME YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00 到 9999-12-31 23:59:59 TIMESTAMP YYYY-MM-DD HH:MM:SS 1970-01-01 00:00:01 UTC 到 2038-01-19 03:14:07 UTC SQL SyntaxCATEGORY 分类 全称 说明 DDL Data Definition Language 定义数据库对象（数据库，表，字段） DML Data Manipulation Language 对数据表中的数据进行增删改 DQL Data Query Language 查询数据库中表的记录 DCL Data Control Language 创建数据库用户，控制数据库的访问权限 TCL Transaction Control Language 用于保存或恢复对数据库对象执行的操作 [GlossaryOfSQL#Basic Structure of SQL Server syntax]-&gt;SeeMore DML 语句和 DDL 语句区别：DML 是数据库操作语言（Data Manipulation Language）的缩写，是指对数据库中表记录的操作，主要包括表记录的插入、更新、删除和查询，是开发人员日常使用最频繁的操作。DDL （Data Definition Language）是数据定义语言的缩写，简单来说，就是对数据库内部的对象进行创建、删除、修改的操作语言。它和 DML 语言的最大区别是 DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改，更不会涉及到其他对象。DDL 语句更多的被数据库管理员（DBA）所使用，一般的开发人员很少使用。另外，由于 select 不会对表进行破坏，所以有的地方也会把 select 单独区分开叫做数据库查询语言 DQL（Data Query Language）。# 执行速度不同节选自 JavaGuide——SnailClimb DDLDatabase Manipulation 创建：CREATE DATABASE &lt;DATABASE_NAME&gt;; 删除：DROP DATABASE &lt;DATABASE_NAME&gt;; 查看：SHOW DATABASES; 使用：USE &lt;DATABASE_NAME&gt;; 查询当前数据库： SELECT DATABASE(); Table Manipulation 删除：DROP TABLE &lt;TABLE_NAME&gt;; 创建：CREATE TABLE &lt;TABLE_NAME&gt; (field_name field_type, ...); 重命名：ALTER TABLE &lt;TABLE_NAME&gt; RENAME TO &lt;NEW_TABLE_NAME&gt;; 删除重建：TRUNCATE TABLE &lt;TABLE_NAME&gt;; 描述表结构：DESC &lt;TABLE_NAME&gt;; 查询当前数据库中的表：SHOW TABLES; 查看表的创建语句：SHOW CREATE TABLE &lt;TABLE_NAME&gt;; 12345678CREATE TABLE student( id int, name varchar(32), age int);DESC student;ALTER TABLE student RENAME TO student_info;DROP student_info; Add/Modify Field： ALETR TABLE &lt;TABLE_NAME&gt; &lt;ADD|MODIFY&gt; &lt;FIELD_NAME&gt; &lt;FIELD_TYPE&gt;; Change Field：ALTER TABLE &lt;TABLE_NAME&gt; CHANGE &lt;FIELD_NAME&gt; &lt;NEW_FIELD_NAME&gt; &lt;FIELD_TYPE&gt;; Drop Field：ALTER TABLE &lt;TABLE_NAME&gt; DROP &lt;FIELD_NAME&gt;; 1234-- Field Manipulation ExamplesALTER TABLE student ADD age int UNSIGNED;ALTER TABLE student MODIFY age tinyint UNSIGNED;ALTER TABLE student CHANGE nickname username tinyint UNSIGNED; DMLINSERT基本的 INSERT 语句的语法如下： 1INSERT INTO table_name (field1, field2, field3, ...) VALUES (value1, value2, value3, ...); 例如，如果你有一个名为 users 的表，它有 id，name 和 email,gender 四个 field，你可以使用以下的 INSERT 语句来插入数据： 1INSERT INTO users (id, name, email) VALUES (1, 'John Doe', '123@gmail.com'); 可以省略列的名称，但必须提供所有 field的值，并且顺序必须与表中的列的顺序相同： 1INSERT INTO users VALUES (1, 'John Doe', '222@gmail.com','男'); 批量插入数据： 12345INSERT INTO users (id, name, email)VALUES(1, 'Alice', 'alice@example.com'),(2, 'Bob', 'bob@example.com'),(3, 'Charlie', 'charlie@example.com'); DELETE123DELETE FROM student; -- 删除表中所有数据DELETE FROM student where id = 1; -- 删除id为1的数据TRUNCATE TABLE student; -- 删除表中所有数据，但不删除表结构 🪧drop,delete,truncate的区别： DROP TABLE is a DDL command. It is used to delete a table and free space associated with the table. It also deletes the table structure. TRUNCATE TABLE is a DDL command. It is used to delete all the rows from a table and free the space used by those rows. It does not generate any undo logs, so it is faster than the DELETE command. However, you CANNOT roll back a TRUNCATE operation. Also, TRUNCATE TABLE resets the identity of the table. DELETE FROM is a DML command. It is used to delete all the rows from a table or certain rows that match a condition. It generates undo logs for every deleted row, so you CAN roll back a DELETE operation. It does not reset the identity of the table. DELETE FROM without a WHERE clause behaves like TRUNCATE TABLE. PS:identity is a property of a column that is used to generate a sequence of numbers(id e.g.). The identity column is commonly used as a primary key. 可参考如下文章补充学习JavaGuide &gt; ZhiHu UPDATE12UPDATE student SET age = 18; -- Note:affects all rows in the table.UPDATE student SET age = 18 WHERE id = 1; DQLOVERVIEW数据查询语言（Data Query Language）用于从数据库中检索数据。 Sequence Of DQL 编写顺序： SELECT-&gt;FROM-&gt;WHERE-&gt;GROUP BY-&gt;HAVING-&gt;ORDER BY-&gt;LIMIT&gt;执行顺序： FROM-&gt;WHERE-&gt;GROUP BY-&gt;HAVING-&gt;SELECT-&gt;ORDER BY-&gt;LIMIT 练习Example 1234567891011-- table name: emp-- 1.查询年龄为20，21，22，23的女性员工信息SELECT * FROM emp WHERE gender='女' &amp;&amp; age IN (20,21,22,23);-- 2.查询性别为男，并且年属于[20,40]，名字为3个字的员工。SELECT * FROM emp WHERE gender='男' &amp;&amp; age BETWEEN 20 AND 40 &amp;&amp; name LIKE '___';-- 3.查询年龄小于60岁的男员工人数和女员工人数SELECT gender,count(*) FROM emp GROUP BY gender-- 4.查询所有年小于等于 35 员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序SELECT name,age,entrydate FROM emp WHERE age &lt;= 35 ORDER BY age ASC,entrydate DESC;-- 5.查询性别为男，且年龄属于[20,40]的前5个员工，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序SELECT name,age,entrydate FROM emp WHERE gender='男' &amp;&amp; age BETWEEN 20 AND 40 ORDER BY age ASC,entrydate DESC LIMIT 5; 基础查询12345678910111213table: student+-----+-------+-----------+------+| Sid | Sname | Sage | Ssex |+-----+-------+-----------+------+| 01 | 赵雷 | 1/1/1990 | 男 || 02 | 钱电 | 21/12/1990| 男 || 03 | 孙风 | 20/5/1990 | 男 || 04 | 李云 | 6/8/1990 | 男 || 05 | 周梅 | 1/12/1991 | 女 || 06 | 吴兰 | 1/3/1992 | 女 || 07 | 郑竹 | 1/7/1989 | 女 || 08 | 王菊 | 20/1/1990 | 女 |+-----+-------+-----------+------+ Basic Syntax 查询指定字段 SELECT field1, field2, ... FROM table_name; 查询所有字段 SELECT * FROM table_name; 指定条件查询 SELECT field1, field2, ... FROM table_name WHERE condition; 查询结果去重 SELECT DISTINCT field1, field2, ... FROM table_name; Condition SyntaxList of Comparison Operators =, !=,&lt;&gt;, &lt; &lt;=, &gt;, &gt;= 🪧Note:&lt;&gt; is the same as != BETWEEN ... AND ... IN(...) LIKE 🪧Note:pattern matching,placeholders:%,_ IS NULL,IS NOT NULL List of Logical Operators AND,&amp;&amp;,OR,||,NOT,! 12345678910111213141516SELECT * FROM student; -- 查询表中所有field数据SELECT id,name FROM student; -- 查询表中指定field的数据SELECT * FROM student WHERE id = 1 &amp;&amp; age &lt;=30; -- &amp;&amp; 可以用 AND 代替SELECT * FROM student WHERE id = 1 || age &lt;=30; -- || 可以用 OR 代替SELECT * FROM student WHERE Sid BETWEEN 01 AND 20; -- BETWEEN 用于范围查询[01,20]SELECT * FROM student WHERE Sid IN (01,02,03); -- IN 用于范围查询SELECT DISTINCT Ssex FROM student; -- DISTINCT 用于去重SELECT * FROM student WHERE enligh IS NOT NULL; -- IS NULL 用于判断是否为空-- =================================-- * LIKE *-- =================================SELECT * FROM student WHERE Sname LIKE '赵%'; -- % 多个任意字符SELECT * FROM student WHERE Sname LIKE '赵_'; -- _ 单个任意字符SELECT * FROM student WHERE Sname LIKE '赵__'; -- __ 两个任意字符SELECT * FROM student WHERE Sname LIKE '%子%'; -- Sname中包含子的record Examples 123456789101112131415161718-- example 1SELECT Sid,Sname FROM student WHERE Ssex='男';+-----+-------+| Sid | Sname |+-----+-------+| 01 | 赵雷 || 02 | 钱电 || 03 | 孙风 || 04 | 李云 |+-----+-------+-- example 2SELECT DISTINCT Ssex FROM student;+------+| Ssex |+------+| 男 || 女 |+------+ 聚合函数聚合函数（Aggregate Functions）用于计算表中列的值(如果为 NULL，则不参与计算)，返回一个单一的值。常用的聚合函数有： AVG()：返回某列的平均值 COUNT()：返回某列的行数 MAX()：返回某列的最大值 MIN()：返回某列的最小值 SUM()：返回某列值之和 COUNT(*) 表示计算所有行的数量，包括 NULL 值COUNT(field) 表示计算指定列的行数，不包括 NULL 值COUNT(DISTINCT field) 表示计算指定列的不同值的数量，不包括 NULL 值[database02#AggregateFunction]-&gt;See more Examples 123456789101112131415161718SELECT count(Sid) FROM student;+------------+| count(Sid) |+------------+| 8 |+------------+SELECT avg(Sage) FROM student;+---------------+| avg(Sage) |+---------------+| 19903121.3750 |+---------------+SELECT avg(Sage) FROM student WHERE Ssex='男';+---------------+| avg(Sage) |+---------------+| 19900662.0000 |+---------------+ 分组查询分组查询（Group By）用于结合聚合函数，根据一个或多个列对结果集进行分组。 Syntax:SELECT field1, field2, ... FROM table_name GROUP BY field1, field2, ... HAVE condition; Difference between WHERE and HAVING 执行时机不同：WHERE 在数据分组前的 record 进行过滤，HAVING 在数据分组后的 record 进行过滤执行顺序：where -&gt; aggregate -&gt; having 可选参数不同：WHERE 后面只能跟条件表达式，HAVING 后面可以跟条件表达式和聚合函数 WHERE is used to filter records before any groupings take place.HAVING is used to filter values after they have been grouped. Examples 12345678910111213141516171819202122232425262728293031-- 查询男女生的max/min age;SELECT Ssex,max(Sage),min(Sage) FROM student GROUP BY Ssex;+------+------------+------------+| Ssex | max(Sage) | min(Sage) |+------+------------+------------+| 男 | 1990-12-21 | 1990-01-01 || 女 | 1992-03-01 | 1989-07-01 |+------+------------+------------+-- 查询Sid&gt;2的男女生的max/min ageSELECT Ssex,max(Sage),min(Sage) from student WHERE Sid&gt;2 GROUP BY Ssex;+------+------------+------------+| Ssex | max(Sage) | min(Sage) |+------+------------+------------+| 男 | 1990-08-06 | 1990-05-20 || 女 | 1992-03-01 | 1989-07-01 |+------+------------+------------+-- 查询男女生的max/min age，分组结果只显示为Ssex=男的recordSELECT Ssex,max(Sage),min(Sage) from student GROUP BY Ssex HAVING Ssex='男';+------+------------+------------+| Ssex | max(Sage) | min(Sage) |+------+------------+------------+| 男 | 1990-12-21 | 1990-01-01 |+------+------------+------------+-- 查询年龄 &lt; 45 的employee，并根据workaddress分组，显示分组结果中address_count&gt;3的分组SELECT workaddress,count(*) AS address_count FROM employee WHERE age &lt; 45 GROUP BY workaddress HAVING address_count&gt;3;+--------------+----------------+| workaddress | address_count |+--------------+----------------+| Beijing | 4 || Shanghai | 5 |+--------------+----------------+ 排序查询Syntax SELECT field1, field2, ... FROM table_name ORDER BY field1 [ASC|DESC], field2 [ASC|DESC], ...; ASC: ascending order 升序 DESC: descending order 降序 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件 123456789101112131415SELECT * FROM student ORDER BY Sage ASC;+-----+-------+------------+------+| Sid | Sname | Sage | Ssex |+-----+-------+------------+------+| 07 | 郑竹 | 1989-07-01 | 女 || 01 | 赵雷 | 1990-01-01 | 男 || 08 | 王菊 | 1990-01-20 | 女 || 03 | 孙风 | 1990-05-20 | 男 || 04 | 李云 | 1990-08-06 | 男 || 02 | 钱电 | 1990-12-21 | 男 || 05 | 周梅 | 1991-12-01 | 女 || 06 | 吴兰 | 1992-03-01 | 女 |+-----+-------+------------+------+-- 按照age升序排序，如果age相同，则再按照entrydate降序排序SELECT * FROM emp ORDER BY age ASC,entrydate DESC; 分页查询Syntax SELECT field1, field2, ... FROM table_name LIMIT offset, count;offset表示偏移量，count表示查询的记录数offset = (pageNo - 1) * pageSize分页查询属于 MySQL 的扩展语法，不是 SQL 标准语法，不同的数据库有不同的实现方式 12345678910111213141516171819202122232425262728SELECT * FROM student LIMIT 0,3; -- 第1页SELECT * FROM student LIMIT 3,3; -- 第2页SELECT * FROM student LIMIT 6,2; -- 第3页+-----+-------+------------+------+| Sid | Sname | Sage | Ssex |+-----+-------+------------+------+| 01 | 赵雷 | 1990-01-01 | 男 || 02 | 钱电 | 1990-12-21 | 男 || 03 | 孙风 | 1990-05-20 | 男 |+-----+-------+------------+------+3 rows in set (0.27 sec)+-----+-------+------------+------+| Sid | Sname | Sage | Ssex |+-----+-------+------------+------+| 04 | 李云 | 1990-08-06 | 男 || 05 | 周梅 | 1991-12-01 | 女 || 06 | 吴兰 | 1992-03-01 | 女 |+-----+-------+------------+------+3 rows in set (0.23 sec)+-----+-------+------------+------+| Sid | Sname | Sage | Ssex |+-----+-------+------------+------+| 07 | 郑竹 | 1989-07-01 | 女 || 08 | 王菊 | 1990-01-20 | 女 |+-----+-------+------------+------+2 rows in set (0.22 sec) DCL用户管理CREATE用于创建一个新的用户，并设置其密码ALTER用于修改一个已存在的用户的密码DROP用于删除一个已存在的用户 %：表示用户可以从任何主机连接到数据库 localhost：表示用户只能从本地主机连接到数据库 192.168.1.1：表示用户只能从指定的 IP 地址连接到数据库 %.example.com：表示用户可以从 example.com 域名下的任何主机连接到数据库 1234CREATE USER 'Jason'@'xxx.xxx.x.x' IDENTIFIED BY 'password'; -- 可从指定主机连接到数据库CREATE USER 'Jason'@'%' IDENTIFIED BY 'JasonPassword'; -- 可从任何主机连接到数据库ALTER USER 'Jason'@'%' IDENTIFIED BY 'NewJasonPassword';DROP USER 'username'@'host'; 权限管理GRANT：用于授予用户数据库的访问权限REVOKE：用于撤销用户的数据库访问权限。例如： 1234-- 授予 user 在 database.table 上执行 SELECT，INSERT 和 DELETE 操作的权限。GRANT SELECT, INSERT, DELETE ON database.table TO 'user'@'host';-- 撤销了 user 在 database.table 上执行 INSERT 和 DELETE 操作的权限。REVOKE INSERT, DELETE ON database.table FROM 'user'@'host'; 常用权限 ALL, ALL PRIVILEGES 所有权限 SELECT 查询数据 INSERT 插入数据 UPDATE 修改数据 DELETE 删除数据 ALTER 修改表 DROP 删除数据库/表/视图 CREATE 创建数据库/表","link":"/Dev/DataBase/DataBase01/"},{"title":"DataBase Base 多表查询&amp;事务","text":"多表查询 Multi-Table Query多表关系项目开发中,在进行数据库表结构设计时,会根据业务需求及业务模块之间的关系,分析并设计表结构,由于业务之间相互关联所以各个表结构之间也存在着各种联系,基本上分为三种：一对一 one to one如用户与用户详情的关系多用于单表拆分,将一张表的基础字段和扩展字段分开存储,减少数据冗余,提高数据库性能.可在任意一方添加外键关联另一方的主键,并且外键字段设置 UNIQUE 约束.一对多(多对一) one to many如一个部门对应多个员工,一个员工只能对应一个部门.这种关系一般是通过在多的一方添加外键来实现的.(员工表中设置部门 id 作为外键,指向部门表中的主键)多对多 many to many如一个学生可以选择多个课程,一个课程也可以被多个学生选择.这种关系一般是通过添加第三张表来实现的.(学生表,课程表,学生课程表),中间表中设置学生 id 和课程 id 作为外键,指向学生表和课程表的主键. 为方便理解,以下以员工表和部门表为例进行说明. 123456789101112131415161718SELECT * FROM employees;+----+-------+--------------+| ID | Name | DepartmentID |+----+-------+--------------+| 1 | John | 100 || 2 | Alice | 200 || 3 | Bob | 100 || 4 | David | 300 |+----+-------+--------------+SELECT * FROM departments;+-----+-----------+| ID | Name |+-----+-----------+| 100 | Sales || 200 | Marketing || 300 | HR |+-----+-----------+ 多表查询概述合并查询(笛卡尔积,显示所有组合结果,不常用)SELECT * FROM table1,table2;消除无效组合(内连接)SELECT * FROM employee, department WHERE employee.dept_id = department.id; 123456789101112131415161718192021222324252627SELECT * FROM employees,departments;+----+-------+--------------+-----+-----------+| ID | Name | DepartmentID | ID | Name |+----+-------+--------------+-----+-----------+| 1 | John | 100 | 300 | HR || 1 | John | 100 | 200 | Marketing || 1 | John | 100 | 100 | Sales || 2 | Alice | 200 | 300 | HR || 2 | Alice | 200 | 200 | Marketing || 2 | Alice | 200 | 100 | Sales || 3 | Bob | 100 | 300 | HR || 3 | Bob | 100 | 200 | Marketing || 3 | Bob | 100 | 100 | Sales || 4 | David | 300 | 300 | HR || 4 | David | 300 | 200 | Marketing || 4 | David | 300 | 100 | Sales |+----+-------+--------------+-----+-----------+SELECT * FROM employees,departments WHERE employees.DepartmentID = departments.ID;+----+-------+--------------+-----+-----------+| ID | Name | DepartmentID | ID | Name |+----+-------+--------------+-----+-----------+| 1 | John | 100 | 100 | Sales || 2 | Alice | 200 | 200 | Marketing || 3 | Bob | 100 | 100 | Sales || 4 | David | 300 | 300 | HR |+----+-------+--------------+-----+-----------+ 内连接查询 Inner Join内连接查询的是两张表交集的部分 隐式内连接：SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;显式内连接(性能较高)SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...; 123456789101112131415161718192021-- 查询员工姓名,以及对应的部门名称-- 隐式SELECT e.Name,d.Name FROM employees AS e, departments AS d WHERE e.DepartmentID = d.ID;+-------+-----------+| Name | Name |+-------+-----------+| John | Sales || Alice | Marketing || Bob | Sales || David | HR |+-------+-----------+-- 显式SELECT e.Name,d.Name FROM employees AS e INNER JOIN departments AS d ON e.DepartmentID = d.ID;+-------+-----------+| Name | Name |+-------+-----------+| John | Sales || Alice | Marketing || Bob | Sales || David | HR |+-------+-----------+ sql inner join 3 tables example 1234567891011SELECT first_name, last_name, job_title, department_nameFROM employees eINNER JOIN departments d ON d.department_id = e.department_idINNER JOIN jobs j ON j.job_id = e.job_idWHERE e.department_id IN (1, 2, 3); 外连接查询 Outer Join分为左外连接、右外连接、全外连接(Left Join, Right Join, Full Join) 左连接查询：查询左表的所有数据,右表中符合条件的数据右连接查询：查询右表的所有数据,左表中符合条件的数据全连接查询：查询两个表的所有数据 12345678910111213-- left joinSELECT e.Name,d.Name FROM employees AS e LEFT JOIN departments AS d ON e.DepartmentID = d.ID;-- right joinSELECT e.Name,d.Name FROM departments AS d RIGHT JOIN employees AS e ON e.DepartmentID = d.ID;-- 以上两句等价+-------+-----------+| Name | Name |+-------+-----------+| John | Sales || Alice | Marketing || Bob | Sales || David | HR |+-------+-----------+ sqltutorial-left-joinsqltutorial-full-outer-join 自连接查询 Self Join当前表与自身的连接查询，自连接必须使用表别名;自连接查询，可以是内连接查询，也可以是外连接查询 123456789SELECT A.Name,B.NameFROM employees AJOIN employees BON A.DepartmentID = B.DepartmentID &amp;&amp; A.Name &lt; B.Name;+------+------+| Name | Name |+------+------+| Bob | John |+------+------+ sqltutorial-self-join 联合查询 Union把多次SELECT查询的结果合并，形成一个新的查询集 123SELECT 字段列表 FROM 表A ...UNION [ALL]SELECT 字段列表 FROM 表B ... Note: UNION 会自动去重, UNION ALL 不会去重;联合查询比使用 or 效率高，不会使索引失效 123456789101112SELECT Name FROM employees UNION SELECT Name FROM departments;+-----------+| Name |+-----------+| John || Alice || Bob || David || Sales || Marketing || HR |+-----------+ 子查询 SubquerySELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);在 SQL 中，子查询（Subquery）是嵌入在其他 SQL 查询中的查询,又称嵌套查询。子查询可以用在各种 SQL 语句中，如 SELECT、INSERT、UPDATE、DELETE，以及在 WHERE 或 HAVING 子句中。 123SELECT EmployeeName, SalaryFROM EmployeesWHERE Salary &gt; (SELECT AVG(Salary) FROM Employees); 根据子查询结果可以分为： 标量子查询（子查询返回值为单个值,数字,String,Date）常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;= 列子查询（子查询返回值为一列）常用操作符:IN,NOT IN,SOME,ANY,ALL(SOME和ANY是等价的,只要子查询返回的任意一个值满足条件即可,ALL是所有值都满足条件才返回结果) 行子查询（子查询返回值为一行）常用操作符:=, &lt;, &gt;, IN, NOT IN 表子查询（子查询返回值为多行多列）常用操作符:IN 1234567891011121314151617181920212223-- 标量子查询SELECT * FROM employees WHERE Salary &gt; (SELECT AVG(Salary) FROM employees);-- 列子查询SELECT *FROM employeesWHERE Salary IN (SELECT Salary FROM employees WHERE DepartmentID = 100);SELECT *FROM employeesWHERE Salary &gt; ALL (SELECT Salary FROM employees WHERE DepartmentID = 100);SELECT *FROM employeesWHERE Salary &gt; ANY (SELECT Salary FROM employees WHERE DepartmentID = 100);-- 行子查询SELECT *FROM employeesWHERE (salary, manager) = (SELECT salary,manager FROM employee WHERE name = 'xxx');-- 表子查询SELECT e.*, d.*FROM (SELECT * FROM employees WHERE entrydate &gt; '2006-01-01') AS eLEFT JOIN dept AS dON e.dept = d.id; 根据子查询位置可分为： WHERE 之后 FROM 之后 SELECT 之后 事务 TransactionIntroduction在 SQL 中，事务（Transaction）是作为单个逻辑工作单元执行的一系列操作，这些操作要么完全完成，要么完全不完成。事务是数据库完整性的关键，它确保了数据库从一个一致的状态转换到另一个一致的状态。[Ch5-DbManagement#事务管理] 12345678910111213141516-- Manual transactionSET @@autocommit = 0;SELECT * FROM employees WHERE ID = 1;UPDATE employees SET Salary = 1000 WHERE ID = 1;UPDATE employees SET Salary = 2000 WHERE ID = 2;COMMIT;-- 如果出现错误,可以使用 ROLLBACK 回滚事务ROLLBACK;-- 使用START/BEGIN TRANSACTIONSTART TRANSACTION; -- 或者 BEGIN;statement1;statement2;COMMIT; ACID 原子性（Atomicity）：事务中的所有操作要么全部完成，要么全部不完成。如果事务中的某个操作失败，那么整个事务将被回滚，数据库状态不会改变。 一致性（Consistency）：事务确保数据库从一个一致的状态转换到另一个一致的状态。事务开始和结束时，所有的业务规则都必须保持一致。 隔离性（Isolation）：每个事务都在一个独立的工作区中执行，事务之间不会互相影响。这意味着并发事务的修改必须被隔离，直到事务提交，其他事务才能看到这些修改。 持久性（Durability）：一旦事务被提交，它对数据库的更改就是永久性的。即使发生系统故障，更改也不会丢失。 并发事务 Concurrent Transaction事务并发问题[Ch5-DbManagement#事务管理]多用户并发访问数据库时,可能会出现以下问题： lost updateTransaction A and Transaction B read and updates the same data, The update of Transaction A is lost because Transaction B overwrites it. dirty readA transaction reads data written by a concurrent uncommitted transaction. nonrepeatable readA transaction re-reads data it has previously read and finds that data has been modified by another transaction (that committed since the initial read). phantom readA transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows satisfying the condition has changed due to another recently-committed transaction. serialization anomalyThe result of successfully committing a group of transactions is inconsistent with all possible orderings of running those transactions one at a time. Transaction Isolation Level Isolation Level Dirty Read Nonrepeatable Read Phantom Read Serialization Anomaly Read uncommitted Allowed, but not in PG Possible Possible Possible Read committed Not possible Possible Possible Possible Repeatable read Not possible Not possible Allowed, but not in PG Possible Serializable Not possible Not possible Not possible Not possible 12-- 设置事务隔离级别SET &lt;SESSION|GLOBAL&gt; TRANSACTION ISOLATION LEVEL &lt;READ UNCOMMITTED|READ COMMITTED|REPEATABLE READ|SERIALIZABLE&gt;; Reference:postgresql-transaction-isolation-levelszhihu","link":"/Dev/DataBase/DataBase03/"},{"title":"Glossary Of SQL","text":"Basic Structure of SQL Server syntaxIntro Generally speaking, the real difference between statements, clauses, batches, etc., is determined by how you use them at the time.The Difference Between SQL Statement,Command, Clause, Batch, etc by Aubrey Love 🪧Note:日常工作中,这些术语的使用并不是很严格,不必纠结于此.但是了解这些术语的含义,帮助我们在阅读文档时更加准确的理解文档的含义. 个人对此的简单总结如下: Statement：语句.是一条完整的 SQL 语句，可以是单行，也可以是多行。例如，SELECT * FROM Users; 就是一个 SQL 语句。通常用分号 ; 结尾。 Command：命令.通常指对数据库或数据库对象执行的操作。例如，CREATE, DROP, SELECT, INSERT, UPDATE, DELETE 等都是 SQL 命令。 Batch：批处理.这是一组 SQL 语句，它们作为一个单元一起发送到 SQL 服务器以便一起执行。在大多数 SQL 服务器中，批处理由一个或多个 SQL 语句组成，这些语句由分号 ; 分隔。 Clause：子句.这是 SQL 语句的一部分，它用于指定 SQL 语句的某些条件或修改 SQL 语句的行为。例如，WHERE, AND, OR, NOT, FROM, ORDER BY 等都是 SQL 子句。 Query : 查询.在 SQL 中，Query 是一个请求，用于从数据库中获取特定的数据。最常见的查询是 SELECT 语句，它用于从一个或多个表中选择数据。 SQL StatementSQL Server “statements” are the most basic unit of code that can be executed in SQL Server.A statement is typically a single line of code, although multiple lines may be combined into a single statement. You can also use a semicolon (;) as a batch terminator that separates one command statement or batch from another. SQL CommandCommands are often referred to as a STATEMENT or QUERY. However, a SQL command is any instruction set that directs SQL Server to perform an action against a given SQL Server object. DDL (Data Definition Language) DML (Data Manipulation Language) DCL (Data Control Language) TCL (Transaction Control Language) ps: 有时把DML中的 SELECT 单独拿出来，称为 DQL(Data Query Language) DDL DML DCL TCL CREATE SELECT GRANT COMMIT ALTER INSERT REVOKE ROLLBACK DROP UPDATE SAVEPOINT TRUNCATE DELETE SET TRANSACTION COMMENT MERGE RENAME CALL EXPLAIN PLAN LOCK TABLE SQL BatchA SQL Server “batch” is a single or multi-line block of code that tells the SQL Server what action to take on a SQL Server object. Batches are typically separated by the “GO” statement at the end of a SQL query; 12345678USE AdventureWorks2019;GOSELECT \\*FROM HumanResources.Department;GOSELECT \\*FROM HumanResources.Employee;GO SQL QueryThe “query” keyword in SQL Server is used to perform an action against a database or database object. SQL ClauseA SQL Server “clause” is a code element that defines a particular action. Clauses are typically used to control the flow of a query or Transact-SQL program. The most common clauses are the FROM, WHERE, and ORDER BY clauses. The SELECT clause is used to specify the columns or expressions that will be returned by a query. DataBase GlossaryDatabase,Schema：数据库，一个库可以有多个表Table,Relation：表（Table）是数据库中存储数据的主要结构，它由行（记录）和列（字段）组成.表的结构通常由字段名和字段类型定义Row,Record,Item,Tuple：行，一行可以有很多列；Column,Field，列，不再细分的具体值 References⭐www.mssqltips.comwww.databasestar.comdev.mysql.com","link":"/Dev/DataBase/GlossaryOfSQL/"},{"title":"Structed vs Unstructed Data","text":"Structured Data结构化数据是高度组织和整齐格式化的数据。它是可以放入表格和电子表格中的数据类型。结构化数据也被称为定量数据(Quantitative Data)，在项目中，保存和管理这些的数据一般为关系数据库，当使用结构化查询语言(SQL)时，计算机程序很容易检索&amp;操作数据。结构化数据可以通过多种方式从多种来源生成。它可以来自企业软件，如客户关系管理（CRM）系统，会计程序和其他应用程序中使用的关键业务运营。它可以从在线来源生成，包括社交媒体平台和网络调查。它也可以来自人工输入。此外，可以使用依赖于人工智能（AI）和自然语言处理（NLP）的商业智能（BI）工具从非结构化数据中提取结构化数据。 Unstructured Data非结构化数据是没有固有结构或组织的信息。非结构化数据通常被称为“对象”,常见的非结构化数据包括各种办公文档、图片、视频、音频、设计文档、日志文件、机器数据等。这类数据占全球生成的所有数据的 80%到 90%。 Semi-Structured Data在某种程度上，大多数数据是非结构化和结构化数据的混合。半结构化数据是结构化数据的一个松散定义的子集。可以将其视为添加了标签、关键字和元数据以使其更有用的非结构化数据 Semi-structured data occupies the middle ground between structured and unstructured data as data that has some degree of organization but is not fully organized into a fixed record format found in a traditional system or database For example, you could add some structure to a natively unstructured XML document using metadata to explain who created the document and when, and keywords to describe the content and make it possible to be found in searches. In the case of HTML documents, which would otherwise be unstructured, H1 tags are used to identify their titles while H2 identify subsections, making it more easily searchable. RefDatamation","link":"/Dev/DataBase/StructedvsUnstructedData/"},{"title":"Hexo添加Live2d模型","text":"Installations 首先在网站根目录下执行npm install --save hexo-helper-live2d，下载 Live2d 插件 下载模型，在网站根目录下新建live2d_models文件夹，将模型文件放入其中,模型文件可在以下链接下载https://github.com/xiazeyu/live2d-widget-models 修改_config.yml文件，添加如下配置1234567891011live2d: enable: true model: use: nipsilon # 相对于/live2d_models/的路径 display: position: left width: 175 height: 350 log: true mobile: show: false 文件的存放位置参考下图 效果图 Configurationshelper 特有12345678910111213141516171819# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true # enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url General Settings123456789101112131415161718192021# Live2D## https://github.com/xiazeyu/live2d-widget.js## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-initlive2d: model: scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 150 height: 300 position: right hOffset: 0 vOffset: -20 mobile: show: true scale: 0.5 react: opacityDefault: 0.7 opacityOnHover: 0.2 Refhexo-helper-live2dHexo 添加 Live2D 看板娘+模型预览","link":"/Dev/FrontEnd/Live2d/"},{"title":"PicGo-Github配置图床(Typora&amp;VSCode)","text":"Intro什么是图床图床，也被称为图像托管服务（Image Hosting Service），是一种在线服务，它提供了一个方便的方式来存储和分享图片。用户可以上传图片到图床，然后图床会生成一个可以在网页、论坛、博客或其他地方使用的链接，以便他人可以查看或下载这些图片。 图床服务通常提供一定的免费存储空间，但可能会对图片的大小、格式或数量有限制。一些图床还提供额外的付费服务，如更大的存储空间、更高的带宽或更多的功能。 优缺点 节省存储空间：图床服务可以帮助你节省本地或服务器的存储空间，因为图片是存储在图床服务的服务器上的。 易于分享：图床服务通常会为上传的图片提供一个 URL 链接，你可以将这个链接分享给他人，或者在网站、博客、论坛等地方使用，让他人可以轻松地查看或下载图片。 易于管理：许多图床服务提供了用户友好的界面和工具，使得上传、管理和分享图片变得非常简单 虽然图床服务有许多优势，但也有一些潜在的缺点，如可能的隐私问题、服务商可能会关闭或更改服务条款、以及对免费用户的存储空间或带宽的限制等。 StepsGithub Repo 新建 Repo，可见性设置为 Public Gen GitHub Token,在 Personal access tokens 中可选 Fine-grained tokens 或 Tokens(classic)，前者对权限有更细致的划分。 PicGo 下载源 地址/安装方式 GitHub Release https://github.com/Molunerfinn/PicGo/releases 腾讯云 COS https://github.com/Molunerfinn/PicGo/releases 山东大学镜像站 https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo 在图床设置中进行如下配置 自定义域名可设置为https://cdn.jsdelivr.net/gh/your-repo-name@master Typora语言设置为中文 偏好-图形，进行如下设置 VSCode下载 PicGo 插件，Ctrl+Shift+P - Preferences: Open User Settings (JSON)，添加如下配置 默认快捷键如下","link":"/Dev/FrontEnd/imageBed/"},{"title":"Linux Commands","text":"文件操作Linux 系统中，文件操作是非常重要的一部分，以下是一些常用的文件操作命令及其作用： 目录操作 ls 列出目录内容 作用：显示指定目录下的文件和文件夹列表。 查询指定文件夹下的文件个数ls -A &lt;folder_path&gt; wc -l -rwxrwxrwx中-表示类型为普通文件，若为d则表示为目录。rwx rwx rwx分别表示文件所有者、组用户以及其它用户对该文件的权限，第一个efterklang为文件所有者，第二个为文件所有者所在的组，1093 表示文件大小(Byte)，时间为 last modified time，结尾为 file name 12345678910╭─ Arch  m/c/U/2/.c/  0.032s in  bash 󰅐 8:59 PM└  ls -l ./total 4-rwxrwxrwx 1 efterklang efterklang 1093 Dec 20 17:02 LICENSEdrwxrwxrwx 1 efterklang efterklang 4096 Jun 9 20:50 backdropsdrwxrwxrwx 1 efterklang efterklang 4096 Apr 26 14:57 colorsdrwxrwxrwx 1 efterklang efterklang 4096 May 31 18:06 configdrwxrwxrwx 1 efterklang efterklang 4096 May 25 16:57 eventsdrwxrwxrwx 1 efterklang efterklang 4096 May 26 10:28 utils-rwxrwxrwx 1 efterklang efterklang 516 May 27 12:19 wezterm.lua cd 改变当前目录 作用：切换当前工作目录到指定的路径。 cd ~ 切换到用户主目录 cd / 切换到根目录 cd .. 切换到上一级目录 cd - 切换到上次工作目录 现代的 cd 替换命令: zoxide,z pwd 打印工作目录 作用：显示当前工作目录的完整路径。 cp 复制文件或目录 作用：将文件或目录从一个位置复制到另一个位置。 mv 移动或重命名文件 作用：移动文件或目录到新的位置，或者重命名文件或目录。 重命名/移动文件 mv &lt;old_name&gt; &lt;new_name&gt; mv &lt;old_path&gt; &lt;new_path&gt; 将指定文件夹下的所有文件移动到另一个指定的目录mv &lt;source_folder&gt;/* &lt;target_folder&gt; rm 删除文件或目录 touch 创建空文件或更新文件时间戳 mkdir 创建目录 rmdir 删除空目录 权限设置 chmod 更改文件或目录权限 chown 更改文件或目录的所有者 chgrp 更改文件或目录的组 cat 连接文件并打印到标准输出 作用：显示文件的内容。 more 分页显示文件内容 作用：分页显示文件的内容，便于查看长文件。 less 显示文件内容，支持前后翻页 作用：显示文件的内容，支持向前和向后翻页。 head 显示文件的开头部分 作用：显示文件的前几行，默认是前 10 行。12head filename.txt # 显示文件的前10行head -n 20 filename.txt # 显示文件的前20行 tail 显示文件的结尾部分 作用：显示文件的最后几行，默认是最后 10 行。123tail filename.txt # 显示文件的最后10行tail -n 20 filename.txt # 显示文件的最后20行tail -f filename.txt # 实时显示文件新增的内容 find 搜索文件 作用：在指定目录及其子目录下搜索符合条件的文件。 diff 比较文件差异 作用：比较两个文件或目录的差异。 ln 创建链接 作用：创建文件或目录的硬链接或符号链接。 du 磁盘使用情况 作用：显示文件或目录占用的磁盘空间。 df 磁盘空间使用情况 作用：显示文件系统磁盘空间的使用情况。 tar 打包压缩或解压文件 作用：创建、查看或解压缩 tar 包。 gzip 压缩或解压文件 作用：使用 gzip 程序压缩或解压文件。 nohup 命令可以在退出 shell 后继续运行进程，nohup &lt;command&gt; &amp;例如 nohup python ./train.py &gt;&gt; train.log 2&gt;&amp;1 &amp; 用户管理用户登录系统超级用户的用户名为 root，密码在安装系统时已设定，当用户正确地输入用户名和口令后，就能合法地进入系统。普通用户在建立了普通用户账号以后就可以进行登录了。 su root 临时切换到 root 用户，需要输入密码，切换后环境变量不变，取得 root 的部分权限，且只能使用当前用户 path 路径中的命令，不能使用 root 用户 path 路径中的独有命令 su - root 切换为 root 用户，需要输入密码，切换后环境变量改变，几乎可以不受限制的做任何事 su - &lt;user_name&gt; 切换用户 su - username -c &lt;command&gt;:Execute a command as another user exit/logout 退出当前用户 账号管理Linux 用户对账号的管理分为：增、删、改三个方面： 增加新用户useradd -c comment，指定一段注释性描述。-d 目录，指定用户主目录，如果此目录不存在，则同时使用-m 选项，可以创建主目录。-g 用户组，用来指定这个用户默认的用户组。-G 用户组，一般配合‘-a’来完成向其它组添加。-s Shell 文件，指定用户的登录 Shell。-u 用户号，指定用户的用户号，如果同时有-o 选项，则可以重复使用其他用户的标识号。 删除用户删除用户账号就是要将/etc/passwd 等系统文件中的该用户记录删除，必要时还删除用户的主目录。删除一个已有的用户账号使用 userdel 命令，其格式如下： userdel &lt;option&gt; &lt;user_name&gt;常用的选项是-r，它的作用是把用户的主目录一起删除。 修改用户 使用 usermod 命令，其格式如下：usermod &lt;option&gt; &lt;user_name&gt; 常用的选项包括-c,-d,-m,-g,-G,-s,-u 以及-o 等，这些选项的意义与 useradd 命令中的选项一样，可以为用户指定新的资源值。修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录 Shell 等。 用户权限管理命令chmod 用于修改文件的访问权限 format: chmod &lt;mode&gt; &lt;file&gt; mode: user: u(user，所有者),g(group，同组用户),o(other，其它用户),a(all) operation: +（添加权限）、-（移除权限）或 =（设置权限） permission: r(read)、w(write)、x(execute)、s(setuid，设置用户 ID)、t(setgid，设置组 ID) Regular Expressiongrep 是一种强大的文本搜索工具，它允许用户在文件中搜索匹配特定模式的行。这里有一些 grep 的使用案例：RIPgrep GUIDE 参数 i: 忽略大小写 ignore n: 显示行号 number v: 反向匹配 invert r/R: 递归搜索，即在目录及其所有子目录中搜索文件(ps:ripgrep 默认支持递归搜索) recursive R 支持软链接的解引用 基本搜索：在文件中搜索特定的文本。例如，如果你想在文件 example.txt 中搜索单词 “hello”，你可以使用以下命令： 1grep &quot;hello&quot; example.txt 递归搜索：grep 可以递归地在目录中搜索文件。例如，如果你想在当前目录及其所有子目录中搜索单词 “hello”，你可以使用 -r 或 -R 选项： 1grep -r &quot;hello&quot; . 反向匹配：grep 还可以找出不匹配特定模式的行。例如，以下命令会显示 example.txt 中所有不包含 “hello” 的行： 1grep -v &quot;hello&quot; example.txt 指定开头/结尾 12grep &quot;^May&quot; dairy.md # 匹配以May开头的行grep &quot;hello$&quot; example.txt # 匹配以hello结尾的行 快捷键123456789Ctrl + L clearCtrl + K 删除从光标位置到行尾的内容Ctrl + U 删除从光标位置到行首的内容Ctrl + A：移动光标到行首Ctrl + E：移动光标到行尾Ctrl + R：搜索历史命令Ctrl + C：终止进程Ctrl + D：退出 shellTab：自动补全 插件 batA cat clone with syntax highlighting and Git integration. bottomYet another cross-platform graphical process/system monitor. btopA monitor of resources curlieThe power of curl, the ease of use of httpie. fdA simple, fast and user-friendly alternative to find. fzf🌸 A command-line fuzzy finder gpingPing, but with a graph zoxideA smarter cd command. Supports all major shells. ripgrepripgrep recursively searches directories for a regex pattern while respecting your gitignore [tldr] Terminal &amp; ShellTerminal:Wezterm，Alacritty，Kitty，Windows Terminal etc.Shell:Nushell,Fish,Powershell,zsh etc.","link":"/Dev/Linux/LinuxCmds/"},{"title":"WSL迁移至其它盘符","text":"WSL Migration Manual :12345678910111213141516171819202122Usage: wsl.exe [Argument] [Options...] [CommandLine]Arguments for managing distributions in Windows Subsystem for Linux: --export &lt;Distro&gt; &lt;FileName&gt; [Options] Exports the distribution to a tar file. The filename can be - for stdout. Options: --vhd Specifies that the distribution should be exported as a .vhdx file. --import &lt;Distro&gt; &lt;InstallLocation&gt; &lt;FileName&gt; [Options] Imports the specified tar file as a new distribution. The filename can be - for stdin. Options: --version &lt;Version&gt; Specifies the version to use for the new distribution. --vhd Specifies that the provided file is a .vhdx file, not a tar file. This operation makes a copy of the .vhdx file at the specified install location. Commands wsl -l -v 查看WSL Distros wsl --export &lt;Distro&gt; &lt;FileName&gt; [Options]将要迁移的WSL Distro导出为tar wsl --unregister &lt;Distro&gt;卸载WSL Distro wsl --import &lt;Distro&gt; &lt;InstallLocation&gt; &lt;FileName&gt; [Options]将tar导入到新的WSL Distro wsl --set-default &lt;UserName&gt;为WSL Distro设置默认用户 wsl -d &lt;Distro&gt;Linux,启动😎 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# show distributions┌─  windows   /Desktop   0.081s  RAM 11/13GB 󰅐 5:35 PM Fri  33°C└  wsl -l -v NAME STATE VERSION* docker-desktop-data Stopped 2 Ubuntu-24.04 Running 2 docker-desktop Stopped 2 Arch Running 2# export to tar┌─  windows   /Desktop   0.046s  RAM 11/13GB 󰅐 5:35 PM Fri└  wsl --export Arch E:\\wsl\\Arch.tarExport in progress, this may take a few minutes.The operation completed successfully.# unregister Ubuntu┌─  windows   /Desktop   58.532s  RAM 9/13GB 󰅐 5:41 PM Fri└  wsl --unregister Ubuntu-24.04Unregistering.The operation completed successfully.# import from tar┌─  windows   /Desktop   0.145s  RAM 10/13GB 󰅐 5:44 PM Fri└  wsl --import Ubuntu e:\\wsl\\Arch e:\\wsl\\Arch.tarImport in progress, this may take a few minutes.The operation completed successfully.# set default user┌─  windows   /Desktop   21.622s  RAM 12/13GB 󰅐 6:00 PM Fri└  Arch config --default-user efterklang# launch┌─  windows   /Desktop   0.182s  RAM 10/13GB 󰅐 6:02 PM Fri└  wsl -d Arch ff gjx@Efterklang I use Arch BTW(●ˇ∀ˇ●) ┌──────────────────────────────────────────────────────────────────────────────┐ ▄  OS ➜ Arch Linux 20240101.0.204074 x86_64 ▟█▙ │ ├ Kernel ➜ Linux 5.15.146.1-microsoft-standard-WSL2 ▟███▙ │ ├󰏖 Packages ➜ 190 (pacman) ▟█████▙ │ └ Shell ➜ fish 3.7.1 ▟███████▙ 󰧨 LM ➜ login (TTY) ▂▔▀▜██████▙ │ ├ Terminal ➜ WezTerm 20240203-110809-5046fc22 ▟██▅▂▝▜█████▙  PC ➜ Windows Subsystem for Linux - Arch ▟█████████████▙ │ ├ CPU ➜ AMD Ryzen 7 5800H (16) @ 3.19 GHz ▟███████████████▙ │ ├󰍛 GPU ➜ NVIDIA GeForce RTX 3060 Laptop GPU (5.87 GiB) [Discrete] ▟█████████████████▙ │ ├󰍛 GPU ➜ AMD Radeon(TM) Graphics (1.98 GiB) [Integrated] ▟███████████████████▙ │ ├󰋊 Disk ➜ 2.09 GiB / 1006.85 GiB (0%) - ext4 ▟█████████▛▀▀▜████████▙ │ ├󰋊 Disk ➜ 165.95 GiB / 200.00 GiB (83%) - 9p ▟████████▛ ▜███████▙ │ ├󰋊 Disk ➜ 101.74 GiB / 275.69 GiB (37%) - 9p ▟█████████ ████████▙ │ ├󰋊 Disk ➜ 166.97 GiB / 475.45 GiB (35%) - 9p ▟██████████ █████▆▅▄▃▂ │ ├ Memory ➜ 793.43 MiB / 6.71 GiB (12%) ▟██████████▛ ▜█████████▙ │ ├󰓡 Swap ➜ 0 B / 2.00 GiB (0%) ▟██████▀▀▀ ▀▀██████▙ │ ├󰅐 Uptime ➜ 7 seconds ▟███▀▘ ▝▀███▙ 󰩟 Local IP ➜ 113.54.240.64/19 ▟▛▀ ▀▜▙ 󰩟 Public IP ➜ 89.116.88.203 (Tokyo, JP) └──────────────────────────────────────────────────────────────────────────────┘ ● ● ● ● ● ● ● ●","link":"/Dev/Linux/WSL/"},{"title":"Java Stream","text":"OverviewJava 8 引入用于操作集合(Collection)的 Stream API,它将元素集合抽象为流(stream),元素如同水流一样在管道(pipeline)中传输,我们可以方便地对流进行各种操作(Operation),最终得到我们想要的结果,我们将这种操作的方式称为流式处理(stream processing) 操作分类: Intermediate operations: 返回一个新的 Stream,可进行链式操作 Terminal operations: 返回一个 result 或 side-effect,只能放在最后 如下是一个使用 Stream 对 Collection 进行操作的代码示例,其中filter为中间操作,forEach为终止操作 12345678910public static void main(String[] args) { List&lt;String&gt; nameList = Arrays.asList(&quot;Valerie&quot;, &quot;Jack&quot;, &quot;John&quot;, &quot;Jerry&quot;, &quot;Jesus&quot;); nameList.stream() .filter(name -&gt; name.startsWith(&quot;J&quot;)) .filter(name -&gt; name.length() == 4) .forEach(System.out::println);}[OUTPUT]JackJohn Stream 特点: Lazy Evaluation: 中间操作不会立即执行,只有在遇到终止操作时流才开始真正的遍历,即一次遍历中执行多个操作(映射,过滤等),这种特性称为惰性求值(lazy evaluation),这种特性使得 Stream API 可以进行更高效的操作 Internal Iteration: 传统的集合操作是外部迭代(external iteration),即用户需要手动迭代集合中的每一个元素,而 Stream API 是内部迭代(internal iteration),用户只需要告诉 Stream API 需要对集合进行什么操作,而不需要关心具体的迭代过程 Immutability: Stream 不会改变原有的数据结构,它只是对原有的数据进行操作,并返回一个新的 Stream Parallel Processing : JDK 源码注解中提到 Stream pipelines may execute either sequentially or in parallel, 即 Stream 既可被顺序处理,也可并行处理,从而充分利用多核处理器的优势 Methods Method 方法作用 Operation 类别 count 计数 terminal forEach 迭代处理 terminal reduce 归约 terminal collect 收集 terminal findAny 查找 terminal anyMatch 匹配 terminal filter 过滤 intermediate sorted 排序 intermediate distinct 去重 intermediate limit 取用前几个 intermediate skip 跳过前几个 intermediate map 映射 intermediate concat 拼接 intermediate To perform a computation, stream operations are composed into a stream pipeline. A stream pipeline consists of a source (which might be an array, a collection, a generator function, an I/O channel, etc), zero or more intermediate operations (which transform a stream into another stream, such as filter(Predicate)), and a terminal operation (which produces a result or side-effect, such as count() or forEach(Consumer)). Streams are lazy; computation on the source data is only performed when the terminal operation is initiated, and source elements are consumed only as needed. 创建 Stream123456789101112// 使用 Collection 的 stream()和 parallelStream()方法List&lt;Integer&gt; list = Arrays.asList(1, 2, 3);Stream&lt;Integer&gt; stream1 = list.stream();Stream&lt;Integer&gt; stream2 = list.parallelStream();// 使用 Arrays 的 stream() 方法Stream&lt;Integer&gt; stream3 = Arrays.stream(new Integer[] {1, 2, 3});// 使用 Stream 类的静态方法 of()、iterate()、generate()Stream&lt;Integer&gt; stream4 = Stream.of(1, 2, 3); // of() 内部调用的是 Arrays.stream() methodStream&lt;Double&gt; stream5 = Stream.iterate(10.0,num -&gt; num &gt; 0.5, num -&gt; num / 2);stream5.forEach(System.out::println);// 10.0 5.0 2.5 1.25 0.625 0.3125Stream&lt;Double&gt; stream6 = Stream.generate(Math::random).limit(5);stream6.forEach(System.out::println);// 5 个随机小数 Methods 分析filterStream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)Returns a stream consisting of the elements of this stream that match the given predicate. filter 方法接受一个 Predicate 函数式接口实例[functionalInterface.md],用于过滤流中的元素,返回一个新的 stream,其中包含符合条件的元素 Predicate 是一个 Java 8 新增的函数式接口,它接受一个参数并返回一个布尔值,我们通常使用 Lambda 表达式来创建 Predicate 实例 1234567// Commonly used methods in Predicatestream.filter(element -&gt; element.length() &gt; 5)stream.filter(element -&gt; element.startsWith(&quot;J&quot;))stream.filter(element -&gt; element.endsWith(&quot;y&quot;))stream.filter(element -&gt; element.equals(&quot;Jerry&quot;))stream.filter(element -&gt; element.contains(&quot;e&quot;))stream.filter(element -&gt; element.matches(&quot;.*[aeiou].*&quot;)) forEach,find,matchStream 支持类似于 Collection 的遍历以及查询的操作,需要注意的是,Stream 中的元素是以Optional类型存在的Traverse void forEach(Consumer&lt;? super T&gt; action)forEach 接受一个 Consumer 函数式接口,用于遍历流中的每一个元素,并对其进行操作Consumer 是一个 Java 8 新增的函数式接口,它接受一个参数,无返回值,例如System.out::println; Find Optional&lt;T&gt; findFirst()Returns an Optional describing the first element of this stream, or an empty Optional if the stream is empty. If the stream has no encounter order, then any element may be returned. Optional&lt;T&gt; findAny()Returns an Optional describing the first element of this stream, or an empty Optional if the stream is empty. If the stream has no encounter order, then any element may be returned. Match boolean anyMatch(Predicate&lt;? super T&gt; predicate)只要有一个元素匹配传入的条件，就返回 true boolean allMatch(Predicate&lt;? super T&gt; predicate)所有元素都匹配传入的条件，才返回 true boolean noneMatch(Predicate&lt;? super T&gt; predicate)所有元素都不匹配传入的条件，才返回 true 12345678//forEachlist.stream().forEach(System.out::println);// FindOptional&lt;String&gt; first = list.stream().findFirst();Optional&lt;String&gt; any = list.stream().findAny();// Matchboolean isExist = list.stream().anyMatch(element -&gt; element.length() &gt; 5);boolean isAllMatch = list.stream().allMatch(element -&gt; element.startsWith(&quot;J&quot;)); map,flatMapmap 意为映射,可将一个 Stream 中的元素映射成另一个 Stream,如下代码将一个 String 类型的 Stream 映射成一个 Integer 类型的 Stream &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T,? extends R&gt; mapper)Returns a stream consisting of the results of applying the given function to the elements of this stream. &lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element. Each mapped stream is closed after its contents have been placed into this stream. (If a mapped stream is null an empty stream is used, instead.) map方法接受一个函数式接口实例mapper,根据 mapper 将流中的元素映射成新的元素,返回一个新的stream,其中包含映射后的元素 flatMap方法接受一个函数式接口实例mapper ,用于将流中的元素映射成流,并将映射后的流扁平化,即将多个流连接成一个流,返回拼接后的 stream 123456789101112131415161718192021222324252627282930313233343536373839404142434445// mapimport java.util.Arrays;import java.util.List;public class Main { public static void main(String[] args) { List&lt;String&gt; nameList = Arrays.asList(&quot;Valerie&quot;, &quot;Tom&quot;); nameList.stream() .map(String::toUpperCase) .map(name -&gt; &quot;Hello, &quot; + name) .forEach(System.out::println); nameList.stream() .map(String::toUpperCase) .flatMap((String name) -&gt; Arrays.stream(name.split(&quot;&quot;))) .forEach(System.out::println); }}[OUTPUT]Hello, VALERIEHello, JACKHello, JOHNHello, TOMHello, JERRYHello, JESUS// flatMapimport java.util.Arrays;import java.util.List;import java.util.stream.Collectors;public class Main { public static void main(String[] args) { // 给定两个数字列表 获取所有的数对 List&lt;Integer&gt; numbers1 = Arrays.asList(1, 2, 3); List&lt;Integer&gt; numbers2 = Arrays.asList(3, 4); // numbers2.stream().map(y -&gt; new int[] { x, y })返回Stream&lt;int[]&gt;,flatMap将每个x对应的Stream&lt;int[]&gt;连接 List&lt;int[]&gt; pairs = numbers1.stream().flatMap(x -&gt; numbers2.stream().map(y -&gt; new int[] { x, y })) .collect(Collectors.toList()); for (int[] pair : pairs) { System.out.print(Arrays.toString(pair)); } }}[OUTPUT][1, 3][1, 4][2, 3][2, 4][3, 3][3, 4] reducereduce 意为归约,顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作。 Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)无初始值，返回一个 Optional,参数为一个 BinaryOperator 函数式接口实例,用于将流中的元素两两结合Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an Optional describing the reduced value, if any.Parameters: accumulator - an associative, non-interfering, stateless function for combining two values Returns:an Optional describing the result of the reduction T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)有初始值，返回类型与初始值的类型一致,参数为初始值和一个 BinaryOperator 函数式接口实例 &lt;U&gt; U reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner) Parameters: identity the identity value for the combiner function accumulator an associative, non-interfering, stateless function for incorporating an additional element into a result combiner an associative, non-interfering, stateless function for combining two values, which must be compatible with the accumulator function Returns:the result of the reduction Associative（可结合的）：这意味着累积器函数在处理多个值时，其操作的顺序不影响最终结果。即无论值是如何组合的，累积器函数总是产生相同的结果。例如，加法和乘法都是可结合的操作。Non-interfering（不干扰的）：累积器函数在处理值时不会改变这些值的状态。它只是简单地将值组合起来，而不影响原始值。Stateless（无状态的）：累积器函数不依赖于或修改任何外部状态。它只根据传入的参数来计算结果，不涉及任何外部的、可变的或全局的状态。 123456789101112131415161718// 求所有员工的工资之和、最高工资// 求工资之和方法1：Stream&lt;Person&gt; -&gt; Stream&lt;Integer&gt; -&gt; Optional&lt;Integer&gt;Optional&lt;Integer&gt; sumSalary = personList.stream().map(Person::getSalary).reduce(Integer::sum);// 求工资之和方法2：Integer sumSalary2 = personList.stream().reduce(0, (sum, p) -&gt; sum += p.getSalary(), Integer::sum);// 求最高工资方法1：Stream&lt;Person&gt; -&gt; Stream&lt;Integer&gt; -&gt; IntegerInteger maxSalary1 = personList.stream().map(Person::getSalary).reduce(Integer::max).get();// 求最高工资方法2：Integer maxSalary2 = personList.stream().reduce(0, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(), (max1, max2) -&gt; max1 &gt; max2 ? max1 : max2);// 求最高工资方法3：Integer maxSalary3 = personList.stream().reduce(0, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(), Integer::max); collectstream()方法可以将集合,数组转换为 Stream,而collect()方法则可以将 Stream 转换为集合 123String[] strArr = list.stream().toArray(String[]::new);List&lt;Integer&gt; strLengthList = list.stream().map(String::length).collect(Collectors.toList());List&lt;String&gt; strList = list.stream().collect(Collectors.toCollection(ArrayList::new)); count,max,min如下方法均为 terminal operation long count()Returns the count of elements in this stream. Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator)Returns the maximum element of this stream according to the provided Comparator. Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator)Returns the minimum element of this stream according to the provided Comparator. RefStream iterateoracle docsJava8 新特性之 Stream 流（含具体案例）由浅入深体验 Stream 流（附带教程）Java 8 Stream 和 Optional: 实践指南Reducing a Stream","link":"/Dev/Java/Java%20Stream/"},{"title":"Java Evaluation Strategy","text":"基础概念Parameter: 形式参数,是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数。Argument: 实际参数,在调用有参函数时，主调函数和被调函数之间有数据传递关系。在主调函数中调用一个函数时，函数名后面括号中的参数称为“实际参数”Pass By Value: 值传递,是指在调用函数时将实际参数复制一份传递到函数中,这样在函数中如果对参数进行修改,将不会影响到实际参数。 In Pass by value, the function is called by directly passing the value of the variable as an argument. So any changes made inside the function do not affect the original value. In Pass by value, parameters passed as arguments create their own copy. So any changes made inside the function are made to the copied value not to the original value Pass by Reference: 引用传递,是指在调用函数时将实际参数的地址直接传递到函数中,那么在函数中对参数所进行的修改,将影响到实际参数。 In Pass by Reference, Function is called by directly passing the reference/address of the variable as an argument. So changing the value inside the function also change the original value. In JavaScript array and Object follows pass by reference property. In Pass by reference, parameters passed as an arguments does not create its own copy, it refers to the original value so changes made inside function affect the original value. Call by value 和 call by reference 的重要区别在于，call by value 是将实际参数的副本传递给函数，而 call by reference 是将实际参数的地址传递给函数。在 call by value 中，函数对参数的修改不会影响到实际参数，而在 call by reference 中，函数对参数的修改会影响到实际参数。 在计算机科学中，求值策略（英语：Evaluation strategy）是确定编程语言中表达式的求值的一组（通常确定性的）规则。重点典型的位于函数或算子上——求值策略定义何时和以何种次序求值给函数的实际参数，什么时候把它们代换入函数，和代换以何种形式发生。经常使用用来研究函数的形式系统 λ 演算来建模求值策略，这里它们通常叫做归约策略。求值策略分为两大基本类，严格的和非严格的，基于如何处理给函数的实际参数from wikipedia Java 中的参数传递那么为什么在 Java 中只有 call by value 呢？ 这主要是因为 Java 中的所有参数传递都是通过值传递的。在 Java 中，对象引用作为参数传递时，实际上是将对象在堆(heap)中地址值的copy传递给函数，而不是对象本身。基本类型的参数传递也是如此，传递的是基本类型字面量值的 copy 123456789101112131415161718192021222324252627public class Test { public static void main(String[] args) { int x = 10; changePrimitive(x); System.out.println(x); // 输出 10，因为 x 的值没有被改变 Integer y = new Integer(10); changeReference(y);// num 是 y 的copy System.out.println(y); // 输出 10 int[] z = {10}; changeArray(z);// num 为 z 的 copy System.out.println(z[0]); // 输出 20，因为 z[0] 的值被改变 } public static void changePrimitive(int num) { num = 20; } public static void changeReference(Integer num) { num = new Integer(20);//num本来指向y对象,现在指向另一个Integer对象,此后num和y没有任何关系. } public static void changeArray(int[] num) { num[0] = 20; }}","link":"/Dev/Java/JavaEvaluation/"},{"title":"Functional Interface","text":"SAM InterfaceSingle Abstract Method Interfaces (SAM Interfaces) are also known as Functional Interfaces.A functional interface in Java is an interface that contains only one abstract method. They can have any number of default or static methods. The main roles of functional interfaces are: Support for Lambda Expressions and Method References Support for Stream API Here’s an example of a functional interface which is implemented using a lambda expression: 1234567891011@FunctionalInterfaceinterface GreetingService { void sayHello(String msg);}public class Main { public static void main(String[] args) { GreetingService greetService = (message) -&gt; {System.out.println(&quot;Hello &quot; + message)}; greetService.sayHello(&quot;Efterklang&quot;); }} 🪧Note: The @FuncitonalInterface annotation is optional. The parentheses () are optional if there is only one parameter. The curly braces {} are optional if there is only one statement. Create SAM Interface InstancesInstances of functional interfaces can be created with lambda expressions, method references, or constructor references. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950@FunctionalInterfaceinterface Message { void send(String name);}// λ Expressionspublic class Main() { public static void main(String[] args) { Message message = (name) -&gt; { System.out.println(&quot;Sending email&quot; + name); }; message.send(&quot;Efterklang&quot;); }}// Method References/** * In this example, System.out::println is a method reference that refers to the println method of the System.out object. * The method reference is equivalent to the lambda expression x -&gt; System.out.println(x). * Here this reference acts as Consumer functional interface instance. * void java.lang.Iterable.forEach(Consumer&lt;? super String&gt; action)*/public class Main() { public static void main(String[] args) { List&lt;String&gt; list = Arrays.asList(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Cherry&quot;); list.forEach(System.out::println); }}// Constructor Referencesclass Person { private String name; Person(String name) { this.name = name; } String getName() { return name; }}@FunctionalInterfaceinterface PersonFactory { Person create(String name);}PersonFactory factory = Person::new;Person person = factory.create(&quot;John&quot;);System.out.println(person.getName()); // Outputs: John Examples of SAM InterfacesJava’s standard library includes many commonly used SAM interfaces, such as Runnable, Callable, Comparable,Consumer, and many others in the java.util.function package. 123456789101112131415161718192021222324252627282930313233343536373839@FunctionalInterfacepublic interface Runnable { /** * Runs this operation. */ void run();}@FunctionalInterfacepublic interface Callable&lt;V&gt; { /** * Computes a result, or throws an exception if unable to do so. * * @return computed result * @throws Exception if unable to compute a result */ V call() throws Exception;}@FunctionalInterfacepublic interface Comparable&lt;T&gt; { public int compareTo(T o);}@FunctionalInterfacepublic interface Consumer&lt;T&gt; { /** * Performs this operation on the given argument. * * @param t the input argument */ void accept(T t); default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) { Objects.requireNonNull(after); return (T t) -&gt; { accept(t); after.accept(t); }; }} Here’s an example of using the Comparator and Consumer interfaces with lambda expressions: 12345678910111213141516171819202122232425262728293031323334353637import java.util.Arrays;import java.util.Comparator;import java.util.List;class Student { private String name; private int age; public Student(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public int getAge() { return age; }}public class Main { public static void main(String[] args) { List&lt;Student&gt; students = Arrays.asList( new Student(&quot;John&quot;, 20), new Student(&quot;Alice&quot;, 22), new Student(&quot;Bob&quot;, 18) ); //Here comparator is a functional interface(Comparator&lt;Student&gt;) instance Comparator&lt;Student&gt; comparator = Comparator.comparing(Student::getAge); students.stream().sorted(comparator); students.forEach(student -&gt; { System.out.println(student.getName()+ &quot;,&quot; + student.getAge()); }); }}","link":"/Dev/Java/functionalInterface/"},{"title":"Java Hashtable","text":"Intro如果你已了解 HashTable 相关的基本概念, 可以跳过本节.Next Part Hashtable 是一种数据结构, 用于存储键值对, 通过 key 来计算 index, 从而快速查找 value. 它以数组+链表或者数组+红黑树的形式来存储数据（在 Java 8 之后，当链表的长度超过一定阈值时，链表会转换为红黑树以提高性能）, 通过 key 的 hashcode 来计算 index, 从而快速查找 value. 名词解释 Buckets HashTable 内部有一个数组(Buckets),存放多个 Bucket，每个元素（也称为 bucket）存储键值对组（Key-Value Pairs）,每个 Bucket 中存放着所有 HashKey 相同的(Key, Value);ps:hash bucket 是一个概念,在 JDK 中其数据结构可为链表或者红黑树.引入 bucket 的目的是为了解决 hash 冲突. Hash collision 哈希冲突/哈希碰撞,指不同的 key 通过哈希函数计算出相同的 index,这种情况称为哈希冲突。 hashCode() 哈希函数,它接受一个键作为输入，并返回一个整数，该整数用作在数组中存储键值对的索引。设计哈希函数时,应使得哈希函数尽可能地均匀地分布,尽量让不同的 key 得到不同的 hashCode。 Key-Value Pair 这是存储在 HashTable 中的数据。每个键都是唯一的，并映射到一个值。 index 索引.本文中指 通过 key 的 hashcode 计算出来的 index(index 应该小于 buckets 的长度), 用于定位 key-value pair 所在的 bucket 插入键值对流程计算 index 在 Java 中，Object 类提供了一个方法 hashCode()，它返回对象的哈希码值。帮助确定对象应该存储在哈希表的哪个位置。 hashCode() 的具体实现取决于对象的类。例如，对于 String 类，hashCode() 方法计算字符串中每个字符的哈希码值，并将它们组合在一起。 请注意，Objects 规范中,如果两个对象相等（根据 equals(Object) 方法），那么它们的哈希码值必须相同。但是，两个对象的哈希码值相同时，两个对象不一定相等。这是因为可能存在哈希冲突，即两个不同的对象具有相同的哈希码值。 在哈希表中，我们首先需要通过 hashCode() 方法获取对象的哈希码，然后再通过取余操作将哈希码映射到哈希表的大小范围(即 bucketsLen)内。取余对 HashCollision 的影响 JDK 源码中,取余操作的实现为: 123static int indexFor(int h, int length) { return h &amp; (length-1);} 原理见Hashtable 快速取模方案 解决 HashCollision插入键值对时,如果发生 index 相同,意味着发生了哈希冲突 冲突解决的方法有很多种，常见的有链地址法(每个 bucket 存储一个链表，新的键值对被添加到链表的末尾)和开放地址法(如果一个 bucket 被占用，HashTable 会寻找下一个可用的 bucket)。 JDK 中的 HashTable 使用的是链地址法,即每个 bucket 存储一个链表，新的键值对被添加到链表的末尾。JDK 1.8 之后,当链表的长度超过一定阈值时，链表会转换为红黑树以提高性能。 补充取余对 HashCollision 的影响基本概念 被除数 ÷ 除数 = 商 ... 余数 被除数 mod|% 除数 = 余数 除数&gt;被除数,余数=被除数 被除数: dividend 除数: divisor 商: quotient 余数: remainder 素数/质数: prime number, 除了 1 和它本身以外不再有其他的因数 因子: factor, 一个数的因子是能够整除它的数,例如 2 是 4 的因子,因为 4/2=2 合数: composite number, 除了 1 和它本身以外还有其他的因数 在哈希函数中，取余操作通常用于将大范围的哈希值映射到一个较小的范围,取余操作的结果是哈希值的分布可能会发生变化，这可能会影响哈希碰撞的频率。 给定数列作为 keys, 以及模数(被除数) n 作为 buckets 长度, 通过取余操作, 可以将数列的值映射到[0, n)的范围内。$$a_n = 1+n*step, n \\in N$$ 取余操作可能会影响哈希碰撞的频率。除数选取素数可以减少哈希碰撞的频率。 ​ 如果 step 是 n 的因子,那么就容易发生哈希碰撞,哈希碰撞的间隔即为 step 的值。例如,n = 6, step = 2, 那么哈希碰撞的间隔为 2, 即 index = 1, 3, 5 处会发生哈希碰撞.见代码示例 123step = 2, n = 6;array: 1, 3, 5, 7, 9,11,13,15,17,19,21,23,25,27,29,31index: 1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1 数列的冲突分布间隔为因子大小，对于同样的随机数列，n 的因子越多，发生冲突的可能性就越大.故而，我们应该尽量避免因子过多的情况,如果情况允许,尽量选择素数作为除数。 Hashtable 快速取模方案证明对于二进制的位运算，整除 8(2 的三次方) 等价于右移三位 $0110 0100 &gt;&gt; 3 = (0000 1100)_2 = 12$ 即为商 而01100100的后三位$(100)_2 = 4$即为余数 已知$n = 2^m$，商为hash二进制数右移 m 位，而余数为hash的后 m 位 要求hash % n，即求hash的后 m 位，而n-1的二进制表示恰为 m 个 1，可推得hash &amp; (n-1)等与hash % n $$ \\begin{align} \\nonumber & 2 = (10)_2 \\quad 2 -1 = (1)_2 \\\\ & 4 = (100)_2 \\quad 4 -1 = (11)_2 \\\\ & 8 = (1000)_2 \\quad 8 - 1 = (111)_2 \\\\ & ...... \\\\ &归纳得到:\\\\ & 2^m = (1000...0)_2 最高位为1，其后有m个零\\\\ & 2^m-1 = (111..1)_2 共有m个1 \\end{align} $$ 例题验证 (n-1) &amp; hash，不妨设hash = 45367，二进制为 0100 1010 1111 0111，求hash % 8 45367 % 8 = 45367 &amp; 7 $$ \\begin{align} &8 = (1000)_2 \\quad7 = (111)_2 \\quad hash = \\ (0100\\ 1010\\ 1111\\ 0111)_2 \\\\ &45367 \\ \\%\\ 8 = 7 \\\\ &(0100 1010 1111 0111)_2 \\ \\&\\ (0000\\ 0000\\ 0000\\ \\ 0111)_2 = (111)_2 = 7 \\end{align} $$ 为什么 java 中哈希表的大小是 2 的幂次方?代码验证在 JDK 中,Hashtable求模的方式为 hash &amp; (n-1),这种方式的前提是 n 为 2 的幂次方,其他情况下未必成立. 1234567891011121314public class HashTable { public static void main(String[] args) { int bucketsLen = new Scanner(System.in).nextInt(); int hashCode = new String(&quot;Hello&quot;).hashCode(); System.out.println(&quot;hashCode = &quot; + hashCode); int index = hashCode &amp; (bucketsLen - 1); System.out.println(&quot;index = &quot; + index); index = hashCode % bucketsLen; System.out.println(&quot;index = &quot; + index); String isEqual = (hashCode % bucketsLen) == (hashCode &amp; (bucketsLen - 1)) ? &quot;true&quot; : &quot;false&quot;; System.out.println(&quot;hashCode % bucketLen == hashCode &amp; (bucketsLen - 1) is &quot; + isEqual); }} 123456789101112[INPUT = 16][OUTPUT]hashCode = 69609650index = 2index = 2hashCode % 16 == hashCode &amp; (bucketsLen - 1) is true----------------------------------------[INPUT = 47]hashCode = 69609650index = 34index = 18hashCode % bucketLen == hashCode &amp; (bucketsLen - 1) is false hashMap 中的哈希函数 hash &amp; (n - 1) 跟取余运算 hash % n 结果是一致的。极端情况下，如果 hashMap 中存了几千万的数据。当某次插入数据引发扩容时，需要重新计算下标值，此时用位运算可以提高性能；平常代码中使用，对于代码性能提升优化微乎其微，且会影响代码可读性 References算法分析：哈希表的大小为何是素数哈希函数除数的选取为什么是质数？哈希冲突解决方法,闭散列&amp;开散列","link":"/Dev/Java/hashTable/"},{"title":"Git for Android","text":"DownLoad 在F-Droid 中搜索Mgit，下载并安装。(Play商店中也有,但功能不能正常使用) 在Github仓库选择合适的版本下载 Quick StartClone a remote repository Click on the + icon to add a new repository Enter remote URL see URL format below Enter local repository name - note that this is not the full path, as MGit stores all repositories in the same local directory (can be changed in MGit settings) Click the Clone button If required, you will be prompted for credentials to connect to the remote repo. MGit will download the repository (all branches) to your device Create a local repository Click on the + icon to add a new repository Click on Init Local to create a local repository Enter the name for this repository when prompted A local empty repo will be created URL formatSSH URLsSSH running on standard port (22): ssh://username@server_name/path/to/repoSSH running on non-standard port: ssh://username@server_name:port/path/to/repousername is needed - by default, MGit tries to connect as root.HTTP(S) URLsHTTP(S) URL: https://server_name/path/to/repo SSHMGit AppSettings -&gt; SSH Keys -&gt; + icon -&gt; input NewFileName -&gt; Generate Key -&gt; Open File and Copy the contentGithubSettings/keysNew SSH Key -&gt; input Title -&gt; Paste the content","link":"/Dev/Git/GitForAndroid/"},{"title":"Using Git Rebase to Manage Commit History","text":"使用场景在开发过程中，可能会有这样的情况：你在开发一个功能时，提交了多次commit，但是这些commit并不是一个完整的功能，或者是一个bug修复，这时候你可能会想要将这些commit合并成一个commit，以便于更好的管理提交历史。这时候，git rebase就派上用场了。通过这个命令，对git提交历史进行整理，可以使提交历史更加清晰。需要注意的是，如果你已经将这些commit推送到了远程仓库，那么你需要使用git push --force来推送你的更改。 Warning ⚠️️ 在多人协作的项目中使用git rebase 需要注意尽量不要对已经推送到远程仓库的commit进行rebase操作，因为这样会改变提交历史，可能会导致其他人在合并你的提交时出现问题。推荐的使用场景是在本地开发过程中使用rebase整理提交历史。 如何合并多个commit如何确定你想要合并的commits的范围呢? 例如，如果你想要合并最近的三个 commit，你可以使用 HEAD~3。这将打开一个编辑器(core.editor)，列出最近的三个 commit。你也可以使用git rebase -i &lt;commit&gt;指定commit的hash值。例如git rebase -i 8c0a3c,这将打开一个编辑器，列出从 到 HEAD 的所有 commit。运行git rebase -i HEAD~3。 注意:git rebase只能合并连续的commit，如果你想要合并不连续的commit，你需要多次运行rebase命令你可以通过设置环境变量来指定使用的编辑器，例如：git config --global core.editor &quot;nvim&quot; 将使用nvim编辑器。这里推荐lazyvim以及lunarvim，这两个vim配置都是基于neovim的，功能强大，配置简单，推荐使用。且对于在终端中运行支持良好。 在编辑器中，将第二行和第三行的 pick 改为 squash 或 s;然后保存修改并退出，这将打开另一个编辑器，让你编辑新的 commit 信息。更多命令见下表Commands内容 Commands: p, pick = use commit r, reword = use commit, but edit the commit message e, edit = use commit, but stop for amending s, squash = use commit, but meld into previous commit f, fixup = like “squash”, but discard this commit’s log message x, exec = run command (the rest of the line) using shell d, drop = remove commit 编辑 commit 信息，然后保存并关闭编辑器。如果一切顺利，你的三个 commit 现在应该已经被合并成一个了。 这将改变你的 Git 历史。如果你已经将这些 commit 推送到了远程仓库，你将需要使用git push --force 来推送你的更改 Refhttps://git-scm.com/docs/git-rebase","link":"/Dev/Git/rebase-and-quash/"},{"title":"Understanding Git Reset and Revert","text":"引言项目开发中遇到过意外提交或糟糕的修改需要撤销的情况如何解决？Git Reset它可以帮助我们在Git历史中回到过去，去除错误的提交或修改，为项目的进展铺平道路 reset命令格式和参数 🛠️在开始介绍Git Reset的使用案例之前，我们先来了解一下Git Reset命令的格式和参数。Git Reset命令的一般格式如下 1git reset [option] &lt;commit&gt; Git Reset命令有三个主要的选项参数，它们分别是： git reset –soft : 此命令将HEAD移动到指定的提交，但保留暂存区和工作目录不变。这意味着所有的更改仍然被暂存，你可以重新提交。这是撤销提交但保留更改以便重新提交的好方法。只改变HEAD的位置，不改变暂存区和工作目录 git reset –mixed : 这是git reset的默认模式。此命令将HEAD移动到指定的提交，并且也会更新暂存区以匹配这个提交。但是，工作目录中的文件不会改变。这意味着你的更改仍然存在，但没有被暂存，你可以重新暂存和提交。只改变HEAD和暂存区的位置，不改变工作目录 git reset –hard : 此命令将HEAD移动到指定的提交，并且也会更新暂存区和工作目录以匹配这个提交。这将永久删除自指定提交以来的所有更改。这是一个危险的命令，因为它会永久删除更改，所以在使用之前一定要确认你不需要这些更改。改变HEAD、暂存区和工作目录的位置 git reset –merge/keep 不常用，暂不做介绍 git reset也可以操作文件，通过git reset &lt;file_name&gt;撤销暂存区中相应的文件 应用场景修复错误的提交 🐞 有时候，我们可能会在项目中不小心提交了一些错误的代码或文件，甚至可能是敏感信息。你可以使用git reset回到之前的提交，撤销这次错误，然后再次进行修改，确保密码等敏感信息不再提交到代码库中。 回滚到稳定版本 ⏪ 另一个Git Reset的常见应用场景是回滚到项目的稳定版本。有时候，在进行新功能开发或进行一些实验性的修改时，我们可能会发现项目出现了一些难以解决的问题，导致项目无法正常工作。通过回到之前的稳定版本，你可以快速撤销引入问题的修改，并确保项目回到可用状态。 例如，你在开发一个网站时添加了一些新功能，但发现它们导致了严重的性能问题,你希望丢弃这些修改，回到一个已知稳定的版本。使用Git Reset，你可以轻松地回到之前的提交，撤销这些修改，确保项目恢复正常运行。 Git Revertgit reset可以撤销提交，但是会删除提交历史，如果想保留提交历史，可以使用git revert git revert &lt;commit&gt;，其中&lt;commit&gt;是你希望撤销的提交的哈希值或引用。Git会自动创建一个新的提交，撤销指定的更改，并保留撤销的历史记录。此时，你的代码将回到撤销的提交之前的状态。","link":"/Dev/Git/reset-and-revert/"},{"title":"Base64 Encoding","text":"叠甲限于知识水平，文章中可能存在错误，欢迎指正。 What is Base64? Base64 is a binary-to-text encoding scheme. It represents binary data in a printable ASCII string format by translating it into a radix-64 representation.Base64 encoding is commonly used when there is a need to transmit binary data over media that do not correctly handle binary data and is designed to deal with textual data belonging to the 7-bit US-ASCII charset only.One example of such a system is Email (SMTP), which was traditionally designed to work with plain text data in the 7-bit US-ASCII character set. Although, It was later extended to support non US-ASCII text messages as well as non-text messages such as audio and images, It is still recommended to encode the data to ASCII charset for backward compatibility.What is Base64 Encoding and How does it work? Base64 用 6 个 bit 来表示一个字符，输入流中每 3 个 Bytes 由 4 个 Base64 字符表示12343 Bytes = 3 * 8 bits = 24 bits = 4 * 6 bitsBase64 Encoding算法会在4组6bit各自的头部添0：4 * 6 bit -&gt; 4 * 8 bits = 4 Bytes这即是Base64编码后数据长度增加1/3的原因 Base64 包含 64 个字符(26 个大写字母，26 个小写字母，10 个数字，2 个特殊字符+，/) Base64 常用于在 URL、Cookie、网页中传输少量二进制数据。 How does Base64 Encoding work?Base64 encoding works with a 65-character subset of the US-ASCII charset. The first 64 characters out of the 65-character subset are mapped to an equivalent 6-bit binary sequence $2^6 = 64$. The extra 65th character (=) is used for padding. 1234567891011121314151617181920## The Base64 AlphabetValue Encoding Value Encoding Value Encoding Value Encoding 0 A 17 R 34 i 51 z 1 B 18 S 35 j 52 0 2 C 19 T 36 k 53 1 3 D 20 U 37 l 54 2 4 E 21 V 38 m 55 3 5 F 22 W 39 n 56 4 6 G 23 X 40 o 57 5 7 H 24 Y 41 p 58 6 8 I 25 Z 42 q 59 7 9 J 26 a 43 r 60 8 10 K 27 b 44 s 61 9 11 L 28 c 45 t 62 + 12 M 29 d 46 u 63 / 13 N 30 e 47 v 14 O 31 f 48 w (pad) = 15 P 32 g 49 x 16 Q 33 h 50 y Steps 以 6 bit 为单位将二进制数据分组，不足 6 个 bit 的在末尾补 0，得到 8 组二进制数据：以 ASCII 编码的字符串HelloWorld\\n为例，其二进制数据为：01001000 01100101 01101100 01101100 01101111 01010111 01101111 01110010 01101100 01100100 00001010分组后为：010010 000110 010101 101100 011011 000110 111101 010111 011011 110111 001001 101100 011001 000000 1010 将各组二进制转成十进制，根据映射关系得到 Base64 编码1218 6 21 44 27 6 61 23 27 55 9 44 25 0 40S G V s b G 9 X b 3 J s Z A o 将 Base64 编码拼接起来，最终结果应为 4 的倍数，不足则在末尾补=SGVs bG9X b3Js ZAO= Why Base64？在早期的互联网协议中，设计者们主要考虑的是发送文本数据，因此这些协议通常只能处理 ASCII 字符集中的字符。然而，二进制文件（如图片、音频、视频等）包含的数据通常超出了 ASCII 字符集的范围。如果直接发送这些二进制数据，可能有部分字节被解释为控制字符，例如换行符、回车符、制表符等。这些控制字符在传输过程中可能会被解释为其他含义，从而导致数据传输错误。 Base64 编码出现是为了就是解决在网络上发送二进制数据的问题。Base64 选取 US-ASCII 中的64 个可打印字符作为编码后的字符集，这样就可以保证数据在传输过程中不会被解释为控制字符，从而确保数据传输的安全和可靠。 不过，Base64 编码会导致数据膨胀，大约增加 1/3 的大小。 Base64’s ApplicationsBase64 的应用非常广泛，包括但不限于： 电子邮件：在 MIME（多用途互联网邮件扩展）协议中，Base64 用于编码电子邮件的附件，使其可以通过电子邮件系统发送。电子邮件系统主要设计用于处理文本，而不是二进制数据，因此需要将二进制附件（如图片或文档）转换为文本格式。 数据 URI：在网页中，可以使用 Base64 编码的数据 URI 来内嵌图片或其他资源。这样可以减少 HTTP 请求的数量，从而提高页面加载速度。数据 URI 的格式为 data:[&lt;mediatype&gt;][;base64],&lt;data&gt;，其中 是资源的 MIME 类型， 是 Base64 编码的资源数据。 URL 编码：在某些情况下，URL 可能需要包含二进制数据。由于 URL 只能包含 ASCII 字符，因此需要使用 Base64 编码来编码这些数据。标准的 Base64 编码在 URL 中有特殊含义的字符(+ 和 /)，于是 + 和 / 分别被替换为 - 和 _。 证书和密钥：在 SSL/TLS 和其他安全协议中，证书和密钥通常使用 Base64 编码，以便在文本格式的配置文件中使用。这样可以避免二进制数据在处理或传输过程中可能出现的问题。 编码用户凭据：在 HTTP 基本认证中，用户的用户名和密码会被拼接成一个字符串，然后使用 Base64 编码，最后将编码后的字符串放在 HTTP 头的 Authorization 字段中发送给服务器。","link":"/Dev/Others/Base64Encoding/"},{"title":"DataBase Advance 存储引擎与索引","text":"","link":"/Dev/DataBase/DataBase04/"},{"title":"Copilot GPT4 Service","text":"文章已过时 Copilot-GPT4-Service Repo 已被邪恶的微软帝国禁用,不建议继续使用 👾本人号已寄 Prerequisite拥有一个 github 账号,并且订阅了 Github Copilot 服务在通过 Github 学生认证后,可免费使用 Github Copilot Step1.下载 Copilot-GPT4-Servicehttps://github.com/aaamoon/copilot-gpt4-service/releases/tag/0.2.0https://gitlab.com/aaamoon/copilot-gpt4-service Step2.运行 service,获取 copilot token解压缩,并以管理员权限运行Step1中下载的可执行文件;然后按照如下步骤 copilot token Windows运行脚本(二选一即可),按照脚本提示进行操作即可;复制得到的 token,形如 ghu_6lGZ6JxxxxxxxxxxxxxxxxD0kykBm方法一: python script get_copilot_token.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#!/usr/bin/env python3PROXY = { &quot;http&quot;: &quot;&quot;, &quot;https&quot;: &quot;&quot;}import timeimport typingfrom enum import Enumimport sysimport osimport retry: import requestsexcept ImportError: print(&quot;requests is not installed, please install it by running `pip install requests`&quot;) sys.exit(1)import requestsclass LoginError(Enum): AUTH_PENDING = 1 EXPIRED_TOKEN = 2 NETWORK_ERROR = 3 OTHER_ERROR = 4HEADERS = { &quot;accept&quot;: &quot;application/json&quot;, &quot;content-type&quot;: &quot;application/json&quot;,}def getLoginInfo(proxy=None) -&gt; (LoginError, typing.Union[dict, Exception]): url = &quot;https://github.com/login/device/code&quot; body = { &quot;client_id&quot;: &quot;Iv1.b507a08c87ecfe98&quot;, &quot;scope&quot;: &quot;read:user&quot; } try: resp = requests.post(url, headers=HEADERS, json=body, proxies=proxy, timeout=10) except requests.exceptions.ConnectionError: return LoginError.NETWORK_ERROR, None except Exception as e: return LoginError.OTHER_ERROR, e return None, resp.json()def pollAuth(device_code: str, proxy=None) -&gt; (LoginError, str): url = &quot;https://github.com/login/oauth/access_token&quot; body = { &quot;client_id&quot;: &quot;Iv1.b507a08c87ecfe98&quot;, # client_id of gh copilot &quot;device_code&quot;: device_code, &quot;grant_type&quot;: &quot;urn:ietf:params:oauth:grant-type:device_code&quot; } try: resp = requests.post(url, headers=HEADERS, json=body, proxies=proxy, timeout=10) except requests.exceptions.ConnectionError: return LoginError.NETWORK_ERROR, None except Exception as e: return LoginError.OTHER_ERROR, e data = resp.json() if data.get(&quot;error&quot;) == &quot;authorization_pending&quot;: return LoginError.AUTH_PENDING, None if data.get(&quot;error&quot;) == &quot;expired_token&quot;: return LoginError.EXPIRED_TOKEN, None elif &quot;access_token&quot; in data: return None, data[&quot;access_token&quot;] else: return LoginError.OTHER_ERROR, datadef getToken(proxy=None) -&gt; (LoginError, str): # get login info err, login_info = getLoginInfo(proxy) if err is not None: if err == LoginError.NETWORK_ERROR: print(&quot;network error, please check your network.&quot;) elif err == LoginError.OTHER_ERROR: print(&quot;unknown error occurred when getting login info.&quot;) print(&quot;error message:&quot;, login_info) return err, None interval = login_info['interval'] print(f&quot;Please open {login_info['verification_uri']} in browser and enter {login_info['user_code']} to login.&quot;) # poll for auth status while True: err, access_token = pollAuth(login_info['device_code'], proxy) if err is None: return None, access_token elif err == LoginError.AUTH_PENDING: pass elif err == LoginError.EXPIRED_TOKEN: print(&quot;session expired, please try again.&quot;) return err, None elif err == LoginError.NETWORK_ERROR: print(&quot;network error, please check your network.&quot;) return err, None elif err == LoginError.OTHER_ERROR: print(&quot;unknown error occurred when pulling auth info.&quot;) print(&quot;error message:&quot;, access_token) return err, None time.sleep(interval)if __name__ == &quot;__main__&quot;: for k, v in PROXY.items(): if v == &quot;&quot;: PROXY[k] = os.getenv(f&quot;{k}_proxy&quot;.upper()) or os.getenv(f&quot;{k}_proxy&quot;.lower()) or &quot;&quot; if re.match(r&quot;^.+://.+$&quot;, PROXY[k]) is None and PROXY[k] != &quot;&quot;: PROXY[k] = &quot;http://&quot; + PROXY[k] err, token = getToken(PROXY) if err is None: print(&quot;Your token is:&quot;) print(token) 方法二:batch scriptget_copilot_token.bat MacOS12345# method 1bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/aaamoon/copilot-gpt4-service/master/shells/get_copilot_token.sh)&quot;# method 2pip install requestspython3 &lt;(curl -fsSL https://raw.githubusercontent.com/aaamoon/copilot-gpt4-service/master/shells/get_copilot_token.py) Step3. config NextChat下载NextChat 参照下图进行配置,其中 OpenAI API Key填入在 Step2 中获得的token 后台运行Copilot-GPT4-Service后即可无限制使用 GPT4","link":"/Dev/Others/CopilotGPT4Service/"},{"title":"禁用系统快捷键","text":"问题描述windows 系统中存在一些快捷键，比如 win+space 切换 keyboard layout,这些快捷键在某些情况下会造成不必要的麻烦，我尝试在Time &amp; language &gt; Typing &gt; Advanced keyboard settings &gt; Input language hot keys中弃用win+space快捷键,但 d 对于我的电脑而言,这并没有效果 因此,本文介绍通过 PowerToys Keyboardmanager 禁用这些快捷键。 The PowerToys Keyboard Manager enables you to redefine keys on your keyboard.For example, you can exchange the letter A for the letter B on your keyboard. When you press the A key, a B will be inserted. 解决方案 下载安装PowerToys 打开 PowerToys，在左侧边栏中选择键盘管理器，点击重新映射快捷键.进入如下页面 在页面中,点击Add shortcut remapping重新映射快捷键，你可以将win+space映射为undefined，在Target app中你可以填写你想要在哪个 app 中应用这一映射.这里我将其映射为PowerToysRun的快捷键 单击ok,成功添加映射 补充PowerToys 还有很多其他的功能，比如PowerToysRun，FancyZones等，可以根据自己的需求进行配置。关于 Keyboard-manager 的更多信息，可以参考Keyboard-manager 文档","link":"/Dev/Others/DisableShortcuts/"},{"title":"Java Reflection","text":"1234567public class Main { public static void main(String[] args) { User user = new User(); Class&lt;?&gt; clazz = user.getClass(); }}","link":"/Dev/Java/Java%20Reflection/"},{"title":"Scoop","text":"Introduction Scoop is an installerThe goal of Scoop is to let you use Unix-y programs in a normal Windows environmentMike Zick Scoop是一个 Windows 的下载工具，可以方便的安装各种软件。 Directory Structure12345678910┌─  windows      0s  RAM 12/13GB 󰅐 3:13 PM Sat  27°C└  dir D:\\envir_vars\\scoop\\ Directory: D:\\envir_vars\\scoopMode LastWriteTime Length Name---- ------------- ------ ----d---- 6/1/2024 3:13 PM 󰀻 appsd---- 6/1/2024 2:48 PM  bucketsd---- 6/1/2024 3:13 PM  cached---- 6/1/2024 2:49 PM  persistd---- 6/1/2024 3:13 PM  shims Apps: 安装的各个软件或程序 Buckets: 存放各种 app 的集合,buckets 目录下存放许多个 bucket，例如 main 为默认的 bucket，extras 包括部分未收录 main bucket 的常用软件，nerdfonts 为存放字体 app 的 bucket,每一个 bucket 都是一个 github 仓库，仓库里维护许多 app 的 json 文件，json 文件里存放了 app 的安装信息，包括 app 的版本，LICENSE，下载地址 url etc,这些 json 文件被称作 App manifest，下面是一个简单的示例123456{ &quot;version&quot;: &quot;1.0&quot;, &quot;url&quot;: &quot;https://github.com/lukesampson/cowsay-psh/archive/master.zip&quot;, &quot;extract_dir&quot;: &quot;cowsay-psh-master&quot;, &quot;bin&quot;: &quot;cowsay.ps1&quot;} Cache: 存放下载的临时文件 Shims: scoop 在 environment variable 中添加了该目录;通过 scoop 安装的程序,scoop 会自动为其在 Shims 目录下生成一个对应的 exe 文件，这样程序安装后可以直接在命令行中调用。对于 GUI 程序，scoop 会自动在开始菜单中添加其快捷方式，目录C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Scoop Apps InstallationDefault Installation在终端中使用 Powershell 执行以下命令即可安装 Scoop。默认把 scoop 安装到 C:\\Users\\&lt;YOUR USERNAME&gt;\\scoop 目录下 12Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUserInvoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression Advance Installation。如果希望把 scoop 安装到其它目录，可以执行以下命令。 1234567891011121314151617181920212223242526272829303132333435363738394041424344┌─  windows   D/envir_vars   0.002s  RAM 12/13GB 󰅐 2:24 PM Sat  26°C└  irm get.scoop.sh -outfile 'install.ps1'┌─  windows   D/envir_vars   1.137s  RAM 12/13GB 󰅐 2:24 PM Sat  26°C└  ls | grep ps1-a--- 6/1/2024 2:24 PM 25628 󰞷 install.ps1┌─  windows   D/envir_vars   0.092s  RAM 12/13GB 󰅐 2:24 PM Sat  26°C└  .\\install.ps1 -?NAME D:\\envir_vars\\install.ps1SYNOPSIS Scoop installer.SYNTAX D:\\envir_vars\\install.ps1 [[-ScoopDir] &lt;String&gt;] [[-ScoopGlobalDir] &lt;String&gt;] [[-ScoopCacheDir] &lt;String&gt;] [-NoProxy] [[-Proxy] &lt;Uri&gt;] [[-ProxyCredential] &lt;PSCredential&gt;] [-ProxyUseDefaultCredentials] [-RunAsAdmin] [&lt;CommonParameters&gt;]DESCRIPTION The installer of Scoop. For details please check the website and wiki.RELATED LINKS https://scoop.sh https://github.com/ScoopInstaller/Scoop/wikiREMARKS To see the examples, type: &quot;Get-Help D:\\envir_vars\\install.ps1 -Examples&quot; For more information, type: &quot;Get-Help D:\\envir_vars\\install.ps1 -Detailed&quot; For technical information, type: &quot;Get-Help D:\\envir_vars\\install.ps1 -Full&quot; For online help, type: &quot;Get-Help D:\\envir_vars\\install.ps1 -Online&quot;┌─  windows   D/envir_vars   0.178s  RAM 11/13GB 󰅐 2:25 PM Sat  26°C└  .\\install.ps1 -ScoopDir 'D:\\envir_vars\\scoop\\' -ScoopGlobalDir 'D:\\envir_vars\\scoop\\GlobalApps' -NoProxyInitializing...Downloading...Creating shim...Adding D:\\envir_vars\\scoop\\\\shims to your path.Scoop was installed successfully!Type 'scoop help' for instructions. 如果你已经安装了 Scoop，想要把 scoop 安装到其它目录，可参考Change Directory迁移应用也可以通过scoop export导出 json 然后再通过 import 导入下载,若直接移动源目录下的文件,shims 实际上是无效的,它指向的位置仍然是原先目录 CommandInstall &amp; Update &amp; Uninstall scoop search vim 查找 app scoop install neovim 安装指定 app scoop install git@2.23.0.windows.1 安装指定版本 app scoop install -g git 安装全局 appInstall Options:-g, –global Install the app globally-i, –independent Don’t install dependencies automatically-k, –no-cache Don’t use the download cache-u, –no-update-scoop Don’t update Scoop before installing if it’s outdated-s, –skip Skip hash validation (use with caution!)-a, –arch &lt;32bit|64bit&gt; Use the specified architecture, if the app supports it scoop list List installed apps scoop status Show status and check for new app versions1234567891011Name Installed Version Latest Version Missing Dependencies Info---- ----------------- -------------- -------------------- ----7zip 23.01 24.05aria2 1.36.0-1 1.37.0-1eza 0.18.15 0.18.16fastfetch 2.11.3 2.14.0fd 9.0.0 10.1.0git 2.42.0.2 2.45.1gitui 0.26.1 0.26.2kotlin 1.9.22 2.0.0neovim 0.9.5 0.10.0 scoop update update scoop scoop update neovim 7zip aria2 更新指定软件 scoop update * 更新所有软件 scoop uninstall neovim 卸载指定软件 scoop uninstall -p python 卸载软件及其配置文件 scoop uninstall -g git 卸载全局软件 Clean scoop cleanup git 清理指定软件 scoop cleanup * 清理所有软件 scoop cache rm * 清理缓存 MISC在同一程序的不同版本之间切换 123scoop reset python@3.10.6# do somethingscoop reset python@3.12.3 alias Manage scoop aliases bucket Manage Scoop buckets cache Show or clear the download cache cat Show content of specified manifest. checkup Check for potential problems create Create a custom app manifest depends List dependencies for an app, in the order they’ll be installed download Download apps in the cache folder and verify hashes export Exports installed apps, buckets (and optionally configs) in JSON format help Show help for a command hold Hold an app to disable updates home Opens the app homepage import Imports apps, buckets and configs from a Scoopfile in JSON format info Display information about an app prefix Returns the path to the specified app shim Manipulate Scoop shims unhold Unhold an app to enable updates virustotal Look for app’s hash or url on virustotal.com which Locate a shim/executable (similar to ‘which’ on Linux) RefScoop_Wiki","link":"/Dev/Others/Scoop/"},{"title":"Recommended VSCode Extensions","text":"个人使用插件推荐，仅供参考。 Ⅰ. Beautification Themes Dark Space Material Theme Tokyo Night Tokyo Night Ported Nvim Tokyo Night Frameless Solarized Palenight Bearded Theme Icons Material Theme Icons Fluent Icons Customization CodeUI Color HighlightHighlight web colors in your editor Apc Custom UI++Advanced VSCode user interface customizations. Very experimental. VSCode AnimationsClean and customizable animations for VSCode Ⅱ. Productivity Editing BookmarksMark lines and jump to them jump🏃‍♂️ Jump/Select to the Start/End of a word in VSCode Code TranslateA pure vscode translation plug-in; 一款纯粹的 vscode 滑词翻译插件 CodeSnap📷 Take beautiful screenshots of your code Github CopilotYour AI pair programmer GitHub Copilot ChatAI chat features powered by Copilot Error LensImprove highlighting of errors, warnings and other language diagnostics. Better CommentsImprove your code commenting by annotating with alert, informational, TODOs, and more! Blockman - Highlight Nested Code BlocksMark/Highlight code blocks Markdown Markdown All In OneAll you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more) Markdown Preview EnhancedMarkdown Preview Enhanced ported to vscode Markdown LintMarkdown linting and style checking for Visual Studio Code MarkmapVisualize your Markdown as mindmaps with Markmap. PicGoUpload images to online, and generate markdown urls. FoamVS Code + Markdown + Wikilinks for your note taking and knowledge base word count cjkA word count extension that supports CJK languages. Markdown+Math Dictionary CompletionWord Completion Formatter Prettier - Code formatterCode formatter using prettier Git Git GraphView a Git Graph of your repository, and perform Git actions from the graph. Git HistoryView git log, file history, compare branches or commits GitHub CodespacesYour instant dev environment Git BlameSee git blame information in the status bar. GitLens — Git supercharged Web Live ServerLaunch a development local Server with live reload feature for static &amp; dynamic pages Miscellaneous Live ServerLaunch a development local Server with live reload feature for static &amp; dynamic pages LeetCodeSolve LeetCode problems in VS Code file-sizeShow file size in the status bar Resource MonitorDisplay CPU frequency, usage, memory consumption, and battery percentage remaining within the VSCode status bar Project ManagerEasily switch between projects IME and CursorChange input method and cursor style","link":"/Dev/VSCode/RecommendedExtensions/"},{"title":"VSCode C_Cpp Debug","text":"Intro ​ 今天阅读Configure launch.json for C/C++ debugging in Visual Studio Code，初步完成 VSCode C/C++ debug 的配置，于是写下本文，旨在记录个人在 Windows/WSL 平台，VSCode 配置 C/C++的 Debug 环境过程，以供其他初学者参考。在此之前，你需要先安装 VSCode，配置好 WSL 环境以及 gcc 环境变量。文章介绍了launch.json和tasks.json中部分attribute的含义，并给出本人的配置供读者参考 Stepslaunch.json配置 debug 环境，首先要配置launch.json，launch.json是用来配置 VSCode 的 debug 环境的，它包含了一系列的调试配置，每个调试配置都是一个对象，包含了一系列的字段，用于定义如何启动和运行调试器。在 VSCode 中，你可以通过F5快捷键或者点击左侧的 debug 按钮进入 debug 模式，此时 VSCode 会自动寻找当前工作目录下的launch.json文件，如果没有找到，VSCode 会提示你创建一个launch.json文件，如果找到了，VSCode 会自动加载launch.json中的配置，然后根据配置启动调试器。 A launch.json file is used to configure the debugger in Visual Studio Code. Visual Studio Code generates a launch.json (under a .vscode folder in your project) with almost all of the required information. To get started with debugging you need to fill in the program field with the path to the executable you plan to debug. This must be specified for both the launch and attach (if you plan to attach to a running instance at any point) configurations. Launch.json Code个人配置如下，仅供参考 123456789101112131415161718192021{ &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;c/c++ gdb&quot;, &quot;type&quot;: &quot;lldb&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;args&quot;: [], &quot;cwd&quot;: &quot;${fileDirname}&quot;, &quot;console&quot;: &quot;integratedTerminal&quot;, &quot;windows&quot;: { &quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.exe&quot;, &quot;preLaunchTask&quot;: &quot;compile c file(Windows)&quot; }, &quot;linux&quot;: { &quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.out&quot;, &quot;preLaunchTask&quot;: &quot;compile c file(Linux)&quot; } } ]} Attributes version：version of this file format不必修改 configurations：List of configurations.configuration 数组， 包含了你的调试配置。每个调试配置都是一个对象，包含了一系列的字段，用于定义如何启动和运行调试器 type：Type of configuration用于指定要使用的调试器类型。可选的值取决于你已经安装的调试器扩展。常见的 type 字段值有 node、java、lldb(主要用于调试c/cpp以及其他llvm支持的语言)、chrome(JavaScript,TypeScript)等等 name：Name of configuration; appears in the launch configuration dropdown menu.字面意思，此处的c/c++ gdb即为launch.json的name preLaunchTask：Task to run before debug session starts.在 debug 开始前执行的 task，例如编译你的代码，生成一个可执行文件(.exe, .out e.g.)，如果 task 失败，则不会启动 debug session。此处我们要配置 c/cpp 的 debug 环境，所以 preLaunchTask 设置为 build active file(名字任意)，与tasks.json中的 task 对象的 label 属性对应即可 program：Path to the program to debug.Specify debug program’s path。以 windows 平台为例，我们编写了 hello.c，要调试的程序即为filePath/hello.exe，我们可以用如下预定义变量简化 program Common pre-defined variables provided by VSCode for configuration files: ${workspaceFolder}: The path of the folder opened in VS Code. ${workspaceRootFolderName}: The name of the folder opened in VS Code without any slashes (/). ${file}: The current opened file. ${fileWorkspaceFolder}: The current opened file’s workspace folder. ${relativeFile}: The current opened file relative to workspaceFolder. ${relativeFileDirname}: The current opened file’s dirname relative to workspaceFolder. ${fileBasename}: The current opened file’s basename. ${fileBasenameNoExtension}: The current opened file’s basename with no file extension. ${fileDirname}: The current opened file’s dirname. ${fileExtname}: The current opened file’s extension. ${lineNumber}: The current selected line number in the active file. ${selectedText}: The current selected text in the active file. ${execPath}: The location of the VS Code executable. ${defaultBuildTask}: The name of the default build task. request：Indicates whether the configuration section is intended to launch the program or attach to an already running instance.一般选择 launch，前端 debug 可能会用到 attach console：Terminal type to use.取决个人喜好，可选参数如下 internalConsole：VSCode Panel 中的 TERMINAL integratedTerminal：VSCode Panel 中的 DEBUG CONSOLE externalTerminal：外部的集成终端 cwd：Program working directory.cwd 字段用于设置当前工作目录（Current Working Directory）。当你启动调试器时，这个目录将被用作程序的工作目录，一般配置为 &quot;cwd&quot;: &quot;${fileDirname}&quot; window/linux/osx：specific launch configuration attributes针对 Window,Linux/WSL,MacOS 平台单独设置的 attributes tasks.jsondebugger 正常工作，需要先编译你的代码，生成一个可执行文件(.exe, .out e.g.)，于是在preLaunch中我们定义了两个 task,用来编译 c 文件[tasks.json的使用]-&gt;See more Tasks.json Code123456789101112131415161718192021222324252627{ &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;type&quot;: &quot;shell&quot;, &quot;label&quot;: &quot;compile c file(Windows)&quot;, &quot;command&quot;: &quot;gcc&quot;, &quot;args&quot;: [ &quot;-g&quot;, &quot;${file}&quot;, &quot;-o&quot;, &quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe&quot; ] }, { &quot;type&quot;: &quot;shell&quot;, &quot;label&quot;: &quot;compile c file(Linux)&quot;, &quot;command&quot;: &quot;gcc&quot;, &quot;args&quot;: [ &quot;-g&quot;, &quot;${file}&quot;, &quot;-o&quot;, &quot;${fileDirname}/${fileBasenameNoExtension}.out&quot; ] } ]} Attribute tasks：The task configurations. Usually these are enrichments of task already defined in the external task runner.例如之前在launch.json定义的两个task 12345678&quot;windows&quot;: { &quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.exe&quot;, &quot;preLaunchTask&quot;: &quot;build active file(Windows)&quot;},&quot;linux&quot;: { &quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.out&quot;, &quot;preLaunchTask&quot;: &quot;build active file(Linux)&quot;} type：Defines whether the task is run as a process or as a command inside a shell.可选参数有 shell,progess。gcc 命令在 shell 中执行，此处选择 shell 即可 label：The task’s user interface label任务的名称，在launch.json通过 label specify tasks to run command：The command to be executed. Can be an external program or a shell command.此处选择 gcc 即可，也可选 clang 等 c/cpp 编译器 args：Arguments passed to the command when this task is invoked.命令的参数，例如-o，-g 等等 Outro​ 以经典的hello.c测试，能正常 debug。希望本文对你有帮助 🕊️","link":"/Dev/VSCode/DebugForC/"},{"title":"VSCode Keyboard Shortcuts","text":"Ⅰ. EditorGroups Shortcut Command Ctrl + 1/2 Focus first/second editor group Ctrl + M Maximize editor group Ctrl + W Close editor Alt + F4 Close windows Alt + A/D Open previous/next editor Ctrl + Shift + W/A/S/D View: split editor up/down/left/right 📨 PS: Ctrl + M When spliting, maximize the current editor group, press again to cancel Alt + A/D Open previous/next editor in the current editor group Ctrl + Shift + W/A/S/D Move the current editor group to the up/left/down/right Coding Shortcut Command Alt + Up/DownArrow Move line up/down Alt + Shift + Up/DownArrow Copy line up/down Ctrl + C/X/Y Copy/Cut/Delete line Ctrl + Z Undo Ctrl + Shift + Z Redo Alt + Scroll Accelerate scrolling Ctrl + Alt + Up/DownArrow Add cursor above/below Alt + Click Insert cursor at click Ctrl + Home/End cursorTop/Bottom Alt + [ Go to Bracket Alt + ] Select to Bracket 📨 PS: Alt + Up/DownArrow Move the current line up/down Ctrl + Alt + Up/DownArrow Add cursor above/below the current line, press ESCto exit Alt + Click Insert cursor where you click, press ESC to exit Ctrl + Home/End Move cursor to the top/bottom of the file Go to and Peek Shortcut Command F12 Go to definition Ctrl + F12 Peek implementation Shift + F12 Go to references Alt + F12 Peek definition Shift + Alt + F12 Find all references Ctrl + Shift + O Go to symbol in editor Ctrl + T Go to symbol in workspace Ⅱ. ExplorerFiles Shortcut Command J New File K New Folder E Reveal in explorer C/X/R Copy/cut/rename T Open in default integrated terminal List Shortcut Command I List.focusParent A List.collapse D List.expand Q List.collapseAll F3 List.find Ⅲ. Workbench Shortcut Command Ctrl + Shift + P Show all command Ctrl + Shift + M Toggle panel visibility Ctrl + Shift + F Toggle search visibility Ctrl + Shift + G Toggle source control visibility Ctrl + Shift + T Toggle todo tree visibility Ctrl + E Toggle explorer visibility Alt + E Toggle Secondary Sidebar visibility Ⅳ. Extensions Shortcut Command Alt + O Project Manager: List Projects to Open Alt+Q Jumpy Word Mode Alt+W Jumpy Line Mode Ctrl+L Bookmarks: Toggle Labeled Bookmarks: List Bookmarks: List","link":"/Dev/VSCode/Shortcuts/"},{"title":"tasks.json的使用","text":"Introtasks.json 的作用是什么呢？官方的解释是这样的： Lots of tools exist to automate tasks like linting, building, packaging, testing, or deploying software systems.Tasks in VS Code can be configured to run scripts and start processes so that many of these existing tools can be used from within VS Code without having to enter a command line or write new code.linting: Linting is a tool that analyzes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs &gt; Integrate with External Tools via Tasks 简单来说，tasks.json 的作用就是可以在 VSCode 中编写一些脚本，用于执行一些任务，比如编译代码，运行代码，打包代码等等。 propertiesThe task’s properties have the following semantic: label: The task’s label used in the user interface. type: The task’s type. For a custom task, this can either be shell or process. If shell is specified, the command is interpreted as a shell command (for example: bash, cmd, or PowerShell). If process is specified, the command is interpreted as a process to execute. command: The actual command to execute. windows: Any Windows specific properties. Will be used instead of the default properties when the command is executed on the Windows operating system. group: Defines to which group the task belongs. In the example, it belongs to the test group. Tasks that belong to the test group can be executed by running Run Test Task from the Command Palette. presentation: Defines how the task output is handled in the user interface. In this example, the Integrated Terminal showing the output is always revealed and a new terminal is created on every task run. options: Override the defaults for cwd (current working directory), env (environment variables), or shell (default shell). Options can be set per task but also globally or per platform. Environment variables configured here can only be referenced from within your task script or process and will not be resolved if they are part of your args, command, or other task attributes. runOptions: Defines when and how a task is run. 示例tasks.json的功能十分丰富，这里只列举一些常用的功能，更多的功能可以参考官方文档。 12345678910111213141516171819202122232425262728293031323334353637383940{ &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;type&quot;: &quot;shell&quot;, &quot;label&quot;: &quot;compile c file(Windows)&quot;, &quot;command&quot;: &quot;gcc&quot;, &quot;args&quot;: [ &quot;-g&quot;, &quot;${file}&quot;, &quot;-o&quot;, &quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe&quot; ], &quot;group&quot;: &quot;build&quot; }, { &quot;type&quot;: &quot;shell&quot;, &quot;label&quot;: &quot;compile c file(Linux)&quot;, &quot;command&quot;: &quot;gcc&quot;, &quot;args&quot;: [ &quot;-g&quot;, &quot;${file}&quot;, &quot;-o&quot;, &quot;${fileDirname}/${fileBasenameNoExtension}.out&quot; ], &quot;group&quot;: &quot;build&quot; }, { &quot;type&quot;: &quot;shell&quot;, &quot;label&quot;: &quot;run exe file(Windows)&quot;, &quot;command&quot;: &quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe&quot; }, { &quot;type&quot;: &quot;shell&quot;, &quot;label&quot;: &quot;compile and run c file(Windows)&quot;, &quot;command&quot;: &quot;gcc -g ${file} -o ${fileDirname}\\\\${fileBasenameNoExtension}.exe &amp;&amp; ${fileDirname}\\\\${fileBasenameNoExtension}.exe&quot;, &quot;problemMatcher&quot;: [&quot;$gcc&quot;] } ]} compile c file(Windows)和compile c file(Linux)：用于编译 c 文件 run exe file(Windows)用于运行编译好的 exe 文件，代码没有改动时，可以直接运行 exe 文件，避免重新编译。 compile and run c file(Windows)用于编译并运行 c 文件。 ps: 为workbench.action.tasks.runTask设置快捷键,可显示 tasks 列表","link":"/Dev/VSCode/tasks.json%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"2077 Easter Eggs about Music","text":"中文再见杰克|再见杰克 痛仰乐队飞翔鸟|飞翔鸟 唐朝乐队杀死那个石家庄人|直到大厦崩塌 万能青年旅店黑梦|黑梦,高级动物 窦唯梦缠绕的时候|梦缠绕的时侯 超载乐队火车驶向云外，梦安魂于九霄|梦安眠于九霄 刺猬乐队白日梦蓝|伤害的比赛 刺猬乐队公路之歌|公路之歌 痛仰乐队快让我再雪地上撒点野|让我们在云顶撒点野,我的病就是没有感觉 崔健垃圾场|垃圾场 何勇没有理想的人不伤心|没有理想不伤心 新裤子乐队别来纠缠我|别来纠缠我 黑豹乐队一万次悲伤|一万次悲伤 逃跑计划花火|没有结局的表演 汪峰钟鼓楼|全都是正确答案 何勇花|根已经枯萎 花儿乐队山雀|不息的身体 万能青年旅店两天|一天用来希望,一天用来绝望 许巍火车快开|生活往哪开 二手玫瑰 英文《All Along the Watchtower》 Bob Dylan《A Little Help From My Friends》 The Beatles《A Like Supreme》 A Like Supreme 《Beat on the Brat》 Ramones《Belly Of The Beast》 Anthrax《Boat Drinks》 Jimmy Buffett《Both Sides Now》 Joni Mitchell 《Disasterpiece》 Slipknot《(Don’t Fear) The Reaper》 Blue Oyster Cult《Down on the Street》 The Stooges 《Every Breath You Take》 The Police《Ex-Factor》 Lauryn Hill 《Following the River》 The Rolling Stones《Forward to Death》 Dead Kennedy《Fourtunate Son》 Creedence Clearwater Revival 《Gimme Danger》 The Stooges《Ghost Town》 The Specials 《I Fought the Law》 The Clash《I Don’t Wanna Hear It》 Minor Threat《I Walk The Line》 Jonny Cash《Imagine》 John Lennon 《Killing In The Name》 Rage Against the Machine《Knockin’ on Heaven’s Door》 Bob Dylan 《Last Caress》 Misfits《Life During Wartime》 Talking Heads《Love Like Fire》 Generation X《Lightening Breaks》 Plasmatics 《Meeting Alone the Edge》 Pink Floyd 《Nocturnes Op.55 No.1》 Chopin《New Dawn Fades》 Joy Division 《Pyramid song》 Radiohead《Psycho Killer》 Talking Heads《Playing For Time》 Madleen Kane《Play it Safe》 Iggy Pop《Path of Glory》 Plasmatics《Paid in Full》 Fire B. &amp; Rakim《Pisces》 JINJER 《Riders On the Storm》 The Doors《Rebel Rebel》 David Bowie 《Space Oddity》 David Bowie《Serach&amp;Destroy》 The Stooges《Smoke On The Water》 Deep Purple《Stairway to Heaven》 Led Zeppelin 《Tapeworm》 Pigface《The Beast In Me》 Jonny Cash《Transmission》 Joy Division《Totalimmortal》 A.F.I《The Fool On The Hill》 The Beatles《Talkin’ about a Revolution》 Tracy Chapman《The Space In Between》 How To Destroy Angels 《Venus in Furs》 The Velvet Underground 《We Gotta Live Together》 Dead Kennedys《Where is My Mind》 Pixies 文学作品For Whom the Bell Tolls 海明威的长篇小说,丧钟为谁而鸣;以美国人参加西班牙人民反法西斯战争为题材,1940 年首次出版 比远方更远,只身打马 海子诗作,九月 目击众神死亡的草原上野花一片远在远方的风比远方更远我的琴声呜咽 泪水全无我把这远方的远归还草原一个叫马头 一个叫马尾我的琴声呜咽 泪水全无远方只有在死亡中凝聚野花一片明月如镜高悬草原映照千年岁月我的琴声呜咽 泪水全无只身打马过草原","link":"/Essay/Game/2077MusicalEasterEggs/"},{"title":"Letter From Olgierd von Everec","text":"Letter from Olgierd von Everec My Dearest Wife, Were I only as skilled with words as I am with my blade. Especially now, when an icy void grips my heart. I see how you look at me, and I see how you wither. I cannot help you, but I believe I can cease harming you. This letter and this rose are my farewell. May you live in health and remember but the good times. Olgierd The Painted World​ Geralt finds himself in the surreal painted world reminiscent of the estate. The dog and cat, who apparently exist simultaneously in both worlds, informing him that in order to truly awaken Iris, Geralt has to complete the memories she has been denying, and destroy the fears and nightmares that bind her. ​ As you reenact the memories, Geralt will see how the couple’s marriage began to deteriorate over time, how Iris’ family didn’t approve of Olgierd as her husband, and how Olgierd tried to use magic to summon Gaunter O’Dimm to try and break the pact he forged, but it ultimately failed and set fire to the manor. Eventually, it leads to a scene where, having grown indifferent to Iris and only remembering that he was supposed to love her, Olgierd gave her the strange cat and dog for company and the Caretaker for protection. Video","link":"/Essay/Game/Letter-From-Olgierd-von-Everec/"},{"title":"《二子乘舟》","text":"p { text-indent: 2em; } .poem { /* font-family: Microsoft JhengHei; */ font-family: 楷体; font-style: bold; font-size: 30px; background-color:rgba(210, 180, 140, 0.1); border: 3px solid rgba(0, 0, 0, 0.1); /* 更改边框颜色和透明度 */ padding: 20px; margin: 10px; border-radius: 10px; /* box-shadow: 10px 10px 20px rgba(0, 0, 0, 0.1); */ } .admiration { font-family: Microsoft JhengHei; /* font-family: 楷体; */ /* color: #426cc2; */ /* text-align: center; */ font-style: bold; } 二子乘舟 泛泛其景 愿言思子 中心养养 二子乘舟 泛泛其逝 愿言思子 不瑕有害 注释 二子: 卫宣公的两个异母子，公子伋和公子寿 泛泛: 飘荡貌。王先谦《集疏》：“泛，浮貌。重言之曰泛泛。” 景: 通憬，远行貌 闻一多《诗经通义》“景读为‘迥’，言漂流渐远也”。 愿：思念貌 中心: 心中 养(yáng 羊) 心中烦躁不安。 瑕：训“胡”，通“无”。 不瑕，犹言“不无”，疑惑、揣测之词 译文两人乘一叶孤舟，渐渐向远处漂流。深深思念你们俩，我心中充满忧愁。 两人乘一叶小船，渐渐地越行越远。深深思念你们俩，愿你们顺利平安。 鉴赏《毛诗序》云：“《二子乘舟》，思伋、寿也。卫宣公之二子，争相为死，国人伤而思之，作是诗也。宣公为伋取于齐女而美，公夺之，生寿及朔。朔与其母诉伋于公，公令伋使齐，使贼先待于隘而杀之。寿知之，以告伋，使去之。伋曰：‘君命也，不可以逃。’寿窃其节而先往，贼杀之。伋至，曰：‘君命杀我，寿有何罪？’又杀之。”。 刘向《新序·节士》云:“寿知其母阴谋，遂与伋同舟，使舟人不得杀伋，方乘舟时，伋傅母恐其死也，闵而作诗”。 轶事典故卫宣公，姬姓卫氏名晋，为卫庄公之子。卫庄公死后，公子晋的哥哥太子完继位，是为卫桓公。卫桓公十六年，卫宣公的另一个兄弟公子州吁聚集从卫国逃走的流民袭击杀害卫桓公，自立为君，史称卫前废公。卫国人因卫前废公杀害卫桓公，而且喜好打仗，所以都不拥护他。同年九月，卫国大臣石碏联合陈桓公杀死卫前废公。十二月，石碏将公子晋从邢国迎回卫国，并拥立公子晋继位，是为卫宣公。 卫宣公和父亲卫庄公的姬妾夷姜私通，生子名伋，卫宣公把公子伋托给右公子。卫宣公很宠爱夷姜，因此将公子伋立为太子，并让右公子教导他。伋长大成人后，卫宣公为他聘娶齐女，只因新娘子是个大美人，便改变主意，在河上高筑新台，把齐女截留下来，霸为己有，就是后来的宣姜。国人恶之而作《新台》 卫宣公得到宣姜后，宣姜生下两个儿子公子寿和公子朔，卫宣公让左公子教导他们。夷姜自缢。宣姜与公子朔在宣公跟前诬陷急子。宣公派遣急子出使齐国，派人伪装强盗等在莘地，准备杀死他。 太子伋将要动身时，公子寿知道公子朔仇恨太子伋，而卫宣公想杀掉太子伋，于是对太子伋说：“边境上的强盗看见你手中的白色旄节，就会杀死你，你可不要前去。”并让太子伋赶快逃走。太子伋不同意说：“弃父之命，恶用子矣！有无父之国则可也。”等到太子伋临走时，公子寿用酒把太子伋灌醉，然后偷走太子伋的白色旄节。公子寿车上插着白色旄节奔驰到莘地，莘地的强盗看见来人果真手持白色旄节，就杀死公子寿。公子寿死后，太子伋赶到，对强盗说：“我之求也，此何罪？请杀我乎！”强盗一并杀掉太子伋，然后报告卫宣公。卫宣公于是立公子朔为太子，即后来的卫惠公。","link":"/Essay/Poems/%E3%80%8A%E4%BA%8C%E5%AD%90%E4%B9%98%E8%88%9F%E3%80%8B/"},{"title":"Phantom Liberty","text":"Lyricsby CD PROJEKT RED, Dawid Podsiadło, P.T. Adamczyk Album Cyberpunk 2077: Phantom Liberty (Original Score - Deluxe Edition) CD PROJEKT RED, Dawid Podsiadło, P.T. Adamczyk – Phantom Liberty lyrics | Matchlyric Verse 1Found outTreasures are always lostPleasures and rage combinedI’m watchin’ youBe careful with your movesTonight, I think the time is rightI think the blood has driedIt cries for moreSo what are we waiting for? Chorus 1Wires and chains(I’m just tired of lookin’ the other way)Starting to fade(I’m just tired of lookin’ the other way)It feels like a game(I’m just tired of lookin’ the other way)You have to play(I’m just tired of lookin’ the other way) Verse 2Lights out, is this who you really are?Can’t look into your eyesYour twisted mindIt’s dark, so darkWe end it nowIt ends right here, right nowPlease tell me you brought the ironLet’s light up the skyAnd fade into the night Chorus 1Wires and chains(I’m just tired of lookin’ the other way)Starting to fade(I’m just tired of lookin’ the other way)It feels like a game(I’m just tired of lookin’ the other way)You have to play(I’m just tired of lookin’ the other way) BridgeThe days when it was good are gone (*Nah-nah-nah, nah-nah, nah*)I’m tryna see what it was for, but I’ll never know (*Nah-nah-nah, nah-nah, nah*)And though it’s dead, I hear the call (*Nah-nah-nah, nah-nah, nah*)Ooh-ooh-ooh-ooh-ooh Chorus 2Wires and chains(I’m just tired of lookin’ the other way)Starting to fade(I’m just tired of lookin’ the other way)Feels like a game(I’m just tired of lookin’ the other way)You can’t escape(I’m just tired of lookin’ the other way)Wires and chains(I’m just tired of lookin’ the other way)Starting to fade(I’m just tired of lookin’ the other way)Feels like a game(I’m just tired of lookin’ the other way)You can’t escape(I’m just tired of lookin’ the other way) OutroI found outTreasures are always lostPleasures are long forgottenWho are you now? Appreciation“Phantom Liberty” by Dawid Podsiadło &amp; P.T. Adamczyk explores themes of lost treasures, suppressed emotions, and the feeling of being trapped. The lyrics suggest a sense of danger and caution, urging the listener to be careful with their actions and movements. The line “I think the blood is dried, it cries for more” implies a craving for intensity and stimulation. There is an underlying desire to break free from a stagnant and monotonous existence. The chorus of the song emphasizes the feeling of being stuck and unable to escape. Wires and chains symbolize constraints and limitations, while the mention of fading suggests a loss of vitality or passion. The lyrics portray life as a game that one must play, even if it feels repetitive and meaningless. It hints at the idea that one may feel trapped by circumstances beyond their control. In the second verse, the lyrics delve into the darkness within someone’s mind. The narrator’s inability to look into the eyes of another person suggests a lack of trust or fear of confronting their true intentions. There is a desire to bring an end to this twisted and oppressive situation, as indicated by the line “We end it now, it ends right here, right now.” The idea of fading into the moon signifies a longing for escape or transcendence. The bridge reflects on the loss of better days and the frustration of not fully understanding the purpose behind certain experiences. The mention of hearing the clock suggests an awareness of time passing and the need to take action. Overall, “Phantom Liberty” depicts a struggle with confinement, questioning the meaning of existence, and a yearning for freedom and liberation. 流行音乐常用的歌曲结构一般是 ABABCB，也就是Verse-Chorus-Verse-Chorus-Bridge-Chorus， VERSE 是主歌， CHORUS 是副歌(chorus 有合唱，副歌的意思)。 Bridge 是经常出现在第二段副歌之后的乐段，为歌曲提供一些变化、增加张力等。 长度一般是 4 或 8 小节，也被称为“middle 8”，具体时长取决于歌曲需要","link":"/Essay/Game/Phantom-Liberty/"},{"title":"","text":"唐多令·芦叶满汀洲南宋 刘过 安远楼小集，侑觞歌板之姬黄其姓者，乞词于龙洲道人，为赋此《唐多令》。同柳阜之、刘去非、石民瞻、周嘉仲、陈孟参、孟容。时八月五日也。 芦叶满汀洲，寒沙带浅流。二十年重过南楼。柳下系船犹未稳，能几日，又中秋。黄鹤断矶头，故人今在否？旧江山浑是新愁。欲买桂花同载酒，终不似，少年游。 创作背景 安远楼，在武昌黄鹄山上，一名南楼。建于1186年（淳熙十三年）。姜夔曾自度《翠楼吟》词纪之。刘过重访南楼，距上次登览几二十年。词人刘过以垂暮之身，逢此乱局，虽风景不殊，却触目有忧国伤时之恸。这种心境深深地反映到他的词中。 赏析 ​ 刘过词能够在辛派阵营中占据重要一席，并不仅仅是因为那些与辛弃疾豪纵恣肆之风相近的作品，还在于那些豪迈中颇显俊致的独特词风，正如刘熙载所说：“刘改之词，狂逸之中自饶俊致，虽沉着不及稼轩，足以自成一家。”（《艺概》）此词就是这么一首具有独特风格的词。 这是一首登临名作。作者借重过武昌南楼之机，感慨时事，抒写昔是今非和怀才不遇的思想感情。安远楼，在武昌黄鹄山上，一名南楼。建于1186年（淳熙十三年）。姜夔曾自度《翠楼吟》词纪之。其小序云“淳熙丙午冬，武昌安远楼成，与刘去非诸友落之，度曲见志”，具载其事。 刘过重访南楼，距上次登览几二十年。当时韩侂胄掌握实权，轻举妄动，意欲伐金以成就自己的“功名”。而当时南宋朝廷军备废驰，国库空虚，将才难觅，一旦挑起战争，就会兵连祸连，生灵涂炭。词人刘过以垂暮之身，逢此乱局，虽风景不殊，却触目有忧国伤时之恸。这种心境深深地反映到他的词中。 词一起用了两个偶句，略点景物，写登楼之所见。 但既无金碧楼台，也没写清嘉的山水。呈现在人们面前的只是一泓寒水，满目荒芦而已。这里的“满”字和“寒”字下得好，把萧疏的外景同低徊的心境交融在一起，勾勒出一幅黯淡的画面，为全词着上了一层“底色”。细味这残芦满目、浅流如带的词境，不止气象萧瑟，而且写出了居高临下的眺望之感来，是统摄全篇的传神之笔。接下去，作者以时空交错的技法把词笔从空间的凭眺折入时间的溯洄，以虚间实，别起波澜。“二十年重过南楼”，一句里包含了多少感慨！二十年前，也就是安远楼落成不久，刘过离家赴试，曾在这里过了一段狂放不羁的生活。所谓“醉槌黄鹤楼，一掷赌百万。”（《湖学别苏召叟》）以及“黄鹤楼前识楚卿，彩云重叠拥娉婷”（《浣溪沙。赠妓徐楚楚》），这就是他当年游踪的剪影。二十年过去了，可是以身许国的刘过却“四举无成，十年不调”，仍然一袭布衣。此时故地重经，而且是在这个危机四伏祸乱不远的时候，怎不令人凄然以悲呢？句中的“过”字点明此行不过是“解鞍少驻初程”的暂歇而已，并为下文伏线。“柳下”三句，一波三折，文随意转，极见工力。“未稳”上承“过”字，说明行色匆匆，钩锁紧密，见出文心之细。“能几日，又中秋”，意谓不消几天，中秋又来到了。一种时序催人的忧心、烈士暮年的悲感和无可奈何的叹喟都从这一个“又”字里泄露出来。三句迭用“犹”、“能”、“又”等虚字呼应提携，真能将词人灵魂的皱折淋漓尽致地揭示无余。 过片以后纯乎写情，都从“重过”一义生发。曰“故人”，曰“旧江山”，曰“新愁”，曰“不似”，莫不如此。章法之精严，风格之浑成，堪称《龙洲词》中上上之作。“黄鹤”二句从设问提起，妙处在能从虚际转身。“矶头”上缀一“断”字，便有残山剩水的凄凉意味，不是泛泛之笔。“旧江山浑是新愁”，是深化题旨之重笔。前此种种灰黯的心绪，所为伊何？ 难道仅仅是怀人、病酒、叹老、悲秋么？被宋子虚誉为“天下奇男子，平生以气义撼当世”（《龙洲词跋》）的刘过是不会自溺于此的，刘过此词的忧国伤时之感无疑要高于宋玉《九辨》单纯的寒土悲秋之感。他此刻所感受的巨大的愁苦，就是对韩侂胄引火的冒险政策的担忧，就是对江河日下的南宋政局的悲痛。 旧日的壮丽江山笼罩着战争的阴影，而他对于这场可怕的灾难竟然无能为力，这怎么不教人悲从中来不可断绝呢？“浑是新愁”，四字包括三层含义。本有旧愁，是一层；添了新愁，是第二层。愁到了“浑是”的程度，极言分量之重，是第三层。旧愁为何？就是他《忆鄂渚》诗所云“书生岂无一策奇，叩阍击鼓天不知”之怀才不遇报国无门的苦闷。卒章三句买花载酒，本想苦中求乐，来驱散一下心头的愁绪。可是这家国恨、身世愁又岂是些许花酒所冲淡得了的！先用“欲”字一顿，提出游乐的意愿，接着用“不似”一转，则纵去也无复当年乐趣，表示了否定的态度。“少年”，是一个比较宽泛的概念，相对而言。刘过初到南楼，年方三十，故可称为少年。且可与上片之“二十年重过南楼”相绾合，论其章法，确有草蛇灰线之妙。如此结尾，既沉郁又浑成，令人读之有无穷哀感。 刘过的爱国词篇，多为豪爽奔放，痛快淋漓之作。但这首《唐多令》却写得蕴藉含蓄，耐人咀嚼。与其他爱国词比较，的确别具一格，故而流传甚广。《唐多令》，原为僻调，罕有填者。自刘词出而和者如林，其调乃显。刘辰翁即追和七阕，周密而因其有“重过南楼”之语，为更名曰《南楼令》。可见此词影响之大","link":"/Essay/Poems/%E3%80%8A%E5%94%90%E5%A4%9A%E4%BB%A4%C2%B7%E8%8A%A6%E5%8F%B6%E6%BB%A1%E6%B1%80%E6%B4%B2%E3%80%8B/"},{"title":"《新台》","text":"p { text-indent: 2em; } .poem { /* font-family: Microsoft JhengHei; */ font-family: 楷体; font-style: bold; font-size: 30px; background-color:rgba(210, 180, 140, 0.1); border: 3px solid rgba(0, 0, 0, 0.1); /* 更改边框颜色和透明度 */ padding: 20px; margin: 10px; border-radius: 10px; /* box-shadow: 10px 10px 20px rgba(0, 0, 0, 0.1); */ } .admiration { font-family: Microsoft JhengHei; font-style: bold; } 新台有泚 河水弥弥 燕婉之求 蘧篨不鲜 新台有洒 河水浼浼 燕婉之求 蘧篨不殄 鱼网之设 鸿则离之 燕婉之求 得此戚施 注释 新台：台名，卫宣公为纳宣姜所筑，故址在今山东省甄城县黄河北岸。台：台基，宫基，新建的房子。 有：语助词，做形容词词头，无实义。 有泚（cǐ）：鲜明的样子。 河：指黄河。弥（mí）弥：水盛大的样子。 燕婉：指夫妇和好。燕，安；婉，顺。 籧（qú）篨（chú）：不能俯者。古代钟鼓架下兽形的柎，其兽似豕，蹲其后足，以前足据持其身，仰首不能俯视。喻身有残疾不能俯视之人，此处讥讽卫宣公年老体衰腰脊僵硬状。一说指癞蛤蟆一类的东西。鲜（xiǎn）：少，指年少。一说善。 洒（cuǐ）：高峻的样子。 浼（měi）浼：水盛大的样子。 殄（tiǎn）：通“腆”，丰厚，美好。 设：设置。 鸿：蛤蟆，一说大雁。离：离开。一说离通“丽”，附着，遭遇。一说离通“罹”，遭受，遭遇，这里指落网。 戚施（shī）：蟾蜍，蛤蟆，其四足据地，无须，不能仰视，喻貌丑驼背之人 译文新台明丽又辉煌，河水洋洋东流淌。本想嫁个如意郎，却是丑得蛤蟆样。 新台高大又壮丽，河水漫漫东流去。本想嫁个如意郎，却是丑得不成样。 设好鱼网把鱼捕，没想蛤蟆网中游。本想嫁个如意郎，得到却是如此丑。 鉴赏此诗若按旧说理解，一、二章赋陈其事，第三章起兴以比。诗开篇即夸耀卫宣公建造的新台是多么宏伟华丽，其下奔流的淇河之水是多么丰盈浩瀚。这都是极力渲染卫宣公的赫赫威势和装点门面，也可以看作是姜氏（宣姜）眼中所见，已被宣公的表面现象迷惑了。她本为是嫁过来追求燕婉之好，想过一种郎才女貌、琴瑟和谐的幸福生活的，却不料成了一个糟老头子的掌中玩物。 全诗三章，前两章叠咏。叠咏的两章前二句是兴语，但兴中有赋：卫宣公欲夺未婚之儿媳，先造“新台”，来表示事件的合法性，其实是障眼法。好比唐明皇欲夺其子寿王妃即杨玉环，先让她入道观做女观一样，好像这一来，一切就合理合法了。然而丑行就是丑行，丑行是欲盖弥彰的。诗人大赞“新台有泚”“新台有洒”，正言欲反，其兴味在于，新台是美的，但遮不住老头子干的丑事。这里是运用反形（或反衬）的修辞手法，使美愈美，丑愈丑。 “新台”之事的直接受害者是宣姜：美丽的少女配了个糟老头，而且还是个驼背鸡胸，本来该做她老公公的人。“鱼网之设，鸿则离之。”打鱼打个癞虾蟆，是非常倒楣，非常丧气，又非常无奈的事。按照闻一多《诗经通义》中的说法：“《国风》中凡言鱼者，皆两性间互称其对方之虞语（隐语），无一实拾鱼者。”古今诗歌中以捕鱼、钓鱼喻男女求偶之事的民歌很多。例如汉乐府民歌《江南曲》：“江南可采莲，莲叶何田田，鱼戏莲叶间。鱼戏莲叶东，鱼戏莲叶西，鱼戏莲叶南，鱼戏莲叶北。”《僮人情歌》：“天上无风燕子飞，江河无水现沙磊。鱼在深塘空得见，哄哥空把网来围。”即是显例。此诗中所写的就是女子对婚姻的幻想和现实的相悖，构成异常强烈的对比，产生了异乎寻常的艺术效果。这里强烈地表明：宣姜可真是倒楣透了。诗中“河水弥弥”“河水浼浼”，亦似有暗喻宣姜泪流不止之意，就如《卫风·氓》“淇水汤汤，渐车帷裳”以及辛弃疾《菩萨蛮·书江西造口壁》“郁孤台下清江水，中间多少行人泪”所表现的那样，渲染出一种浓厚的悲剧氛围","link":"/Essay/Poems/%E3%80%8A%E6%96%B0%E5%8F%B0%E3%80%8B/"},{"title":"《过松原晨炊漆公店六首》","text":"p { text-indent: 2em; } .poem { /* font-family: Microsoft JhengHei; */ font-family: 楷体; font-style: bold; font-size: 30px; background-color:rgba(210, 180, 140, 0.1); border: 3px solid rgba(0, 0, 0, 0.1); /* 更改边框颜色和透明度 */ padding: 20px; margin: 10px; border-radius: 10px; /* box-shadow: 10px 10px 20px rgba(0, 0, 0, 0.1); */ } .admiration { font-family: Microsoft JhengHei; font-style: bold; } [宋] 杨万里 侧塞千山缝也无，上天下井万崎岖。 昨朝曾过芙蓉渡，寻到溪源一线初。 山北溪声一路迎，山南溪响送人行。 也知流向金陵去，若过金陵莫寄声。 后山勒水向东驰，却被前山勒向西。 道是水柔无性气，急声声怒慢声悲。 日高谷底始微暄，岚翠依然透骨寒。 说与行人忙底事？金鸡声里促银鞍。 莫言下岭便无难，赚得行人错喜欢。 政入万山围子里，一山放出一山拦。 政是行人肠断时，子规得得向人啼。 若能泪得居人脸，始信春愁总为伊。 注释 松源、漆公店：地名，当今在今皖南山区（在今江西弋阳与余江之间） 侧塞：积满充塞貌（积满充塞的样子） 昨朝：昨天 寄声：托人传话 勒：约束 暄：温暖 岚翠：苍翠色的山雾(三十六峰晴，雪销岚翠生——白居易《早春题少华东岩》) 底事：何事 银鞍：银饰的马鞍。代指骏马 政入：恰好进入 子规：杜鹃鸟的别名。传说为蜀帝杜宇的魂魄所化。常夜鸣，声音凄切，故借以抒悲苦哀怨之情 得得：频频，频仍 居人：家居的人，留居的人(妻子) 伊：第三人称代词，它 创作背景 杨万里一生力主抗战，反对屈膝投降，所以一直不得重用。宋孝宗登基后，便被外放做官。宋光宗绍熙元年（1190）十一月，杨万里以直龙图阁出为江东转运副使，权领淮西、江东军马钱粮，治所在建康（今江苏南京）。绍熙三年（1192）八月，改知赣州，不赴，乞祠。《过松源晨炊漆公店六首》这组诗第六首中“政是行人肠断时，子规得得向人啼”与《午憩马家店》中“生衣兼草靸，年例试春风”正相合，既称“年例”（每年如此），可知非绍熙二年事，当作于绍熙三年春，诗人时年六十六岁。他外出途经松源时，见群山环绕，感慨不已，于是写下《过松源晨炊漆公店六首》这组诗。 作者介绍 杨万里（1127年10月29日－1206年6月15日），字廷秀，号诚斋。吉州吉水（今江西省吉水县黄桥镇湴塘村）人。南宋著名诗人、大臣，与陆游、尤袤、范成大并称为“中兴四大诗人”。因宋光宗曾为其亲书“诚斋”二字，故学者称其为“诚斋先生”。杨万里一生作诗两万多首，传世作品有四千二百首，被誉为一代诗宗。他创造了语言浅近明白、清新自然，富有幽默情趣的“诚斋体”。杨万里的诗歌大多描写自然景物，且以此见长。他也有不少篇章反映民间疾苦、抒发爱国感情的作品。著有《诚斋集》等","link":"/Essay/Poems/%E3%80%8A%E8%BF%87%E6%9D%BE%E5%8E%9F%E6%99%A8%E7%82%8A%E6%BC%86%E5%85%AC%E5%BA%97%E5%85%AD%E9%A6%96%E3%80%8B/"},{"title":"ARM处理器及系统结构","text":"ARM 介绍ARM（Advanced RISC Machines）有 3 种含义： 是一个公司的名称; 是一种技术的名称 是一类微处理器的通称; 基于 ARM 技术 的微处理器应用约占据了 32 位 RISC 微处理器 80% 以上的市场份额，其中，在手机市场，ARM 占有绝对的垄断地位。 处理器 Processor（也称为中央处理单元或 CPU）是计算机的核心组件，它负责执行大部分的计算和逻辑操作。处理器不仅包括处理芯片，还有其他几个关键的部分: 内核（Cores）：现代处理器通常包含多个内核，每个内核都可以独立执行指令。多核处理器可以同时执行多个任务，提高了性能。 缓存（Cache）：缓存是一种快速存储器，用于存储处理器可能需要的数据和指令。通过使用缓存，处理器可以减少从主内存获取数据的时间，提高性能。 控制单元（Control Unit）：控制单元是处理器的一个部分，负责管理和协调处理器的操作。它解释和执行存储在内存中的指令。 算术逻辑单元（Arithmetic Logic Unit, ALU）：ALU 负责执行所有的算术和逻辑操作，包括加法、减法、乘法、除法以及比较操作。 寄存器（Registers）：寄存器是一种非常快速的存储器，用于临时存储和访问正在被处理器处理的数据和指令。 总线（Buses）：总线是连接处理器和其他系统组件（如内存、硬盘、输入/输出设备等）的通道，用于数据传输。 ARM 公司是一家总部位于英国 Cambridge 的设计和许可证公司，专注于处理器核心的设计。ARM 并不直接生产和销售芯片，而是设计和开发处理器架构，然后向各种芯片制造商授权这些设计。这些芯片制造商，如高通（Qualcomm）、三星（Samsung）、苹果（Apple）等，会基于 ARM 的设计，制造出各自的处理器产品。 ARM 的业务模式使得它可以专注于设计和优化处理器架构，而无需投入大量资金来建立和维护自己的制造设施。同时，芯片制造商可以利用 ARM 的设计来生产高效、低功耗的芯片，而无需自行从头开始设计处理器架构。 采用 RISC 架构的 ARM 微处理器一般有如下特点： 体积小、功耗低、低成本、高性能； 支持 Thumb（16 位）/ARM（32 位）双指令集，能很好地兼容 8 位/16 位 器件； 大量使用 寄存器，指令执行速度更快； 大多数数据操作都在寄存器中完成； 寻址方式灵活简单，执行效率高； 指令长度固定。 ARM Processor 系列介绍ARM 处理器指令集的特点 ARM 内核不是一个纯粹的 RISC 体系结构，ARM 指令集与纯粹的 RISC 的定义有以下几个不同。 一些特定指令的周期数可变，并不是每条 ARM 指令都是单周期的。 内嵌的桶形移位器(可以单个时钟周期内对二进制数进行多位的移位操作)产生了更为复杂的指令，扩展了指令的功能，因此改善了内核的性能。 支持 16 位的 Thumb 指令集，提高了代码密度。 支持条件执行：每条指令都可以设置一个执行条件，只有条件满足时才执行。 增强指令：一些功能强大的数字信号处理指令被加入到 ARM 指令集中。 ARM 指令集体系结构的演变（了解） ARM 公司定义了不同版本的 ARM 指令集体系结构版本，用 vn 来标识（n 是版本号，目前是 1-8）。ARM v1 ～ v3 版本的处理器未得到大量应用，ARM 处理器的大量广泛应用是从其 v4 版本开始的。v7 系列 CPU 被称作 CoreTex 系列到目前 v8 是最新的版本， 可以选择 64 或 32 执行状态。64 执行状态针对 64 位处理技术，引入了一个全新指令集 A64，可以存取大虚拟地址空间。 ARMv4ARMv4 是目前支持的最老的架构,是基于 32-bit 地址空间的 32-bit 指令集。ARMv4 除了支持 ARMv3 的指令外还扩展了：支持 halfword 的存取支持 byte 和 halfword 的符号扩展读进一步的明确了会引起 Undefined 异常的指令对以前的 26bits 体系结构的 CPU 不再兼容 ARMv4TARMv4T 增加了 16-bit Thumb 指令集，这样使得编译器能产生紧凑代码(相对于 32-bit 代码，内存能节省到 35%以上)并保持 32-bit 系统的好处。Thumb 在处理器中仍然要扩展为标准的 32 位 ARM 指令来运行。用户采用 16 位 Thumb 指令集最大的好处就是可以获得更高的代码密度和降低功耗。 ARMv82011 年 11 月，ARM 公司发布了新一代处理器架构 ARM V8，ARM 的首个 64 位架构;ARM 2012 年十月发布了 Cortex-A53 and Cortex-A57 核心。2013 年苹果基于 V8 架构的 Apple 7 使用在了 iPhone 5S 上。 CortexARM 推出的 Cortex 系列包括：Cortex-A、Cortex-R 和 Cortex-M 三个系列。 Cortex-A(Application)系列主要应用于复杂的应用中，支持：ARM、Thumb 和 Thumb2 指令集。 Cortex-R(Real-time)系列是为实时操作系统设计的嵌入式处理器，能带来更小的芯片面积和低功耗。 Cortex-M(Microcontroller)系列处理器结合了多种突破性技术，集成了许多紧耦合系统外设，以便能满足下一代产品的控制要求，适用于高性能、低成本需求的嵌入式应用。 Cortex-M 主要针对单片机领域。 ARM9 的 5 级流水线(流水线的级数，代表的是指令周期被划分成的阶段数量)5 级流水线 是 ARM9TDMI 的主要特征之一，其设计减少了在每个时钟内必须完成的最大工作量，进而允许使用较高的时钟频率。 取指：指令从存储器中取出，放入指令流水线 译码：指令译码，从寄存器堆中读取寄存器操作数 执行：把一个操作数移位，产生 ALU 的结果。如果指令是 Load 或 Store，在 ALU 中计算存储器的地址 缓存/数据：如果需要，则访问数据存储器；否则，ALU 的结果只是简单地缓冲一个时钟周期，以便使所有指令具有同样的流水线流程 回写：将指令产生的结果写回到寄存器堆，包括任何从寄存器读出的数据 12345678910111213ARM 处理器命名规则：ARM{x}{y}{z}{T}{D}{M}{I}{E}{J}{F}{-S}x -- 处理器系列y -- 存储管理/保护单元z -- cacheT -- 支持 Thumb 指令集D -- 支持片上调试M -- 支持快速乘法器I -- 支持 Embedded ICE，支持嵌入式跟踪调试E -- 支持增强型 DSP(Digital Signal Processor) 指令J -- 支持 JazelleF -- 具备向量浮点单元 VFP-S -- 可综合版本 ARM Processor 工作状态ARM 状态和 Thumb 状态 Thumb 指令集嵌入式系统在某些应用场合对存储成本或空间要求比较苛刻，为了让用户更好地控制代码量，于是设计了 2 套指令系统，分别为 ARM 指令集和 Thumb 指令集。其中 ARM 指令集为 32 位（字）长度，具有最完整的功能；Thumb 指令集为 16 位（半字）长度，能实现 ARM 指令集的大部分功能在功能上可以认为 Thumb 是 ARM 指令集的子集 既然 ARM 处理器共存 2 种指令集，那么到底何时执行 ARM 指令集，何时执行 Thumb 指令集呢?ARM 处理器有 2 个处理器状态与这 2 套指令集分别对应;ARM 处理器的两种状态可以通过相应的指令进行切换; ARM9TDMI 核是具有 T 变种的 ARM 处理器核，其工作状态一般有以下两种，并可在两种状态之间切换。 ARM 状态:执行 32 位的字对齐的 ARM 指令。是系统上电默认的状态。 Thumb 状态:执行 16 位的、半字对齐的 Thumb 指令。 Note ARM 指令集与 Thumb 指令集不能同时混合使用 ARM 和 Thumb 状态间的切换并不影响处理器模式或寄存器内容。 从一个 ARM 例程调用另一个 Thumb 例程时，内核必须切换状态，反之亦然 指令长度和数据格式ARM 微处理器的指令长度可以是 32 位（在 ARM 状态下），也可以为 16 位（在 Thumb 状态下）。ARM 微处理器中支持字节Byte（8 位）、半字 Half-Word（16 位）、字 Word（32 位）三种数据类型。 如果一个数据是以字方式存储的，那么它就是字对齐的； 如果一个数据是以半字方式存储的，那么它就是半字对齐的。 0x4002 和 0x4004 相差 2 个 Byte,即 16bit,所以为半字对齐 Half-Word Aligned ARM Processor 运行模式ARM 体系结构支持7 种运行模式： 用户模式（USR）正常程序执行模式，大部分任务执行在这种模式下。用户模式是用户程序的工作模式。该没有权限去操作其它硬件资源，也不能切换到其它模式下。 系统模式（SYS）系统模式是特权模式，不受用户模式的限制。用户模式和系统模式共用一套寄存器，但比用户模式有更高的权限，可以访问所有系统资源及进行模式切换。 一般中断模式（IRQ）一般中断模式也叫通用中断模式，用于处理一般的中断请求，通常在硬件产生中断信号之后自动进入该模式，该模式为特权模式，可以自由访问系统硬件资源。 快速中断模式（FIQ）快速中断模式是相对一般中断模式而言的，它是用来处理对时间要求比较紧急的中断请求，主要用于高速数据传输及通道处理中，其中断优先级相对普通中断更高 管理模式（Supervisor，SVC） 管理模式是 CPU 上电后默认模式，因此在该模式下主要用来做系统的初始化，软中断处理也在该模式下。系统复位或开机、软中断时进入到 SVC 模式下。 中止模式（ABT）中止模式用于支持虚拟内存或存储器保护，当用户程序访问非法地址，没有权限读取的内存地址时，会进入该模式。 未定义模式（UND）CPU 在指令的译码阶段不能识别该指令操作时，会进入未定义模式，进行未定义陷阱处理。 特权模式: 除用户模式外的其它 6 种处理器模式称为特权模式（Privileged Modes）。在特权模式下，程序可以访问所有的系统资源，也可以任意的进行处理器模式切换。只有在特权模式下才允许对当前程序状态寄存器（CPSR）的所有控制位直接进行读/写访问，而在非特权模式下只允许对 CPSR 的控制位进行间接访问（SWI 方式）。特权模式中除系统模式之外的其他 5 种模式又统称为异常模式。它们除了可以通过在特权下的程序切换进入外，也可以由特定的异常进入。其中管理模式也称为超级用户模式，是为操作系统提供软中断的特有模式。大多数的用户程序运行在用户模式下。当处理器工作在用户模式时，需要进行处理器模式切换时，应用程序可以产生异常处理，在异常处理过程中进行处理器模式切换。这种体系结构可以使操作系统控制整个系统资源的使用。 ARM RegisterARM 处理器有如下 37 个用户可见寄存器。31 个通用寄存器： R0~R15 R13_svc,R14_svc, R13_abt,R14_abt, R13_und、R14_und、 R13_irq、 R14_irq R8_fiq~R14_fiq。 6 个状态寄存器： 1 个 CPSR 5 个 SPSR（ SPSR_svr、 SPSR_abt 、 SPSR_und 、 SPSR_irq 、 SPSR_frq ）； ARM 处理器共有 7 种运行模式，在每一种处理器模式中都有一组相应的寄存器。 在 ARM 状态下，任一时刻都可以访问到 16 个 通用寄存器和 1~2 个状态寄存器。各种模式下能访问的寄存器如下图所示 堆栈指针 SP R13寄存器 R13 通常用作堆栈指针，称作 SP。每种异常模式都有自己的分组 R13。通常 R13 应当被初始化成指向给异常模式所分配的堆栈。其中用户模式和系统模式共用一个，每种异常模式都有专用的 R13 寄存器。它们通常指向各模式所对应的专用堆栈，也就是说 ARM 处理器允许用户程序有 6 个不同的堆栈空间。 链接寄存器 LR R14寄存器 R14(链接寄存器或 LR)在体系结构中有两种特殊用途：用途 1在各种模式下，R14 用来保存子程序的返回地址。当一条 BL 或者 BLX 指令执行子程序调用时，R14 设为子程序的返回地址。返回时，通过复制 R14 中的地址值到 PC 中来实现子程序的返回。通常有以下2 种方式Method1:执行下列指令之一 MOV PC, LR 把 LR 中的值写入到 PC 寄存器中 BX LR跳转(带状态切换)到 LR 地址所指向的指令执行。用于从实现从一个状态返回另外一个状态并继续执行。Method2在子程序入口，执行 R14 的入栈操作STMFP SP!, {&lt;registers&gt;, LR} 该条指令用于把，和 LR（R14）等多个寄存器压入堆栈，SP（R13）指向堆栈顶部。并使用匹配的指令返回LDMFP SP!, {&lt;registers&gt;, PC}该条指令用于把堆栈顶部多个单元，执行出栈操作，出栈的数据保存到和 PC 等多个寄存器中。注：执行该操作后，原 R14 入栈的值，出栈后就保存到 PC 中了，相当于执行了把 R14 的值写入到 PC 的操作。用途 2当发生异常时，相关异常模式下的 R14 就设为异常返回地址。异常的返回地址与子程序的返回类似。区别在于有些异常有一个小常量的偏移 程序计数器 PC R15无论处理器处于何种状态，程序计数器 R15（即 PC）总是指向“正在取指”的指令，而不是指向“正在执行”的指令或正在“译码”的指令。一般来说，人们习惯性约定将“正在执行的指令作为参考点”，称之为当前第 1 条指令。因此，PC 总是指向第 3 条指令，或者说 PC 总是指向当前正在执行的指令地址再加 2 条指令的地址。 MOV 执行时,LDR 在取值,相差 2 条指令的地址,如果为 ARM 指令,设三条指令地址分别为 0x4000,0x4004,0x4008,PC 值等于当前指令的地址+8Bytes,0x4000 + 8 = 0x4008当处理器处于 Thumb 状态时，每条指令长为 2 字节，所以 PC 的值为正在执行的指令地址加 4 字节，即：PC值=当前程序执行位置+4字节 程序状态寄存器 PSR当前程序状态寄存器（CPSR,Curren Program Status Register）可以在任何处理器模式下被访问，它包含下列内容： ALU 状态标志（条件码标志位）； 当前的处理器模式； 中断使能标志； 设置处理器的状态。 每一种异常器模式下，都有一个专用的物理寄存器做备份程序状态寄存器（SPSR,Saved Program Status Register ）。当特定的异常中断发生时，这个物理寄存器负责存放当前程序状态寄存器的内容。当异常处理程序返回时，再将其内容恢复到当前程序状态寄存器。 这些条件标志位会根据程序中的算数指令或逻辑指令的执行结果进行改变，而且这些条件标志位可由大多数指令检测以决定指令是否执行。 N 本位设置成当前指令执行结果的第 31 位。当两个由补码表示的有符号整数运算时，N=1 表示结果为负数；否则结果为正数或零。 Z Z=1 表示运算的结果为零，否则结果不为零。 C 分 4 种情况设置 C 的方法： 在加法指令中（包括比较指令 CMN），当结果产生了进位，则 C=1，表示无符号数运算发生上溢出，其它情况下 C=0; 在减法指令中（包括比较指令 CMP），当运算中发生了借位，则 C=0，其它情况下 C=1; 对于在操作数中包含移位操作的运算指令（非加/减指令），C 被设置成被移位寄存器最后移出去的位; 对于其它非加/减法运算指令，C 的值通常不受影响。 V 下面分两种情况讨论 V 的设置方法： 对于加/减运算指令，当操作数和运算结果都是以二进制的补码表示的带符号的数时，且运算结果超出了有符号运算的范围时溢出。V=1 表示符号位溢出； 对于非加/减法指令，通常不改变标志位 V 的值。 Q（了解）在带 DSP 指令扩展的 ARMV5 及更高版本中，Q 标志位被指定用于指示增强 DSP 指令是否发生了溢出。在 ARMV5 以前的版本及 ARMV5 的非 E 系列处理器中，Q 标志位没有被定义，属于待扩展的位。 控制位:CPSR 的低 8 位属于控制位。 I,F中断禁止位（第 7、6 位） I=1：IRQ 被禁止；F=1：FIQ 被禁止。 T状态控制位（第 5 位）T 是处理器的状态控制位。T=0：处理器处于 ARM 状态；T=1：处理器处于 Thumb 状态。注意：绝对不要强制改变 CPSR 寄存器中的控制位 T。如果这样做，处理器会进入一个无法预知的状态。 MMMMM模式控制位 注意通过程序修改 CPSR 可以进入异常(除 SYS 以外的特权模式)。除此之外，也可以在内核对异常或者中断响应时由硬件切换到异常模式。 1234567&lt;!-- 例：从系统模式切换到管理模式 --&gt;&lt;!-- MSR CPSR_c, #D3 是一条ARM汇编语言指令，用于修改当前程序状态寄存器（Current Program Status Register，CPSR）的特定字段。这条指令的具体含义如下：MSR：这是一个Move to Status Register的指令，用于将一个值移动到一个状态寄存器中。CPSR_c：这表示目标是CPSR的控制字段（control field）#D3：这是一个立即数，表示要将CPSR的控制字段设置为十六进制的D3。在二进制中，D3等于1101 0011。 --&gt;MSR CPSR_c,#D3; 用户模式与系统模式不能由异常进入，也就是说要想进入系统模式，必须通过修改 CPSR 才能实现。MSR CPSR_c,#DF; ARM StorageARM 存储方法ARM 处理器外部采用冯·诺依曼（von Neumann）结构，指令和数据共用一条 32 位数据总线，只有装载、存储和交换指令可访问存储器中的数据。ARM 处理器将存储器看作是一个从 0 开始的线性递增的字节集合，其中每个数组元素（字节）都是可以寻址的。ARM 支持大端模式（big-endian）和小端模式（little-endian）两种内存模式。在大端模式下，一个字的高地址单元放的是数据的低位；而在小端模式下，数据的低位放在内存中低地址单元中。一个基于 ARM 的实际芯片可能只支持小端存储器格式，也可能只支持大端存储器格式，还可能两者都支持。ARM 指令集不包含任何直接选择大小端存储器格式的指令，但是一个同时支持大小端存储器格式基于 ARM 的芯片可以通过硬件配置（一般使用芯片的引脚来配置）来匹配存储器系统所使用的规则。如果芯片有一个标准系统控制的协处理器（例如 ARM920T 的 CP15 协处理器），系统控制协处理器寄存器 1 的 bit7 可用于改变配置。注意：对于 S3C2440是通过软件来指定存储器格式的（通过设置 CP15 协处理器协处理器寄存器 1 的 bit7 来实现），缺省为小端格式。 ARM 体系的存储空间ARM9 使用 $2^{32}$ 个 8 位字节地址空间，字节地址的排列从 $0～2^{32}-1$地址空间也可以看作是包含$2^{30}$个 32 位字，地址以字为单位进行分配。也就是将地址除以 4，地址为 A 的字包含 4 个字节，地址分别为 A、A+1、A+2和A+3。与此同时，地址空间还可被看作包含$2^{31}$个 16 位半字，地址按照半字进行分配。地址为 A 的半字包含 2 个字节，地址分别为 A和A+1。 ARM 存储器结构ARM 处理器有的带有指令 cache 和数据 cache，但不带有片内 RAM 和片内 ROM。系统所需的 RAM 和 ROM（包括 Flash）都通过总线外接。有的 ARM 片内还带有存储器管理单元 MMU（Memory Management Unit） 存储器映射 I/O基于 ARM 内核的芯片具有许多的外设，这些外设访问的标准方法是使用存储器映射的 I/O（存储器统一编址），为外设的每个寄存器都分配一个地址。通常，从这些地址装载数据用于读入，向这些地址保存数据用于输出。有些地址的装载和保存用于外设的控制功能，而不是输入或输出功能。注意：存储器映射的 I/O 位置的操作不同于正常的存储器位置的操作。通常，把存储器映射的 I/O 位置标记为无高速缓存和无缓冲区，以避免处理器把这部分地址当普通内存，调入到 cache 中，进行缓存操作。 Flash 组织形式目前几乎所有 MCU 的程序都存储在 Flash 中。Flash 分为片内和片外两种。片外 Flash 又有以下种类。NOR Flash:NOR Flash 读取速度快，但是擦除和写入速度慢。NAND Flash:NAND Flash 读取速度比 NOR Flash 慢，但擦除和写入速度很快 RAM 的组织形式芯片自带的 RAM 不够用时需要外加，外加的 RAM 一般是 SDRAM 和 DDR RAM，极少数使用 SRAM，因为 SRAM 的价格相对较贵，但 SRAM 速度要比动态 RAM 快。SRAM:只需要在 IDE 中设置好地址。SDRAM/DDR RAM:不仅要在 IDE 中设置好起始地址，还要在程序中做初始化操作后才能使用。如果使用仿真器，那么在仿真运行程序前，要执行一个初始化脚本文件，或者执行一系列命令对 SDRAM 和 DDR RAM 进行初始化，否则会运行出错。","link":"/UESTC/ARM-Processor/Ch2-1ARM%E5%A4%84%E7%90%86%E5%99%A8%E5%8F%8A%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"},{"title":"ARM中断及异常","text":"中断和异常基本概念中断是主机与外设进行数据通信的重要机制，它负责处理处理器外部的事件;异常实质上也是一种中断，只不过它主要负责处理处理器内部事件。计算机通常是用中断来处理外中断和内部异常，因此在 ARM 技术中，将二者统称为异常。中断当处理器遇有外部设备发生 “紧急事件” 需要它来处理时，它就必须停下 “手头上的工作” 先去处理这个 “紧急事件”。处理器的这种工作过程，或者这种工作状态就叫做中断。中断请求当外部设备有紧急事件需要处理器进行处理时，外部设备必须向处理器发送一个 电信号（脉冲或电平） 来表示有事件需要处理器来处理。这个信号叫做 中断请求信号 ，或称 中断请求。中断源发出中断请求信号的外部设备或事件就叫做中断源。异常由内部事件引起的中断叫做异常。 中断向量和中断向量表为了与普通子程序的首地址进行区分，中断服务程序的首地址（入口地址）通常被叫做中断向量，或中断矢量。以后还会看到，凡是能直接或间接指向中断服务程序的都叫中断向量。在处理器收到中断请求之后，它们都需要获得中断服务程序首地址——中断向量。所有的中断向量都按一定规律存放在一个固定的存储区域，这个集中存放了中断向量或与中断向量相关信息的存储区域就叫做中断向量表。 中断请求信号的屏蔽可屏蔽中断 人们把带有开关，能阻止中断请求的中断输入端叫做可屏蔽中断信号输入端。这类中断叫可屏蔽中断。非屏蔽中断 人们把不带开关，不能阻止中断请求的中断输入端叫做非屏蔽中断信号输入端。这类中断叫非屏蔽中断。 为了对处理器可以接收中断源的数目进行扩充及对中断进行必要的管理，在中断源和处理器之间还配有如下图所示的中断控制器 中断优先级及中断嵌套处理器通常只有一个可屏蔽中断请求输入端。对于具有 多个中断源的系统来说，当有两个或两个以上中断源同时发生中断请求时就会出现所谓的竞争。竞争可以通过优先级的方法来处理，具体实现方法有两种：硬件实现方法和软件实现方法。 ARM 异常响应处理器响应中断的条件 处理器程序状态寄存器的中断屏蔽标志处于非屏蔽状态 没有更高级的中断请求正在响应或正在发出、正挂起； 处理器在现行指令执行结束后 中断的处理过程 当有中断请求发生且满足上述条件时，计算机系统就会响应中断请求，并自动将被中断程序的下一条指令地址（断点地址）保存和关闭中断；接下来便将自中断向量表查询得到的与该中断源对应的中断向量送入 PC，并转去执行中断服务程序。 当执行到中断服务程序末尾时，执行中断返回指令或跳转指令，把保存的断点地址送回 PC，以在断点处接续执行被中断的程序。 ARM 的中断(异常)向量表 ARM 的中断向量表内存放的是响应异常和中断的转移指令而不是中断向量地址。在 ARM 处理器中，当异常发生时，完成当前指令后跳转到相应的异常中断处理程序入口执行异常中断处理。异常处理完毕后返回原来的程序断点继续执行原来的程序。 进入异常 在异常发生后，ARM 内核会作以下工作： 在适当的 LR 中保存断点的地址 把当前程序状态寄存器（CPSR）中的内容保存到模式私有寄存器 SPSR 中 将寄存器 CPSR 中的 MODE 域设置为中断（异常）应进入的运行模式； 对 CPSR 的 I 位和 F 位进行相应的设置，以防止再次响应同一个中断请求。 强制 PC 从相关的异常向量处取指，即到中断向量表中获取中断向量，转向用户所编写的中断（异常）服务程序。注：异常总是在 ARM 状态中进行处理。当处理器处于 Thumb 状态时发生了异常，在异常向量地址装入 PC 时，会自动切换到 ARM 状态 异常返回 当异常结束时，异常处理程序必须做如下处理： 将 SPSR 的值复制回 CPSR 将 LR 中的值减去偏移量后存入 PC，偏移量根据异常的类型而有所不同。 ARM 的中断(异常)ARM 按事件的紧急程度为每个中断（异常）都定义了一个固定的优先级别。当多个异常同时发生时，一个固定的优先级系统决定它们被处理的顺序： 快速中断请求异常 FIQ有些嵌入式系统的应用对实时性要求比较高，需要足够快的中断响应速度，比如数据转移或通道处理。ARM 在设计上充分地考虑了嵌入式系统的这一特点，在 IRQ 异常之外还设计了一种快速中断请求（FIQ）异常，并在硬件结构和资源分配上给予了足够的支持。为减少延时，ARM 在快中断中采取了 两个措施：专门为快中断配置了较多的私有寄存器，从而可使中断服务程序有足够的寄存器来使用，而不必与被中断服务程序使用同一组寄存器，这样就免去了因寄存器冲突而必需的保护及恢复现场工作。ARM 把 FIQ 的中断向量放在了中断（异常）向量表末尾 0X0000001C 处，因此它后面没有其它中断向量，允许用户将中断服务程序直接放在这里。 Others自行查阅资料","link":"/UESTC/ARM-Processor/Ch2-2ARM%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%AD%E6%96%AD/"},{"title":"ARM指令集概述","text":"ARM 指令集简介ARM 微处理器的 ARM 指令集 ，所有的指令长度都是 32 位 ，并且大多数指令都在一个单独指令周期内执行。主要特点包括： 指令是条件执行的; ARM 微处理器的指令集是加载/存储型的; 在多寄存器操作指令中一次最多可以完成 16 个寄存器的数据传送。 ARM Instruction Format助记符表示用助记符表示的 ARM 指令格式如下：&lt;opcode&gt; {&lt;cond&gt;} {S} {&lt;Rd&gt;} { ，&lt;Rn&gt;} {，&lt;OP2&gt;}格式中 &lt; &gt;的内容必不可少，{ }中的内容可省略。 &lt;opcode&gt;表示操作码，如 ADD 表示算术加法。{&lt;cond&gt;}表示指令执行的条件域，如 EQ、NE 等。{S}决定指令的执行结果是否影响 CPSR 的值，使用该后缀则指令执行的结将果影响 CPSR 的值，否则不影响。&lt;Rd&gt;表示目标或源寄存器。&lt;Rn&gt;表示第一个操作数，为寄存器。&lt;op2&gt;表示第二个操作数，可以是立即数、寄存器和寄存器移位操作数。除了 &lt;opcode&gt;其余域都可以选择使用 例如： 指令 ADDEQS R0,R1,#8; 操作码为 ADD， 条件域 cond 为 EQ， S 表示该指令的执行影响 CPSR 寄存器的值， 目的寄存器 Rd 为 R0， 第一个操作数寄存器 Rn 为 R1， 第二个操作数 OP2 为立即数＃8。执行结果：R0 = R1+ 8 机器码表示ARM 指令代码一般可以分为 5 个域：第 1 个域是 4 位[31:28]的条件码域，4 位条件码共有 16 种组合;第 2 个域是指令代码域[27:20],除了指令编码外，还包含几个很重要的指令特征和可选后缀的编码;第 3 个域是第 1 个操作数寄存器 Rn，是 4 位[19:16],为 R0 ～ R15 共 16 个寄存器编码;第 4 个域是目标或源寄存器 Rd，是 4 位[15:12],为 R0 ～ R15 共 16 个寄存器编码;第 5 个域是第二个操作数[11:0]。 可选后缀 S 后缀 指令中使用 S 后缀时，指令执行后程序状态寄存器的条件标志位将被刷新，不使用 S 后缀时，指令执行后程序状态寄存器 CPSR 的条件标志将不会发生变化。 假设 R0=0x1,R3=0x3,指令执行之前 CPSR 部分标志位为 nZcv,分别执行如下指令 CPSR 的值有何变化？SUB R1,R0,R3; R0的值减去R3的值，结果存入R1 &gt; SUBS R1,R0,R3; R0的值减去R3的值，结果存入R1影响标志位。分析：执行第 1 条指令对于标志寄存器的值没有任何影响，因此 CPSR 的值不变。执行第 2 条指令后 CPSR=Nzcv。 !后缀 如果指令地址表达式中不含！后缀，则基址寄存器中的地址值不会发生变化。指令中的地址表达式中含有!后缀时，指令执行后，基址寄存器中的地址值将发生变化，变化的结果如下：基址寄存器中的值（指令执行后）＝指令执行前的值＋地址偏移量使用!后缀需要注意如下事项： - ！后缀必须紧跟在地址表达式后面，而地址表达式要有明确的地址偏移量; - ! 后缀不能用于 R15(PC)的后面; - 当用在单个地址寄存器后面时，必须确信这个寄存器有隐性的偏移量，例如“STMIA R7!, {R0 – R3}”此时地址基址寄存器 R7 的隐性偏移量是 16 字节。如果 R7 的初始值为 0X40000000，则该语句结束后为 0X40000010 例 分别执行下面两条指令有何区别？LDR R3,[R0,#4] &gt; LDR R3,[R0,#4]！分析：在上述指令中，第 1 条指令没有后缀！，指令的结果是把 R0 加 4 作为地址指针，把这个指针所指向的地址单元所存储的数据读入 R3，R0 的值不变。第 2 条指令除了实现以上操作外，还把 R0 ＋ 4 的结果送到 R0 中。 B 后缀B 后缀的含义是：指令所涉及的数据是一个字节，不是一个字或半字。LDR R4，[R0]R4=[R0]，指令传送一个字LDRB R4，[R0]R4=[R0]，指令传送一个字节LDREQB R4，[R0]如果相等则执行，R4=[R0]，指令传送一个字节 ARM 指令的条件码 条件码 条件码助记符 CPSR 中条件标志位值 含义 0000 EQ Z=1 相等 0001 NE Z=0 不相等 0010 CS/HS C=1 无符号数大于或等于 0011 CC/LO C=0 无符号数小于 0100 MI N=1 负数 0101 PL N=0 正数或零 0110 VS V=1 溢出 0111 VC V=0 未溢出 1000 HI C=1 且 Z=0 无符号数大于 1001 LS C=0 或 Z=1 无符号数小于或等于 1010 GE N=V 带符号数大于或等于 1011 LT N!=V 带符号数小于 1100 GT Z=0 且 N=V 带符号数大于 1101 LE Z=1 或 N!=V 带符号数小于或等于 1110 AL 无条件执行 1111 NV ARMV3 之前 从不执行不要使用 ARM 指令分类ARM 指令可以分为：分支指令、数据处理指令、存储访问指令、协处理器指令和杂项指令五类。1. 分支指令分支指令用于控制程序的执行流程、实现 ARM 代码与 Thumb 代码之间进行切换。2. 数据处理指令数据处理指令在通用寄存器上执行计算，主要分为 3 种：算术/逻辑指令、比较指令和乘法指令。3. 存储访问指令用于加载/存储存放于 MCU 片外存储系统中的数据。加载指令用于从内存中读取数据放入寄存器中，存储指令用于将寄存器中的数据保存到内存中。4. ARM 协处理器指令ARM 协处理器指令用于控制外部的协处理器。包括 数据处理指令：启动一个协处理器专用的内部操作。 数据转移指令：使数据在协处理器和存储器之间进行转移。 寄存器转移指令：协处理器值转移到 ARM 寄存器或 ARM 寄存器的值转移到协处理器。 5. 杂项指令包括状态寄存器转移指令和异常中断产生指令。状态寄存器转移指令将 CPSR 或 SPSR 的内容转移到一个通用寄存器，或者反过来将通用寄存器的内容写入 CPSR 或 SPSR 寄存器ARM 有 两条 异常中断产生指令，分别为 软中断指令 SWI 和 断点中断指令 BKPT。 ARM 指令的寻址方式立即数寻址 Immediate Addressing立即数寻址也叫立即寻址，操作数本身就在指令中给出，取出指令也就取到了操作数。这个操作数被称为立即数，对应的寻址方式也就叫做立即数寻址。 立即数要求以“＃”为前缀，对于以十六进制表示的立即数，还要求在“＃”后加上“0x”或“&amp;”;对于以二进制表示的立即数，要求在“#”后加上“0b”;对于以十进制表示的立即数，要求在“#”后加上“0d”或缺省。 在指令格式中，第二个操作数有 12 位： 因此有效立即数 immediate 可以表示成： &lt;immediate&gt; = immed_8 循环右移（2×rot）[8,11]这4 bit移位因子 (十进制表示范围 0-15)乘 2(内存对齐,ARM 内存地址为 4 的倍数)，得到一个范围在 0-30，步长为 2 的移位值。因此，将 ARM 中的立即数称为 8 位位图。“最后 8 位移动偶数位”得到立即数 如何判断一个数是合法立即数还是非法立即数判断一个数是否符合 8 位位图的原则, 首先看这个数的二进制表示中1 的个数是否不超过 8 个. 如果不超过 8 个, 再看这 n 个 1(n&lt;=8)是否能同时放到 8 个二进制位中, 如果可以放进去, 再看这八个二进制位是否可以循环右移偶数位得到我们欲使用的数. 如果可以, 则此数符合 8 位位图原理, 是合法的立即数. 否则, 不符合. 寄存器寻址 Register Addressing寄存器寻址就是利用寄存器中的数值作为操作数，这种寻址方式是各类微处理器经常采用的一种方式，也是一种执行效率较高的寻址方式。 寄存器移位寻址 Register Shift Addressing当第二操作数为寄存器型时，在执行寄存器寻址操作时，也可以对第二操作数寄存器进行移位，此时第二操作数形式为：ADD Rd, Rn, Rm，{&lt;shift&gt;} Rm: 第二操作数寄存器&lt;shift&gt;:用来指定移位类型和移位位数，有两种形式:5 位立即数,寄存器(用 Rs 表示)在指令执行时，将寄存器移位后的内容，作为第二操作数参与运算。例如指令： 1234R3←R2+(R1右移2位):ADD R3，R2，R1，LSR #2;R3←R2+(R1右移R0位)ADD R3，R2，R1，LSR R0; 第二操作数的移位方式: 移位位数可以用立即数方式或者寄存器方式给出，其值均小于 32，应为[0,31] LSL,LSR 逻辑左/右移: 空出的最低/高有效位用 0 填充 ASL,ASR 算术左/右移: 算术移位的对象为带符号数;故 ASL 空出的最低有效位用 0 填充,而 ASR 移位时,如果为负数,最高有效位用 1 填充;若为正数,则用 0 填充 ROR Rotate Right;循环右移 移出的字的最低有效位依次填入空出的最高有效位。 RRX Rotate Right Extended 带扩展的循环右移;将寄存器的内容循环右移 1 位，空位用原来 C 标志位填充 寄存器间接寻址 Register Indirect Addressing寄存器间接寻址就是以寄存器中的值作为操作数的地址，而操作数本身存放在存储器中。LDR R0，[R4];AR0←[R4] 基址变址寻址 Base-index Addressing变址寻址,也叫基址变址寻址,是指将基址寄存器的内容与指令中给出的地址偏移量相加，得到操作数所在的存储器的有效地址变址寻址方式常用于访问某基地址附近的地址单元(4K 范围的偏移)LDR R0，[R1，＃4]; R0←mem32[R1＋4] 偏移地址方式 有三种加偏址的方式：前变址、自动变址和后变址寻址方式 前变址模式(不修改基址寄存器):先基址+偏址，生成操作数地址，再做指令指定的操作。也叫前索引偏移。例如 STR r0,[r1,#12](将 r0 的内容存入 r1+12 的地址单元中)自动变址模式(修改基址寄存器)： 先基址+偏移，生成操作数地址，做指令指定的操作。然后自动修改基址寄存器。例如 LDR R0，[R1，＃4]!;(从 R1 指向的地址加上 4 的位置加载数据到 R0，并将计算得出的地址写回到 R1 中”。)后变址模式(修改基址寄存器)： 基址寄存器不加偏移作为操作数地址。完成指令操作后，用(基址+偏移)的值修改基址寄存器。例如 STR r0,[r1],#12将 r0 中的值存储到 r1 指向的地址，然后将 r1 的值加上 12 并把结果写回 r1”。 偏移地址形式:可以是一个立即数，也可以是另一个寄存器，并且还可以是寄存器移位操作;常用的是立即数偏移的形式 1234LDR R2，[R3，#0X0C]; R2&lt;-mem32[R3＋0X0C]STR R1，[R0，#-0x4]!; R1-&gt;mem32[R0-0x4],R0&lt;-R0-0x4LDR r0，[r1，r2]; r0&lt;-mem32[r1+r2]LDR r0，[r1，r2，LSL #2]; r0&lt;-mem32[r1+r2*4](r2逻辑左移4位) 多寄存器寻址 Multiple Register Addressing采用多寄存器寻址方式，一条指令可以完成多个寄存器值的传送。这种寻址方式是多寄存器传送指令 LDM/STM 的寻址方式，这种寻址方式中用一条指令最多可传送 16 个通用寄存器的值。连续的寄存器间用 -连接，否则用 ,分隔 12LDMIA R0！，{R1-R4};R1←[R0]、R2←[R0＋4]、R3←[R0＋8]、R4←[R0＋12] LDMIA “Load Multiple Increment After”从 R0 指向的地址开始，连续加载寄存器 R1, R2, R3, R4 的值，并将最后的地址写回到 R0 中” 1234564种寻址操作LDMIA/STMIA Increment After(先传送，后地址加4)LDMIB/STMIB Increment Before(先地址加4 ,后传送)LDMDA/STMDA Decrement After(先传送，后地址减4)LDMDB/STMDB Decrement Before (先地址减4,后传送)⚠️注意:对于所有LDM/STM指令而言，寄存器序号低的，在低地址单元，序号大的在高地址单元！与书写顺序无关！ 堆栈寻址 Stack Addressing堆栈是一种数据结构，按后进先出（Last In First Out， LIFO）的方式工作，使用一个称作堆栈指针的专用寄存器指示当前的操作位置，堆栈指针总是指向栈顶。 堆栈可分为两种增长方式： 向上生长：向高地址方向生长，称为递增堆栈。 向下生长：向低地址方向生长，称为递减堆栈。 根据堆栈指针指向的数据位置的不同，可分为： 满堆栈：堆栈指针指向最后压入堆栈的有效数据项，称为满堆栈; 空堆栈：堆栈指针指向下一个待压入数据的空位置，称为空堆栈。 四种类型的堆栈工作方式 满递增堆栈 FA(Full Ascending)：堆栈指针指向最后压入的数据，且由低地址向高地址生长。 空递增堆栈 EA(Empty Ascending)：堆栈指针指向下一个将要放入数据的空位置，且由低地址向高地址生长。 满递减堆栈 FD(Full Descending) ：堆栈指针指向最后压入的数据，且由高地址向低地址生长。 空递减堆栈 ED(Empty Descending)：堆栈指针指向下一个将要放入数据的空位置，且由高地址向低地址生长。 STMXX 是存入到主存，是入栈操作;LDMXX 是从主存读出到寄存器，是出栈操作 12STMFD SP!,{R1-R7,LR};将R1-R7，LR入栈LDMFD SP!,{R1-R7,LR};数据出栈，放入R1-R7,LR 相对寻址 Relative Addressing与基址变址寻址方式相类似，相对寻址以程序计数器 PC 的当前值为基地址，指令中的地址标号作为偏移量，将两者相加之后得到操作数的有效地址","link":"/UESTC/ARM-Processor/Ch3-1ARM%E6%8C%87%E4%BB%A4%E6%A6%82%E8%BF%B0/"},{"title":"ARM指令分类","text":"ARM 指令集分支指令在 ARM 中有两种方式可以实现程序的跳转：一种是使用分支转移指令直接跳转;另一种则是直接向 PC 寄存器赋值来实现跳转。ARM 的分支转移指令，可以从当前指令向前或向后的 32MB($2^{23}\\times4=2^{10} \\times 2^{10} \\times 32 $) 的地址空间跳转，根据完成的功能它可以分为 4 种:B、BL、BX、BLX。 signed_immed_24 间接提供目标地址，真正的目标地址是由处理器根据这个有符号数和当前的 PC 值计算出来的。具体计算为：先将 signed_immed_24 左移两位（即具有 26 位的偏移量），并扩展为 32 位有符号数，然后再将这 32 位有符号数与 PC 的当前值相加，得到实际的跳转地址。因此 B 和 BL 指令转移的偏移量为 26 位，即转移的跨度为前后 32MB 地址空间。 跳转指令 B 及带连接的跳转指令 BLB指令与BL指令的编码格式如下： 从编码中看到 L 控制了 PC 与 LR 寄存器之间的开关。当 L=0 时，该开关断开，指令为 B 指令;当 L=1 时，该开关接通，指令为 BL 指令。Signed_immed_24 表示 24 位有符号的立即数（偏移量） B 和 BL 指令的助记符格式为：B {&lt;cond&gt;} &lt;target&gt;和BL{&lt;cond&gt;} &lt;target&gt;cond 表示指令执行条件target 表示跳转地址功能：跳转到指定地址执行，地址范围限制在当前 PC 寄存器所指向的指令地址的 ±32MB 范围 跳转指令也叫程序转移指令。写汇编程序时，可以跳转到一个绝对地址，如:B 0x1234 （注： B #0x1234 是错误的 ）编译器会把该绝对地址转换为相对地址放入指令中。 1234567例：现已知寄存器 R0 中存放了数据 a ，寄存器 R1 中存放了数据 b ，编写一个程序段，求取 a 和 b 的最大公约数并将其存入寄存器 R0 。gcb CMP R0,R1 ; 比较a和b的大小 SUBGT R0,R0,R1; 如果a&gt;b,则a=a-b SUBLT R1,R1,R0; 如果a&lt;b,则b=b-a BNE gcb ; 如果a!=b,则返回gcb MOV PC,LR ; 如果a=b,则返回主程序 B(Branch)和 BL(Branch with Link) 的区别在于：BL 在跳转之前会把 BL 指令的下一条指令地址（断点地址）保存到连接寄存器 LR（R14），因此程序在必要的时候可以通过将 LR 的内容加载到 PC 中，使程序返回到跳转点。BL 这也是一个跳转指令，但它在跳转之前会将下一条指令的地址存储到链接寄存器（LR）中。这是为了在子程序或函数执行完毕后，能够返回到调用它的代码处继续执行。换句话说，BL 指令用于函数或子程序的调用。 1234567891011_start: MOV R0, #5 ; 将5放入寄存器R0 BL multiply ; 调用multiply函数 B end ; 跳转到end标签multiply: LSL R0, R0, #1 ; 将R0的值乘以2(逻辑左移) MOV PC, LR ; 返回到调用multiply的地方end: ; 这里是程序结束的地方 带状态切换的跳转指令 BXBX 指令的格式为BX{&lt;cond&gt;} Rmcond 表示指令执行条件Rm 寄存器，值是绝对地址值，不是偏移量，在指令执行后，Rm 中的地址值与#0XFFFF FFFE 进行 AND 运算，再被复制到程序计数器 PC。带状态切换的跳转。最低位(Rm[0])为 1 时，切换到 Thumb 指令执行，为 0 时，解释为 ARM 指令执行 123456789101112例如： CODE32 ;32位编码ARM1 LDR R0，=Thumb1 ;把Thumb地址赋给R0，末位自动置1 MOV LR,PC ;设置返回地址 BX R0 ;跳转，切换状态 ADD R1,R2,#2 … CODE16 ;16位编码Thumb1 ADD R1，R3,#1 ;Thumb程序 … BX LR ;跳转到返回地址，状态切换 带连接和状态切换的连接跳转指令 BLX BLX 指令的格式有两种： BLX &lt;target&gt; 和 BLX{&lt;cond&gt;} Rm以 target 方式提供目标地址的 BLX 指令的功能是：把程序跳转到指令中所指定的目标地址继续执行，并同时将处理器的工作状态从 ARM 状态切换到 Thumb 状态，并将下一条的地址保存到寄存器 LR 中。而以 Rm 方式提供目标地址的 BLX 指令，除了跳转和下一条的地址保存到 LR 之外，也可进行状态切换，但其切换的依据是 Rm 最低位的值。如果值为 0 ，则目标地址处应为 ARM 指令，如果值为 1 ，则目标地址处应为 Thumb 指令 修改 PC另一种实现指令跳转的方式是通过直接向 PC 寄存器中写入目标地址值，实现在 4GB 地址空间中任意跳转，这种跳转又称为长跳转。如果在长跳转指令之前使用“MOV LR，PC” 等指令，可以保存将来返回的地址值，也就实现了在 4GB 的地址空间中的子程序调用。 数据处理指令数据处理指令概述1. ARM 数据处理指令的功能主要完成寄存器中数据的算术和逻辑运算操作。2. ARM 数据处理指令的特点操作数来源:所有的操作数要么来自寄存器，要么来自立即数，不会来自存储器。操作结果:如果有结果，则结果一定是为 32 位宽、或 64 位宽（长乘法指令），并且放在一个或两个寄存器中，不会写入存储器。有第二个操作数 Operand2 :切记其三种形式：立即数、寄存器、寄存器移位。特别地,乘法指令的操作数:全部是寄存器。 3. ARM 数据处理指令分类算术运算指令：ADD ADC SUB SBC RSB RSC MUL MLA UMULL UMLAL SMULL SMLAL逻辑运算指令： AND ORR EOR BIC数据传送指令： MOV MVN比较指令： CMP CMN测试指令： TST TEQ上述指令只能对寄存器操作，不能针对存储器。 4. 数据处理指令对程序状态寄存器 CPSR 的影响指令中可以添加 S 后缀，以影响 CPSR 状态标志。但是比较指令（CMP 和 CMN）和测试指令(TST 和 TEQ)不需要后缀 S，它们总会直接影响 CPSR 中的状态标志。 关于恢复 CPSR 原值问题： 如果指令带有 S 后缀（除了比较指令以外），同时又以 PC 为目标寄存器进行操作:1. 在异常模式下：则操作的同时从 SPSR(Saved Program Status Register) 恢复 CPSR(Current Program Status Register) 1234movs pc, #0xff /* cpsr = spsr; pc = 0xff */adds pc, r1, #0xff00 /* cpsr = spsr; pc = r1 + 0xff00 */ands pc, r1, r2 /* cpsr = spsr; pc = r1 &amp; r2; */ 2. 在 user 或者 system 模式：会产生不可预料的结果，因为在这两种模式下没有 SPSR 数据处理指令格式 I 用于区别立即数(I=1)或寄存器移位(I=0)opcode 为数据处理指令操作码operand2 为第二个操作数，若指令不需要全部的可用操作数时(如 MOV 指令的 Rn)，不用的寄存器域应设置为 0(由编译器自动完成)。对于比较指令,b20 位固定为 1。 Data Processing Instructions加减乘ADD——加法运算指令ADD{cond}{S} Rd，Rn，operand2; Rd&lt;-Rn+operand2 受影响的 CPSR 标志位 取值 N 寄存器 Rd[31]被复制到 N Z 如果 Rd 为 0，则 Z=1，否则 Z=0 C 运算结果有进位 C=1，否则 C=0 V 运算结果有溢出 V=1，否则 V=0 123ADD R0，R1，R2 ;R0←（R1）+（R2）ADD R0，R1，#255 ;R0 ←（R1）+ 255ADD R0，R2，R3，LSL#1 ;R0 ←（R2） +（R3&lt;&lt;1） ADC——带进位加法指令指令格式：ADC{cond}{S} Rd，Rn，operand2ADC 指令将 operand2 的数据与 Rn 的值相加，再加上 CPSR 中的 C 条件标志位，结果保存到 Rd 寄存器。ADC 通常用来实现字长大于 32 位的加法运算。 SUB——减法运算指令指令格式：SUB{cond}{S} Rd，Rn，operand2SUB 指令用寄存器 Rn 减去 operand2，结果保存到 Rd 中 123SUB R0，R1，R2 ;R0←（R1）-（R2）SUB R0，R1，#256;R0←（R1）- 256SUB R0，R2，R3，LSL#1;R0←（R2）-（R3&lt;&lt;1） 受影响的 CPSR 标志位 取值 N 寄存器 Rd[31]被复制到 N Z 如果 Rd 为 0，则 Z=1，否则 Z=0 C 运算结果有借位 C=0，否则 C=1 V 运算结果有溢出 V=1，否则 V=0 SBC——带进位减法指令指令格式：SBC{cond}{S} Rd，Rn，operand2SBC 指令用寄存器 Rn 减去 operand2，再减去 CPSR 中的 C 条件标志位的反码，结果保存到 Rd 中。标志位的修改同 SUB。该指令主要用于字长大于 32 位的数据的减法运算。 RSC——带进位反向减法指令指令格式：RSC{cond}{S} Rd，Rn，operand2RSC 指令用寄存器 operand2 减去 Rn，再减去 CPSR 中的 C 条件标志位的反码，结果保存到 Rd 中。 乘法指令格式其中，opcode 为乘法指令操作码。S 为设置条件码。Rm 为被乘数寄存器，Rs 为乘数的寄存器。Rn/RdLo 用于 MLA 指令相加的寄存器或 64 位乘法指令的目标寄存器(低 32 位)。Rd/RdHi 用于目标寄存器或 64 位乘法指令的目标寄存器(高 32 位)。若指令不需要全部的可用操作数时(如 MUL 指令的 Rn)，不用的寄存器域应设置为 0(由编译器自动完成) MUL——32 位乘法指令指令格式：MUL{cond}{S} Rd，Rm，RsMUL 指令将 Rm 和 Rs 中的值相乘，结果的低 32 位保存到 Rd 中 受影响的 CPSR 标志位 取值 N 寄存器 Rd[31]被复制到 N Z 如果 Rd 为 0 则 Z=1，否则 Z=0 123MUL R1，R2，R3 ;R1=R2×R3MULS R0，R3，R7 ;R0=R3×R7， ;设置CPSR的N位和Z位 MLA——32 位乘加指令格式 MLA{cond}{S} Rd，Rm，Rs，Rn指令将 Rm 和 Rs 中的值相乘，再将乘积加上第 3 个操作数，结果的低 32 位保存到 Rd 中。注： Rd ≠ Rm标志位的修改同 MUL。 123MLA R0,R1,R2,R3 ;R0←(R1)X(R2)+(R3)MLAS R0,R1,R2,R3 ; R0←(R1)X(R2)+(R3), ;并更新CPSR标志位 UMULL—64 位无符号乘法指令指令格式：UMULL{cond}{S} RdLo，RdHi，Rm，Rs;RdHi, RdLo← Rm*RsUMULL 指令将 Rm 和 Rs 中的值作无符号数相乘，结果的低 32 位保存到 RdLo 中，高 32 位保存到 RdHi 中例：UMULL R0，R1，R5，R8;(R1,R0)←R5×R8 受影响的 CPSR 标志位 取值 N 寄存器 RdHi[31]被复制到 N Z 如果 RdHi 且 Rdlo 为 0，则 Z=1，否则 Z=0 UMLAL—64 位无符号乘加指令指令格式：UMLAL{cond}{S} RdLo，RdHi，Rm，Rs;RdHi, RdLo← Rm*Rs+ RdHi, RdLoUMLAL 指令将 Rm 和 Rs 中的值作无符号数相乘，64 位乘积与 RdHi、RdLo 相加，结果的低 32 位保存到 RdLo 中，而高 32 位保存到 RdHi 中。标志的修改同 UMULL。指令举例如下：UMLAL R0，R1，R5，R8;(R1,R0)←R5×R8+(R1,R0) SMULL—64 位有符号乘法指令指令格式：SMULL{cond}{S} RdLo，RdHi，Rm，Rs; RdHi, RdLo← Rm*RsSMULL 指令将 Rm 和 Rs 中的值作有符号数相乘，结果的低 32 位保存到 RdLo 中，而高 32 位保存到 RdHi 中。例如：SMULL R2，R3，R7，R6;(R3,R2)←R7×R6 受影响的 CPSR 标志位 取值 N 寄存器 RdHi[31]被复制到 N Z 如果 RdHi 且 Rdlo 为 0，则 Z=1，否则 Z=0 SMLAL—64 位有符号乘加指令指令格式：SMLAL{cond}{S} RdLo，RdHi，Rm，Rs; RdHi, RdLo← Rm*Rs+ RdHi, RdLoSMLAL 指令将 Rm 和 Rs 中的值作有符号数相乘，64 位乘积与 RdHi、RdLo 相加，结果的低 32 位保存到 RdLo 中，高 32 位保存到 RdHi 中。标志的修改同 SMULL。 乘法指令的特点 结果寄存器不能与第一源寄存器相同。 不支持第 2 操作数为立即数。 Rd、RdHi、RdLo 不能与 Rm 为同一寄存器。 RdHi 和 RdLo 不能为同一寄存器。 避免将 R15 定义为任一操作数或结果寄存器。 早期的 ARM 处理器仅支持 32 位乘法指令。ARM7 版本和后续的在名字中有 M 的处理器才支持 64 位乘法指令。 对标志位的影响 对 N 标志位：若结果是 32 位指令形式，Rd 的第 31 位是标志位 N;对于产生长结果的指令形式，RdHi 的第 31 位是标志位。 对 Z 标志位：如果 Rd 或 RdHi、RdLo 为 0，则标志位 Z 置位。 对 V 标志位：乘法指令不影响 V 标志位。 对 C 标志位： ARM v5 及以上的版本不影响 C 标志位; ARM v5 以前的版本，C 标志位数值不确定。 逻辑运算指令 按位与指令（AND）按位与指令用于将两个寄存器中的值进行按位与运算，并将结果存储在目标寄存器中。基本语法如下：AND Rd, Rn, Operand2其中，Rd 是目标寄存器，Rn 是第一个操作数所在寄存器，Operand2 是第二个操作数。示例：AND R0, R1, R2这个指令将 R1 和 R2 中的值进行按位与运算，并将结果存储在 R0 中。 按位或指令（ORR）按位或指令用于将两个寄存器中的值进行按位或运算，并将结果存储在目标寄存器中。基本语法如下：ORR Rd, Rn, Operand2其中，Rd 是目标寄存器，Rn 是第一个操作数所在寄存器，Operand2 是第二个操作数。示例：ORR R0, R1, R2这个指令将 R1 和 R2 中的值进行按位或运算，并将结果存储在 R0 中。 按位异或指令（EOR）按位异或指令用于将两个寄存器中的值进行按位异或运算，并将结果存储在目标寄存器中。基本语法如下：EOR Rd, Rn, Operand2其中，Rd 是目标寄存器，Rn 是第一个操作数所在寄存器，Operand2 是第二个操作数。示例：EOR R0, R1, R2这个指令将 R1 和 R2 中的值进行按位异或运算，并将结果存储在 R0 中。 位清楚指令（BIC）按位非指令用于对一个寄存器中的值进行按位取反，并将结果存储在目标寄存器中。基本语法如下：BIC Rd, Rn, Operand2BIC 指令将寄存器 Rn 的值与 Operand2 的值的反码按位逻辑与操作，结果保存到 Rd 中。指令举例如下：BIC R1，R1，#0x0F; 将R1的低4位清0,其它位不变 123例：请把寄存器R2中的高8位数据传送到寄存器R3的低8位，原R3低24置换为高24位。MOV R0，R2，LSR #24;将R2右移24位，即将其高8位移至低8位送R0。ORR R3，R0，R3，LSL #8;将R3左移8位后将R0低8位送至R3。 数据传送指令MOV{cond}{S} Rd，operand2MOV 指令将 operand2 传送到目标寄存器 Rd 中 1234MOV R2，#0x7E; 将立即数 0x7E 传送到寄存器 R2 中MOVS R1，R0，LSL#3; 将寄存器 R0 * 8 传送到寄存器 R1，并影响标志位MOV PC，LR; PC←LR，子程序返回MOVS PC，LR; PC←LR，异常模式下返回 CPSR←SPSR MOV 指令的功能总结 寄存器之间传送。 立即数传送到寄存器中。（8 位立即数位图） 实现单纯的移位操作。MOV Rd，Rd，LSL，#3 实现子程序调用、从子程序中返回。当 PC 寄存器作为目标寄存器时可以实现程序跳转。 实现异常模式的返回，并把当前处理器模式的 SPSR 寄存器内容复制到 CPSR 中。 MVN{cond}{S} Rd，operand2MVN 指令将 operand2 按位取反后传送到目标寄存器 Rd 比较指令CMP{cond} Rn，operand2CMP 指令将寄存器 Rn 的值减去 operand2 的值，但不存储运算结果，只根据操作的结果更新 CPSR 中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行。 受影响的 CPSR 标志位 取值 N 运算结果的第 31 位被复制到 N Z 运算结果为 0 则 Z=1，否则 Z=0 C 运算结果有借位则 C=0，否则 C=1 V 运算结果有溢出则 V=1，否则 V=0 CMN{cond} Rn，operand2CMN 指令将寄存器 Rn 的值减去 operand2 的相反数（即加上 operand2 的值），但不存储运算结果，只根据操作的结果更新 CPSR 中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行。 1CMN R0，#1;R0+1，判断R0是否为-1。 测试指令TST{cond} Rn，operand2TST 指令将寄存器 Rn 的值与 operand2 的值按位逻辑“与”操作，但不存储运算结果，只根据操作的结果更新 CPSR 中的相应条件标志位。该指令一般用来检测是否设置了特定的位。 12TST R0，#0x01;判断 R0 的最低位是否为 0TST Rl，#0x0F;判断 R1 的低 4 位是否为 0 TEQ{cond} Rn，operand2TEQ 指令将寄存器 Rn 的值与 operand2 的值按位逻辑“异或”操作，但不存储运算结果，只根据操作的结果更新 CPSR 中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行。指令举例如下：TEQ R0，R1;比较 R0 与 R1 是否相等；(不影响 V 位和 C 位) 存储器访问指令ARM 微处理器用加载/存储指令访问存储器，实现在寄存器和存储器之间传送数据。由于 ARM 处理器对外设寄存器、I/O 映射空间与存储器统一编址，因此，对外围设备的 I/O 操作也用此类指令。基本的加载/存储指令仅有 5 条，分为 3 种： LDR 和 STR，单寄存器加载/存储指令 LDM 和 STM，多寄存器加载/存储指令 SWP，寄存器和存储器数据交换指令 其中，I、P、U、W 用于区别不同的地址模式(偏移量) I 为 0 时，偏移量为 12 位立即数；I 为 1 时，偏移量为寄存器移位； P 表示前/后变址，U 表示加/减，W 表示回写(！后缀) L 用于区别加载(L 为 1 时)或存储(L 为 0 时) B 用于区别字节访问(B 为 1 时)或字访问(B 为 0 时) Rn 为基址寄存器，Rd 为源/目标寄存器。 单寄存器加载/存储指令单寄存器加载/存储指令是 ARM 在寄存器和存储器间传送单个字节和字的最灵活方式。 LDR（Load Register）：这是一个加载指令，用于从内存中读取数据并将其加载到寄存器中。其基本格式为 LDR Rd, [Rn]，其中 Rd 是目标寄存器，Rn 是包含要读取的内存地址的寄存器;例如，LDR R1, [R2] 会将存储在 R2 寄存器所指向的内存地址中的数据加载到 R1 寄存器中。STR（Store Register）：这是一个存储指令，用于将寄存器中的数据写入到内存中。其基本格式为 STR Rd, [Rn]，其中 Rd 是源寄存器，Rn 是包含要写入的内存地址的寄存器。例如，STR R1, [R2] 会将 R1 寄存器中的数据存储到 R2 寄存器所指向的内存地址中。 根据传送数据的类型不同，单个寄存器存取指令又可以分为以下两类：单字和无符号字节的加载/存储指令半字和有符号字节的加载/存储指令 单字和无符号字节的加载／存储指令LDR：指令从内存中取 32 位字或 8 位无符号字节数据放入寄存器；STR：指令将寄存器中的 32 位字或 8 位无符号字节数据保存到存储器中。 注意：无符号字节加载时，用 0 将 8 位的操作数扩展到 32 位。 Instruction FormatLDR{cond}{T} Rd，&lt;地址&gt;;加载指定地址上的字数据，放入 Rd 中。STR{cond}{T} Rd，&lt;地址&gt;;存储 Rd 中字数据，到指定地址的存储单元。LDR{cond}B{T} Rd，&lt;地址&gt;;加载字节数据到 Rd 低 8 位数据位中，高 24 位为 0。STR{cond}B{T} Rd，&lt;地址&gt;;存储 Rd 中字节数据， Rd 中最低字节为传送数据 PostfixT 为可选后缀，若指令有 T，存储系统将访问看成是处理器是在用户模式下。用于存储器保护。不能与后变址模式、自动变址模式一起使用（即不能改变基址寄存器值）。T 在用户模式下无效 AddressingLDR/STR 指令为基址变址寻址[Ch3-1ARM指令概述.md#基址变址寻址 Base-index Addressing]（或寄存器间接寻址），由两部分组成： 基地址部分：为一个基址寄存器，可以为任一个通用寄存器； 偏移地址部分：这一部分非常灵活，实际就类似第二个操作数，可以有以下 3 种格式： 立即数:12 位立即数是一个无符号的数值。这个数据可以加到基址寄存器，也可以从基址寄存器中减去这个数值 寄存器:寄存器中的数值(无符号数)可以加到基址寄存器，也可以从基址寄存器中减去这个数值 寄存器及移位常数:寄存器移位后的值(无符号数)可以加到基址寄存器，也可以从基址寄存器中减去这个数值123456LDR R1，[R0，#0x10];LDR R1，[R0，# -0x10];LDR R1，[R0，R2]LDR R1，[R0，-R2]LDR R1，[R0，R2，LSL #2] 将R0+R2×4地址处的数据读出,保存到R1中(R0、R2的值不变)LDR R1，[R0，-R2，LSL #2] 将R0-R2×4地址处的数据读出,保存到R1中(R0、R2的值不变) PC（即 R15）使用的几个问题使用 PC 作为基址时，使用的数值是当前执行指令的地址加 8 个字节（取指与执行相差 8 个字节）。PC 不能用做偏移寄存器，也不能用于任何变址寻址模式。把一个字加载到 PC，将使程序转移到所加载的地址，这是一个公认的实现跳转的方法。但是应当避免将一个字节加载到 PC。把 PC 存到存储器的操作在不同体系结构的处理器中产生不同的结果，应尽可能避免。 多寄存器的存取指令LDM 和 STM 指令可以实现在一组寄存器和一块连续的内存单元之间存/取数据。LDM 为加载多个寄存器；STM 为存储多个寄存器。这两条指令，允许传送 16 个寄存器 R0—R15 的任何子集或所有寄存器。 LDM{cond}&lt;模式&gt; Rn{!}，&lt;reglist&gt;{^}STM{cond} &lt;模式&gt; Rn{!}，&lt;reglist&gt;{^}（1）Rn：表示基址寄存器，装有传送数据的初始地址，Rn 不允许为 R15（即 PC）。（2）Rn 后缀“!”：表示最后的地址写回到 Rn 中。（3）Reglist：表示寄存器列表，其中包含一个或多个寄存器。当寄存器不连续时，中间使用“，”隔开。例如：{R1，R2，R6-R9}列表寄存器和存储器地址的关系规则：编号低的寄存器对应于存储器中低地址单元，编号高的寄存器对应于存储器中高地址单元。(4)后缀“^”说明寄存器列表不包含 PC：使用后缀“^”进行数据传送时，加载／存储的是用户模式的寄存器，而不是当前模式的寄存器。寄存器列表包含有 PC：除了正常的多寄存器传送外，还要将 SPSR 拷贝到 CPSR 中。该用法可用于异常处理返回。禁用情况：后缀“^”不允许在用户模式或系统模式下使用。 ，因为它们没有 SPSR（5）当 Rn 在寄存器列表中且使用后缀“!”对于 STM 指令，若 Rn 为寄存器列表中的最低序号的寄存器，则会将 Rn 的初值保存；其它情况下 Rn 的编译无法通过。（6）地址字对齐这些指令寻址是字对齐的，即忽略地址位[1:0]。 协处理器指令略 杂项指令主要由两种类型指令组成，程序状态寄存器操作指令、中断操作指令，一共有 5 条指令。 状态寄存器操作指令：MRS：读程序状态寄存器指令MSR：写程序状态寄存器指令异常中断操作指令：SWI： 软件中断指令BKPT：断点指令（v5T 体系）CLZ： 前导 0 计数（v5T 体系）","link":"/UESTC/ARM-Processor/Ch3-2ARM%E6%8C%87%E4%BB%A4%E5%88%86%E7%B1%BB/"},{"title":"ARM伪指令及编程基础","text":"伪指令概述伪指令:人们设计了一些专门用于指导汇编器进行汇编工作的指令，由于这些指令不形成机器码指令，它们只是在汇编器进行汇编工作的过程中起作用，所以被叫做伪指令伪指令具有的两个特征:伪指令是一条指令;伪指令没有指令代码。 伪指令的作用 程序定位的作用; 为非指令代码进行定义; 为程序完整性做标注; 有条件的引导程序段。 通用伪指令在 ARM 汇编程序语言中，有如下几种伪指令： 符号定义（Symbol Definition）伪指令 数据定义（Data Definition）伪指令 汇编控制（Assembly Control）伪指令 其它（Miscellaneous）伪指令 为变量定义或赋值的伪指令符号的命名由编程者决定，但必须遵循以下约定： 符号区分大小写，同名的大、小写符号会被编译器认为是两个不同的符号; 符号在其作用范围内必须唯一; 自定义的符号不能与系统保留字相同; 符号不应与指令或伪指令同名。 声明全局变量伪指令 GBLA、GBLL 和 GBLSGBLA、GBLL 和 GBLS 伪指令用于定义一个 ARM 程序中的全局变量，并将其初始化。全局变量的变量名在整个程序范围内必须具有唯一性指令格式：GBLA(GBLL和GBLS) &lt;variable_name&gt;GBLA 定义一个 全局数字变量，其默认初值为 0 ;GBLL 定义一个 全局逻辑变量 ，其默认初值为 FALSE;GBLS 定义一个 全局字符串变量，其默认初值为 空 ; 声明局部变量伪指令 LCLA、LCLL 和 LCLSLCLA、LCLL 和 LCLS 伪指令用于定义一个 ARM 程序中的局部变量，并将其初始化。格式：LCLA(LCLL 和 LCLS) &lt;variable_name&gt;LCLA 定义一个局部数字变量，其默认初值为 0;LCLL 定义一个局部逻辑变量，其默认初值为 FALSE;LCLS 定义一个局部字符串变量，其默认初值为 空。 变量赋值伪指令 SETA、SETL 和 SETS伪指令 SETA、SETL 和 SETS 用于给一个已经定义的全局变量或局部变量进行赋值。 注：要顶格写 指令格式：变量名 SETA（SETL 或 SETS）表达式SETA 伪指令用于给一个数字变量赋值;SETL 伪指令用于给一个逻辑变量赋值;SETS 伪指令用于给一个字符串变量赋值; 123Test1 SETA 0xAA ;将Test1变量赋值为0xAA。Test2 SETL {TRUE} ;将Test2 变量赋值为真;Test3 SETS &quot;Testing&quot; ;将Test3变量赋值为Testing 定义寄存器列表伪指令指令 LDM/STM 需要使用一个比较长的寄存器列表，使用伪指令 RLIST 可对一个列表定义一个统一的名称。格式：&lt;name&gt; RLIST &lt;{list}&gt;例如： 123LoReg RLIST {R0-R7} ;定义寄存器列表{R0-R7}的名称为 LoRegSTMFD SP!, LoReg ;堆栈操作使用寄存器列表RegList RLIST {R0-R5,R8,R10} ;将寄存器列表名称定义为 RegList，可在 ARM 指令 LDM/STM 中通过该名称访问寄存器列表 数据定义伪指令LTORG用于声明一个数据缓冲池（文字池）的开始。格式：LTORG伪指令 LTORG 用来说明某个存储区域为一个用来暂存数据的数据缓冲区，也叫文字池或数据缓冲池。大的代码段也可以使用多个数据缓冲池。其目的是，防止在程序中使用 LDR 之类的指令访问时，可能产生的越界。通常把数据缓冲池放在代码段的最后面，或放在无条件转移指令或子程序返回指令之后，这样处理器就不会错误地将数据缓冲池中的数据当作指令来执行。 123456789 AREA example, CODE, READONLYStart BL Func1 …Func1 LDR R1,=0x800 MOV PC,LR LTORG ;定义数据缓冲池的开始位置， ;系统会自动设置数据缓冲池的大小 … END MAP 和 FIELDMAP 用于定义一个结构化的内存表的首地址。MAP 可以用^ 代替。格式：MAP &lt;expr&gt; {,&lt;base_register&gt;} expr 是数字表达式或程序中的标号。当指令中没有 base_register 时，expr 即为结构化内存表的首地址，可以为 标号 或 数字表达式;base_register 为基址寄存器（可选项）。当指令中包含这一项时，结构化内存表的首地址为 expr 与 base_register 寄存器值的和;MAP fun ; fun 就是内存表的首地址MAP 0x100,R9 ;内存表的首地址为 R9+0X100 MAP 通常和 FIELD 伪指令相配合来定义一个结构化的内存表。FIELD 伪指令用于定义一个结构化内存表中的数据域。格式：{label} FIELD expr Label 为域标号，要顶格写;Expr 表示本数据域在内存表中所占用的字节数;功能：FIELD 用于定义一个结构化内存表中的数据域，#与 FIELD 同义。 12345 MAP 0X100 ;定义结构化内存表首地址为 0X100A FIELD 16 ;定义A的长度为16字节，位置为 0X100B FIELD 32 ;定义B的长度为32字节，位置为 0X110S FIELD 256 ;定义S的长度为256字节，位置为 0X130注意：MAP 和 FIELD 伪指令仅用于定义数据结构，并不实际分配存储单元。 FIELD 也可用“#” 代替。 SPACE 和 DCBSPACE 伪指令用于分配一片连续的存储区域并初始化为 0。格式： {label} SPACE exprlabel 为内存块起始地址标号;Expr 为所要分配的内存字节数;SPACE 也可用“%” 代替。 12 AREA DataRAM,DATA,READWRITE;声明一数据段，名为 DataRAMDataSpace SPACE 100 ;分配连续的 100 字节的存储单元,并初始化为 0。 DCB 伪指令用于分配内存单元并初始化格式：{label} DCB expr{，expr }{，expr }… label 是存块起始地址标号;expr 可以为 0 至 255 的数值或字符串，内存分配的字节数由 expr 个数决定;功能：DCB 用于分配一段字节内存单元，并用伪指令中的 expr 初始化，一般可用来定义数据表格，或文字符串，=与 DCB 同义。 1234567DISPTAB DCB 0x43,0x33,0x76,0x12 DCB 120,20,32,44String DCB “send,data is error!”,0LDR R1, =DISPTAB ;把DISPTAB的地址值送入R1 LDRB R2, [R1,#2] ;获取地址为[R1+#2]字节单元的值,R2=0x76 DCD 和 DCDU用于分配存储单元并初始化格式：{label} DCD expr{，expr }{，expr }…{label} DCDU expr{，expr }{，expr }…label 是内存块起始地址标号expr 为常数表达式或程序中标号，内存分配字节数由 expr 个数决定功能：DCD 用于分配一段字内存单元，并用伪指令中的 expr 初始化，字对齐，可定义数据表格或其它常数。&amp;与 DCD 同义。DCDU 用于分配一段字内存单元，并用伪指令中的 expr 初始化。DCDU 伪指令分配的内存不需要字对齐，可定义数据表格或其它常数 123456789101112131415 AREA blockcopy,CODE,READONLY …… LDR R1,=ftt LDR R2,=ftt2 LDR R3,[R1] ; R3 = 1 LDR R4,[R2] ; R4 = 3 LDR R5,[R1, #4]; R5 = 2 LDR R6,[R2, #4]; R6 = 4 ……Src DCD 1,2,3,4,5,6,7,8, MAP Srcftt FIELD 8; 8 Byte = 64 Bit = 2 words, 即ftt为src数组的前两个元素ftt2 FIELD 8 END 该例说明了,MAP 和 FIELD 伪指令不分配存储空间，只是给相关存储单元取个名称（标号）。便于程序以结构的方式访问对应的内存单元。 MISC了解 DCFD 和 DCFDU DCFS 和 DCFSU DCQ 和 DCQU DCW 和 DCWU 控制程序流向伪指令IF、ELSE 和 ENDIF 伪指令能根据条件的成立与否决定是否编译某个程序段。 12345IF condition 程序段1ELSE 程序段2ENDIF WHILE 和 WEND 伪指令根据条件的成立与否决定是否重复汇编一个程序段。 123WHILE condition 程序段WEND 若 WHILE 后面的逻辑表达式为真，则重复汇编该程序段，直到逻辑表达式为假。 1234567891011 GBLA NUMNUM SETA 1 AREA blockcopy,CODE,READONLY ENTRY WHILE NUM &lt; 3 ...NUM SETA NUM+1 WEND ......... END 其它伪指令定义对齐方式伪指令 ALIGN格式：ALIGN {表达式，{偏移量}}ALIGN 是边界对齐伪指令，它可以通过添加填充字节的方式，使当前位置满足一定的对齐方式。其中表达式用于指定对齐方式在不同场合有不同的定义例如 ALIGN 4 ;4 字节字对齐，ALIGN 后面不能有等号 12345678 AREA OffsetExample, CODE .........ss1 DCB 1 ;假设ss1在0x01000字节 ALIGN 4,3 ; 4字节对齐+3偏移量.ss2 DCB 1 ;使用“ALIGN 4，3”以后， ;当前位置会转到0x01003(0x01000+3)。 ;ss1和ss2之间会空2个字节。 段定义伪指令 AREAAREA 用于定义一个代码段或数据段。一个汇编语言程序至少要有一个段。格式：AREA sectionname {,attr} {,attr}… sectionname 是定义的代码段或数据段的名称。若该名称是以数据开头的，则该名称必须用“｜”括起来，如｜ 2_datasec ｜。还有一些代码段的名称是专有名称。Attr 表示代码或数据段的属性，多个属性用短号分隔，常用的属性如下 属性 含义 备注 CODE 代码段 默认读/写属性为 READONLY DATA 数据段 默认读/写属性为 READWRITE NOINIT 数据段 指定此数据段仅仅保留了内存单元，而没有将各初始值写入内存单元。 READONLY 本段为只读 READWRITE 本段为可读可写 ALIGN 表达式 ELF 的代码段和数据段为字对齐 COMMON 多源文件共享段 CODE16 和 CODE32CODE16 告诉汇编编译器后面的指令序列为 16 位的 Thumb 指令。CODE32 告诉汇编编译器后面的指令序列为 32 位的 ARM 指令。注意：CODE16 和 CODE32 只是告诉编译器后面指令的类型，该伪操作本身不进行程序状态的切换 1234567891011AREA ChangeState, CODE, READONLY ENTRY CODE32 ;下面为32位ARM指令 LDR R0,=start+1 ;将跳转地址放入寄存器R0 BX R0 ;程序跳转到新的位置执行 …… ;并将处理器切换到Thumb工作状态 CODE16 ;下面为16位Thumb指令start MOV R1,#10 ……. END ENTRY &amp; ENDENTRY 定义程序入口点伪指令 ,指定程序的入口点。 注意：一个程序（可包含多个源文件）中至少要有一个 ENTRY（可以有多个 ENTRY，当有多个 ENTRY 入口时，程序的真正入口点由链接器指定），但一个源文件中最多只能有一个 ENTRY（可以没有 ENTRY） END 伪指令用于通知编译器汇编工作到此结束，不再往下汇编了。每一个汇编源程序都必须包含 END 伪操作，以表明本源程序的结束。 EXPORT &amp; IMPORT &amp; EXTERNEXPORT外部可引用符号声明伪指令 EXPORT（或 GLOBAL）声明一个源文件中的符号，使此符号可以被其他源文件引用。格式：EXPORT/GLOBAL symbol {[weak]}symbol：声明的符号的名称。（区分大小写）[weak]：声明其他同名符号优先于本符号被引用。 123 AREA example，CODE，READONLY EXPORT DoAdd;申明一个全局引用的标号 DoAddDoAdd ADD R0，R0，R1 IMPORT当在一个源文件中需要使用另外一个源文件的外部可引用符号时，在被引用的符号前面，必须使用伪指令 IMPORT 对其进行声明：声明一个符号是在其他源文件中定义的。格式：IMPORT symbol{[weak]}如果源文件声明了一个引用符号，则无论当前源文件中程序是否真正地使用了该符号，该符号均会被加入到当前源文件的符号表中。symbol：声明的符号的名称。[weak]：当没有指定此项时，如果 symbol 在所有的源文件中都没有被定义，则连接器会报告错误。当指定此项时，如果 symbol 在所有的源文件中都没有被定义，则连接器不会报告错误，而是进行下面的操作。如果该符号被 B 或者 BL 指令引用，则该符号被设置成下一条指令的地址，该 B 或 BL 指令相当于一条 NOP 指令。其他情况下此符号被设置成 0。 1234AREA Init, CODE, READONLYIMPORT main …END EXTERNEXTERN 伪指令与 IMPORT 伪指令的功能基本相同，但如果当前源文件中的程序实际并未使用该符号，则该符号不会加入到当前源文件的符号表中。其它与 IMPORT 相同。 GET &amp; INCLUDEGET（或 INCLUDE）GET 伪指令用于将一个源文件包含到当前的源文件中，并将被包含的源文件在当前位置进行汇编。语法格式：GET 文件名可以使用 INCLUDE 代替 GET。GET 伪指令只能用于包含源文件，包含目标文件则需要使用 INCBIN 伪指令。 与 ARM 指令相关的宏指令宏MACRO 和 MEND 伪指令可以为一个程序段定义一个名称。这样，在汇编语言应用程序中，就可以通过这个名称来使用它所代表的程序段，即当程序做汇编时，该名称将被替换为其所代表的程序段。 1234MACRO $标号 宏名 $参数1， $参数2，….. 程序段（宏定义体）MEND $标号：为主标号，宏内的所有其它标号必须由主标号组成;宏名：宏名称，为宏在程序中的引用名;$参数 1，$参数2：宏中可以使用的参数。宏中的所有标号必须在前面冠以符号“$”。MACRO、 MEND 伪指令可以嵌套使用 12345678 MACRO ;宏定义指令$MDATA MAXNUM $NUM1,$NUM2 ;主标号，宏名，参数 语句段$MDATA.WAY1 ; 宏内标号，必须写为“主标号.宏内标号” 语句段$MDATA.WAY2 ; 宏内标号 语句段 MEND ; 宏结束指令 MEXIT 用于从宏定义中跳转出去 宏指令在 ARM 中，还有一种汇编器内置的无参数和标号的宏——宏指令。在汇编时，这些宏指令被替换成一条或两条真正的 ARM 或 Thumb 指令。ARM 宏指令有四条，分别是： ADR：小范围的地址读取宏指令； ADRL：中等范围的地址读取宏指令； LDR：大范围的地址读取宏指令； NOP：空操作宏指令。 ADR 指令用于将一个 近地址值 传递到一个寄存器中。格式：ADR{cond} &lt;reg&gt;, &lt;expr&gt;reg 为目标寄存器名称；expr 为表达式。该表达式通常是程序中一个表示存储位置的 地址标号。该宏指令的功能是把标号所表示的地址传递到目标寄存器中。汇编器在汇编时，将把 ADR 宏指令替换成一条真正的 ADD 或 SUB 指令，以当前的 PC 值减去或加上 expr 与 PC 之间的偏移量得到标号的地址，并将其传递到目标寄存器。若不能用一条指令实现，则产生错误，编译失败。 中等范围的地址读取宏指令 ADRL 类似于 ADR，但可以把更远的地址赋给目标寄存器。该指令只能在 ARM 状态下使用，在 Thumb 状态下不能使用。汇编时，ADRL 宏指令由汇编器替换成两条合适的指令。大范围的地址读取宏指令LDR 大范围的地址读取宏指令LDR格式：LDR{cond} reg,={expr | label - expr} reg：目标寄存器名称； expr：32位常数； label – expr：为地址表达式。 程序经常用这条指令把一个地址传递到寄存器reg中。汇编器在对这种指令进行汇编时，会根据指令中expr的值的大小来把这条指令替换为合适的指令。 与ARM指令的LDR的区别：伪指令LDR的参数有“=” TODO…Maybe never (:з)∠)","link":"/UESTC/ARM-Processor/Ch4-1ARM%E4%BC%AA%E6%8C%87%E4%BB%A4%E5%8F%8A%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"},{"title":"Computer Networks Overview","text":"p { text-indent: 2em; } 计算机网络在信息时代的作用计算机网络已经由通信基础设施发展成为一种重要的信息服务基础设施 因特网概述基本概念 NetWork 网络,由若干结点(Node)和链路(Link)组成 internet 互联网/互连网,多个网络可以通过路由器(Router)互联起来,形成一个覆盖范围更大的网络,互联网是由网络和网络之间互联而成的,是网络的网络(Network of Networks) Internet 因特网世界上最大的互联网络. Host 主机,连接到因特网上的计算机 `` internet 和 Internet 的区别 `` internet(互联网或互连网)是一个通用名词，它泛指多个计算机网络互连而成的网络。在这些网络之间的通信协议可以是任意的。 Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络互连而成的特定计算机网络，它采用 TCP/IP 协议族作为通信的规则，其前身是美国的 ARPANET。 任意把几个计算机网络互连起来（不管采用什么协议），并能够相互通信，这样构成的是一个互连网(internet) ，而不是互联网(Internet)。 `` Internet 发展的三个阶段 ISP(互联网服务提供商)Internet上的主机通过ISP接入Internet,之后才能互相通信;ISP可以从因特网管理机构申请到成块的 IP 地址,同时拥有通信线路以及路由器等联网设备.机构/个人缴纳一定的费用,就可以从ISP租用IP 地址,并通过ISP接入Internet。中国的主流ISP有:中国电信、中国移动、中国联通等 第一层 ISP（Tier 1 ISP）：这些是全球互联网的主干网络运营商，它们拥有遍布全球的网络基础设施。这些公司的网络通常覆盖了全球的主要地区和城市，包括北美、欧洲、亚洲、澳大利亚等。。第一层 ISP 之间通过免费的互联网络（Peering）协议进行数据交换，不需要向其他 ISP 支付费用。以下是一些知名的第一层 ISP 及其总部所在地： AT&amp;T：总部位于美国德克萨斯州达拉斯。 Verizon：总部位于美国纽约州纽约。 Level 3 Communications：总部位于美国科罗拉多州布隆菲尔德，现已被 CenturyLink（现为 Lumen Technologies）收购。 NTT Communications：总部位于日本东京。 Telia Company：总部位于瑞典斯德哥尔摩。 第二层 ISP（Tier 2 ISP）：这些 ISP 拥有自己的网络基础设施，但是不足以覆盖全球，所以它们需要购买第一层 ISP 的服务，以便将数据传输到全球的其他地方。第二层 ISP 通常会向本地或区域的客户提供服务。 第三层 ISP（Tier 3 ISP）：这些 ISP 通常没有自己的网络基础设施，而是购买第二层 ISP 的服务，然后将其转售给最终用户。第三层 ISP 通常会提供一些增值服务，如电子邮件、网页托管和虚拟专用网络（VPN）。 Internet 的标准化工作 因特网的标准化工作对因特网的发展起到了非常重要的作用。 因特网在指定其标准上的一个很大的特点是面向公众。 因特网所有的 RFC(Request For Comments)技术文档都可从因特网上免费下载； 任何人都可以随时用电子邮件发表对某个文档的意见或建议。 因特网协会 ISOC 是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。 因特网体系结构委员会 IAB，负责管理因特网有关协议的开发； 因特网工程部 IETF，负责研究中短期工程问题，主要针对协议的开发和标准化； 因特网研究部 IRTF，从事理论方面的研究和开发一些需要长期考虑的问题。 制定因特网的正式标准需要四个阶段: 因特网草案 建议标准(该阶段的标准会开始写入 RFC 文档) 草案标准 因特网标准 Internet 的组成边缘部分 由所有连接在因特网上的主机组成.这部分是用户直接使用的,用于通信和资源共享.核心部分 由大量网络和连接这些网络的路由器组成,这部分是为边缘部分提供服务的(提供连通性和交换). 路由器是一种专用计算机，但我们不称它为主机，路由器是实现分组交换的关键构建，其任务是转发收到的分组，这是网络核心最重要的部分。处在互联网边缘的部分就是连接在互联网上的所有的主机。这些主机又称为端系统(end system)端系统在功能上可能有很大的差别： 小的端系统可以是一台普通个人电脑，具有上网功能的智能手机，甚至是一个很小的网络摄像头。 大的端系统则可以是一台非常昂贵的大型计算机。 端系统的拥有者可以是个人，也可以是单位（如学校、企业、政府机关等），当然也可以是某个 ISP。 三种交换方式网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。 在网络核心部分起特殊作用的是路由器(router)。路由器是实现分组交换 (packet switching) 的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。 电路交换 Circuit Switching传统的电话两两相连,但当用户很多时,这种方式就不可行了,因此引入中间设备(电话交换机),使用电话交换机接通电话线的方式称为电路交换。 从通信资源的分配角度来看,交换就是按照某种方式动态地分配传输线路的资源 电路交换的三个步骤是:建立连接(分配通信资源),传输数据(一直占用通信资源),释放连接(归还通信资源) 而当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。这是因为计算机数据是突发式地出现在传输线路上的。所以计算机通常采用的是分组交换，而不是线路交换 分组交换 Packet Switching 报文: 信息交换的基本单位,在网络中传输的信息单位 分组: 为了传输方便,将报文划分为固定长度的数据块(分组,packet),在每一个数据段前面,加上一些由必要的控制信息组成的首部(报头),称为分组。 发送方:构造分组,发送分组 路由器:缓存分组,转发分组(分组转发) 接收方:接受分组,还原报文 在路由器的输入和输出端口之间没有直接连线,路由器处理分组的过程是:把收到的分组先放入缓存,查找转发表,找出某个目的地址的最佳输出端口,然后从缓存中取出该分组,通过输出端口转发出去. 在分组交换中，每个packet独立地通过网络进行传输。这意味着分组可以通过不同的路径到达目的地，并且可能会在不同的时间到达。在接收端，这些分组会被重新组装成原始的报文。 报文交换 Message Switching在报文交换中，整个报文作为一个单元进行发送，并且在整个传输过程中保持其完整性。报文在发送前需要完全准备好，并且在传输过程中不会被分割。这种方式的优点是简单，但缺点是如果报文很大，那么它可能会占用网络资源一段很长的时间，导致网络拥塞。报文交换主要用于早期的电报通信网，现在较少使用，通常被较先进的分组交换方式所取代。 三种交换方式对比电路交换 通信之前首先要建立连接；连接建立好之后，就可以使用已建立好的连接进行数据传送；数据传送后，需释放连接，以归还之前建立连接所占用的通信线路资源。 一旦建立连接，中间的各结点交换机就是直通形式的，比特流可以直达终点； 报文交换 可以随时发送报文，而不需要事先建立连接；整个报文先传送到相邻结点交换机，全部存储下来后进行查表转发，转发到下一个结点交换机。 整个报文需要在各结点交换机上进行存储转发，由于不限制报文大小，因此需要各结点交换机都具有较大的缓存空间。 分组交换 可以随时发送分组，而不需要事先建立连接。构成原始报文的一个个分组，依次在各结点交换机上存储转发。各结点交换机在发送分组的同时，还缓存接收到的分组。 构成原始报文的一个个分组，在各结点交换机上进行存储转发，相比报文交换，减少了转发时延，还可以避免过长的报文长时间占用链路，同时也有利于进行差错控制。 计算机网络的定义和分类计算机网络的定义计算机网络的最简单的定义是：一些互相连接的、自治的计算机的集合 互联 计算机之间可以通过有线或无线的方式进行数据通信 自治 指计算机有独立性,有自己的软硬件,可以单独允许使用 集合 至少两台计算机组成 计算机网络较好的定义是: 计算机网络主要是由一些通用的，可编程的硬件（一定包含有中央处理机 CPU）互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。 计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。 计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用）。 计算机网络的分类 按交换技术分类: 电路交换网络 报文交换网络 分组交换网络 按使用者分类: 公用网 专用网 按传输介质分类: 有线网络 无线网络 按覆盖范围分类: Wide/Metropolitan/Local/Personal Area Network 按拓扑结构分类 总线型 环型 星型 网状型 计算机网络的性能指标速率 Ratebit 比特.计算机中数据量的单位,也是信息论中信息量的单位.一个 bit 即是一个二进制数字,它只能取 0 或 1 两个值 8bit = 1Byte; KB=1024B,MB=1024KB,GB=1024MB,TB=1024GB rate 比特率,数据率.连接在计算机网络上的主机在数字信道上传送数据位数的速率,单位为 bit/s,也称为 bps(bit per second)1kbs=1000bps,1Mbps=1000kbs,1Gbps=1000Mbps 100MB 的数据块,网卡的发送速率为 100Mbps,求发送所需时间? $$ \\frac{100MB}{100Mbps}=\\frac{MB}{Mbps}=\\frac{2^{20}B}{10^6bps}=\\frac{2^{20}\\times8}{10^6s^{-1}}=8.388608s $$ 带宽 BandwidthBandwidth在模拟信号系统中,表示信号所包含的各种不同频率成分所占据的频率范围(即最高频率与最低频率之差),单位为 Hz;在计算机网络中,表示网络中的通信线路所能传输数据的能力,网络带宽表示在单位时间内从网络中的某一点到另一点所能通过的最高数据率(即网络设备所支持的最高速度),单位为 bps. 带宽的这两种表述之间有着密切的联系,一条通信线路的频带宽度越宽，理论上所能传输的最高数据率也越高。(具体可自行查阅信号与系统相关知识,例如香农定理) 吞吐量 Throughput吞吐量是指单位时间内实际通过某个网络(或信道、接口)的数据量,单位为 bps. 吞吐量受网络的带宽或或额定速率的限制(吞吐量往往小于带宽),同时还受到网络中其他因素的影响,例如网络拥塞、路由器转发速率、主机处理速度等. 时延 Delay时延时指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。网络时延由以下几部分组成 发送时延/传输时延 Transmission delay:主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。$$R=链路带宽 (bps)L=分组长度 (bits)发送分组比特流的时间 = L/R$$ 传播时延 Propagation delay电磁波在信道中传播一定的距离需要花费的时间。$$d = 物理链路的长度s = 介质的信号传播速度 (2x10^8 m/s)传播延迟 = d/s$$ 节点处理时延 Nodal processing delay主机或路由器在收到分组时要花费一定时间进行处理(检查错误位,选择输出链路),高速路由器的处理延迟为微秒级 排队时延 Queueing delay常被看作是处理时延的一部分。分组在进过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。 总时延 = 发送时延 + 传播时延 + 处理时延(处理时延 + 排队时延) 时延带宽积 Delay-Bandwidth Product时延带宽积(bit) = 传播时延(s) * 带宽(bps) 类比带宽为水管的横切面面积,传播时延理解为水流经过水管的时间,时延带宽积就是水管的容量,即水管中能够容纳的水的数量. 往返时间 Round Trip Time互联网上的信息不仅仅单方向传输而是双向交互的。因此，往返时间(RTT)也是一个重要的性能指标 利用率 Utilization利用率分为信道利用率和网络利用率 丢包率 Packet Loss Rate 计算机网络体系结构常见的计算机网络体系结构计算机网络是一个复杂的系统,早在 ARPANET 时代,就已经意识到了网络的复杂性,因此提出了分层的思想。分层将复杂问题分解为若干较小的局部问题,使得网络的设计和管理变得更加容易。 各层之间相互独立：各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）。这个和我们对开发时系统进行分层是一个道理。提高了灵活性和可替换性：每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。并且，每一层都可以根据需要进行修改或替换，而不会影响到整个网络的结构。这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。大问题化小：分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 这个和我们平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义。JavaGuide OSI(Open System Interconnection)七层模型是国际标准化组织(ISO)制定的一个通信系统的框架,它将通信系统划分为七层,每一层都有自己的功能,并且每一层的功能都是相对独立的,只与相邻的两层进行通信。但由于 OSI 模型过于复杂,实际应用中并不常用,而是使用 TCP/IP 四层模型 TCP/IP 体系结构相当于将 OSI 体系结构的物理层和数据链路层合并为了网络接口层，并去掉了会话层和表示层。 在用户主机的操作系统中，通常都带有符合 TCP/IP 体系结构标准的 TCP/IP 协议族。而用于网络互连的路由器中，也带有符合 TCP/IP 体系结构标准的 TCP/IP 协议族。只不过路由器一般只包含网络接口层和网际层。 ReferenceJavaGuide-Network-OSI and TCP/IPbilibili-计网体系结构分层思想举例bilibili-习题 1bilibili-习题 2","link":"/UESTC/ComputerNetworking/Ch1-NetworkOverview/"},{"title":"物理层 Physical Layer","text":"物理层的基本概念 Overview 物理层的任务屏蔽掉不同传输媒体和通信手段间的差异，使数据链路层感受不到这种差异 五种信道复用方式时分复用、频分复用、统计时分复用、码分复用、波分复用 三种宽带接入方式非对称数字用户线（ADSL 技术，基于电话用户线改造）、光纤同轴混合网（HFC 网）、FTTx 技术 物理层下面的传输媒体 Transmission Media传输媒体也称为传输介质或传输媒介，它就是数据传输系统中在发送器和接收器之间的物理通路。传输媒体可分为两大类，即导引型传输媒体和非导引型传输媒体。在导引型传输媒体中，电磁波被导引沿着固体媒体（铜线或光纤）传播，而非导引型传输媒体就是指自由空间，在非导引型传输媒体中电磁波的传输常称为无线传输 传输媒体不属于计算机网络体系结构的任何一层。如果非要将它添加到体系结构中，只能将其放置到物理层之下。 导引型传输媒体 Guided Transmission MediaCoaxial Cable Twisted Pair Optical Fiber Power Line 非导引型传输媒体 Unguided Transmission Media 若通信线路要通过一些高山或岛屿，有时就很难施工。即使是在城市中，挖开马路敷设电缆也不是一件很容易的事。当通信距离很远时，敷设电缆既昂贵又费时。但利用无线电波在自由空间的传播就可较快地实现多种通信。由于这种通信方式不使用上一节所介绍的各种导引型传输媒体，因此就将自由空间称为“非导引型传输媒体”。特别要指出的是，由于信息技术的发展，社会各方面的节奏变快了。人们不仅要求能够在运动中进行电话通信（即移动电话通信），而且还要求能够在运动中进行计算机数据通信（俗称上网）。因此在最近十几年无线电通信发展得特别快，因为利用无线信道进行信息的传输，是在运动中通信的唯一手段短波通信质量较差，速率较低。无限电微波通信可传输电话、图像、数据等信息。紫外线及更高波段目前还不能用于通信。卫星通信的优点是通信距离远，缺点是传播时延高，保密性差。 Radio wave Microwave Infrared Visible light百度百科-LIFI 传输方式 Transmission Mode 串行传输和并行传输 同步传输和异步传输 单工通信(单向通信)、半双工通信(双向交替通信)和全双工通信(双向同时通信) 串行和并行传输 Serial and Parallel Transmission串行传输数据是一个比特一个比特依次发送的，因此在发送端与接收端之间，只需要一条数据传输线路即可并行传输一次发送 n 个比特，因此，在发送端和接收端之间需要有 n 条传输线路并行传输的优点是比串行传输的速度 n 倍，但成本高数据在传输线路上的传输采用是串行传输，计算机内部的数据传输常用并行传输 同步和异步传输 Synchronous and Asynchronous Transmission同步传输 数据块以稳定的比特流的形式传输。字节之间没有间隔 接收端在每个比特信号的中间时刻进行检测，以判别接收到的是 0 还是 1 由于不同设备的时钟频率存在一定差异，不可能做到完全相同，在传输大量数据的过程中，所产生的判别时刻的累计误差，会导致接收端对比特信号的判别错位,所以要使收发双发时钟保持同步 异步传输 以字节为单位传输，字节之间的时间间隔不固定 接收端仅在每个字节的起始处对字节内的 bit 实现同步 通常再每个字节的前后加上起始位和结束位 单工、半双工和全双工通信 Simplex, Half-Duplex, and Full-Duplex Communication信道[GlossaryOfNetwork#Physical Layer]和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此，一条通信电路往往包含一条发送信道和一条接收信道。从通信的双方信息交互的方式来看，可以有以下三种基本方式： 单工通信（Simplex Communication）又称单向通信,即只能有一个方向的通信而没有反方向的交互。无线电广播或有线电以及电视广播就属于这种类型 半双工通信（Half-Duplex Communication）又称双向交替通信,通信的双发可以交替地发送和接收信息，但不能同时进行。对讲机就是这种通信方式 全双工通信（Full-Duplex Communication）又称双向同时通信,通信的双方可以同时发送和接收信息。电话就是这种通信方式 单向通信只需要一条信道，而双向交替通信或双向同时通信则需要两条信道（每个方向各一条）双向同时通信的传输效率最高 编码和调制 Encoding and Modulation编码Encoding 将信息转化为特定格式以便传输和存储的过程。调制Modulation 将数字信号转化为模拟信号的过程，使得信号能够在传输介质中传播 编码方式 Encoding 不归零编码 Non-Return-to-Zero (NRZ) Encoding正电平与负电平分别表示 1 和 0(或 0 和 1)，不归零编码中的电平不会在码元时间内归零，即在整个码元时间内，电平不会出现零电平连续的两个 1 或 0 会导致电平保持不变，接收端如何判断这是两个码元还是一个码元呢？这需要额外一根传输线来传输时钟信号，使发送方和接收方同步，接收方按时钟信号的节拍来逐个接收码元。但是对于计算机网络，宁愿利用这根传输线传输数据信号，而不是传输时钟信号，因此不归零编码在计算机网络中并不常用 归零编码 Return-to-Zero (RZ) Encoding每个码元传输结束后信号都要”归零”,接收方只要在信号归零后进行采样即可，不需要单独的时钟信号。这相当于把时钟信号用归零的方式编码到数据之内,这称为”自同步”。但这种编码方式浪费了大量带宽 曼彻斯特编码 Manchester Encoding在每个码元的中间时刻，电平都会发生变化，这样接收方就可以根据这个变化来判断码元的开始和结束。曼彻斯特编码的优点是不需要单独的时钟信号，而且不会浪费带宽，因此在计算机网络中应用较多,传统以太网就是使用曼彻斯特编码的 差分曼彻斯特编码 Differential Manchester Encoding每位中间的跳变仅提供时钟定时，而用每位开始时有无跳变表示“0”或“1”，有跳变为“0”，无跳变为“1”。 调制方式 Modulation调试是将数字信号转化为模拟信号的过程，使得信号能够在传输介质中传播。模拟信号通常使用连续的变化来表示信息，如正弦波或方波。调制技术可以将数字信号转化为特定频率范围内的模拟信号，以方便传输和接收。 基本调制方式 Basic Modulation三种基本调制方式： 调频 Frequency Modulation (FM) 调幅 Amplitude Modulation (AM) 调相 Phase Modulation (PM) 混和调制 Hybrid Modulation正交振幅调制 QAMQAM（Quadrature Amplitude Modulation）是一种混合调制技术，它是将调幅和调相结合起来的一种调制方式。QAM 信号是由两路正交的调制信号叠加而成的，一路是调幅信号，另一路是调相信号。QAM 信号的频谱效率很高，因此在数字通信中应用广泛。 信道的极限容量 Channel Capacity信号失真 Signal Distortion Nyquist Theorem and Shannon Theorem 信道复用 Channel Multiplexing[Ch3-2DataLinkLayer#静态划分信道 Static Channel Allocation] 复用(multiplexing)是通信技术中的基本概念。计算机网络中的信道广泛地使用各种复用技术。可分为频分复用、时分复用、波分复用及码分复用等 将一个物理信道根据时间、频率、空间等资源划分为多个虚拟信道。这么做的好处有二：一是减少管道的个数，为运营商减少线路成本；二是提升单通道的容量。 Reference:【计算机网络系列】物理层：信道复用技术（频分复用、时分复用、波分复用及码分复用）图文并茂——频分复用、时分复用、码分复用、复用和多址的区别","link":"/UESTC/ComputerNetworking/Ch2-PhysicalLayer/"},{"title":"数据链路层 Datalink Layer Ⅰ","text":"数据链路层概述 Overview节点 Node 运行链路层协议的任何设备链路 Link 指从一个结点到相邻结点的一段物理线路，中间没有其他的交换结点数据链路 Data Link 把实现通信协议的硬件和软件加到链路上，就构成了数据链路帧 Frame 是数据链路层的传输单位，由数据部分和控制部分组成 The Service Provide by the Link Layer Framing 封装成帧 Link access 链路接入 Reliable delivery 可靠交付 Error detection and correction 差错检测和纠正 局域网属于数据链路层局域网虽然是个网络。但我们并不把局域网放在网络层中讨论。这是因为在网络层要讨论的是多个网络互连的问题，是讨论分组怎么从一个网络，通过路由器，转发到另一个网络。而在同一个局域网中，分组怎么从一台主机传送到另一台主机，但并不经过路由器转发。从整个互联网来看，局域网仍属于数据链路层的范围 从层次上来看数据的流动仅从数据链路层观察帧的流动 数据链路层使用的信道数据链路层属于计算机网路的低层。数据链路层使用的信道主要有以下两种类型： 点对点信道 point to point link 广播信道 broadcast link 数据链路层的三个重要问题 封装成帧 Framing 在数据前后添加帧头和帧尾，用于标识帧的开始和结束 差错检测 Error Detection 传输过程中可能会产生比特差错,通过帧尾中的检错码检测帧中是否有误码 可靠传输 Reliable delivery 如果接收方收到有误码的帧，会丢弃这个帧。如果数据链路层向其上层提供的是不可靠服务，那么丢弃后不会再有更多措施;如果是可靠服务则需要其他措施，来确保接收方主机重新收到帧的正确副本 对于广播信道的数据链路层,还有以下问题需解决 确认帧的接收 Link Access 主机如何确认帧是发送给自己的? 可以通过 MAC 地址来确认 数据碰撞 Collide 如果两个主机同时发送数据，可能会发生数据碰撞 随着技术的发展，交换技术的成熟，在有线（局域网）领域使用点对点链路和链路层交换机的交换式局域网取代了共享式局域网;在无线局域网中仍然使用的是共享信道技术 Where Is the Link Layer Implemented?链路层的主体部分在网络适配器（network adapter）中实现，网络适配器有时也称为网络接口卡（Network Interface Card，NIC），一个典型的主机体系结构如下图所示： 封装成帧 Framing封装与解包 Encapsulation&amp;De-encapsulation封装(Encapsulation)是低层协议从高层协议接收数据，然后将数据放入其帧的数据部分的过程。因此，封装是把一种数据包封装另一种数据包的过程。解包(Decapsulation)与之相反,高层协议从低层协议接收数据，然后逐层将数据从帧的数据部分取出的过程。 Generally, Encapsulation is a process by which a lower-layer protocol receives data from a higher-layer protocol and then places the data into the data portion of its frame. Thus, encapsulation is the process of enclosing one type of packet using another type of packet. 封装成帧(Framing)指数据链路层接受上层交付的协议数据单元,并为其添加帧头和帧尾,使之成为帧的过程 发送方的数据链路层将上层交付下来的协议数据单元封装成帧后，通过物理层将构成帧的 bits 转换成电信号交给传输媒体，接收方的数据链路层再从物理层交付的比特流中提取出 frames解包过程如何提取 frames? PPP 帧 依据帧头和帧尾的标志符确定帧的开始和结束(帧定界)从而提取出 frames 以太网 V2 的 MAC 帧 根据前导码(1 字节的帧开始定界符,7 字节的前同步码)来定界,帧间间隔为 96bit 的时间 前同步码:作用是使接收方的时钟与发送方的时钟同步 帧开始定界符:标志帧的开始 以太网规定帧间间隔为 96bit 的时间,因此 MAC 帧不需要帧结束定界符 透明传输 Transparent transmission透明传输是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西。 当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使收方不会将这样的数据误认为是某种控制信息。这样才能保证数据链路层的传输是透明的。 解决办法 字符填充/字节填充 发送方扫描数据,当数据中出现与帧定界符相同的比特串时,在其前面插入转义字符 ESC; 接受方将遇到的第一个帧定界符认为是帧的开始 遇到转义字符时,则知道后面的比特串虽与帧定界符相同,但并非帧定界符而是数据,因此剔除转义字符 ESC 然后将其后的字符作为数据处理 当再次遇到帧定界符时,认为帧结束ps:遇到与转移字符相同的比特串时,则在转义字符前面再插入转义字符 比特填充 为了提高帧的传输效率，应当使帧的数据部分的长度尽可能大些。考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的数据部分的长度上限，即最大传送单元 MTU(Maximum Transfer Unit) 差错检测 Error Detection差错检测的基本概念实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：1可能会变成0 ，而0也可能变成1,这称为比特差错。在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率BER(Bit Error Rate)使用差错检测码来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一帧校验序列 FCS(Frame Check Sequence)是差错检测码的一种，用于检测帧中是否有误码,通常使用循环冗余校验 CRC来计算 FCS 奇偶校验 Parity Check奇偶校验在待发送的数据后面添加 1 位奇偶校验位，使整个数据（包括所添加的校验位在内）中1的个数为奇数（奇校验）或偶数（偶校验）。如果有奇数个bit 发生误码，则奇偶性发生变化，可以检查出误码；如果有偶数个bit 发生误码，则奇偶性不发生变化，不能检查出误码（漏检）由于漏检率高，奇偶校验在实际中很少使用 二维奇偶校验 Two-Dimensional Parity Check假设传输信息 D 有 d 位，在偶校验方案中，会增加一个附加的比特，使得这 d+1 个比特中 1 的总数是偶数。由于普通的奇偶校验方式检错能力有限，所以产生了二维的奇偶校验。D 中的 d 个比特被划分为 i 行 j 列，对每行每列计算奇偶值，产生的 i+j+1 个奇偶比特构成了链路层帧的差错检测比特。 校验和 Checksumming Method因特网检验和（Internet checksum）基于这种方法，即数据的字节作为 16 比特的整数对待并求和。 循环冗余校验 Cyclical Redundancy Check收发双方约定好一个生成多顶式G(x);发送方基于待发送的数据和生成多顶式计算出差错检测码(冗余码)，将其添加到待传输数据的后面一起传输接收方通过生成多项式来计算收到的数据是否产生了误码； 检错码只能检测出帧在传输过程中出现了差错，但井不能定位错误，因此无法纠正错误要想纠正传输中的差错，可以使用冗余信息更多的纠错码进行前向纠错,但纠错码的开销比较大，在计算机网络中较少使用。循环冗余校验有很好的检错能力,漏检率非常低，虽然计算比较复杂，但非常易于用硬件实现，因此被广泛应用于数据链路层。在计算机网络中通常采用检错重传方式来纠正传输中的差错，或者仅仅是丢弃检测到差错的帧，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。 可靠传输 Reliable TransmissionOverview可能发送的差错 比特错误 使用差错检测技术（例如循环冗余校验 CRC，接收方的数据链路层就可检测出帧在传输过程中是否产生了误码（比特错误）。一般情况下，有线链路的误码率比较低，为了减小开销，井不要求数据链路层向上提供可靠传输服务。即使出现了误码，可靠传输的问题由其上层处理。无线链路易受干扰，误码率比较高，因此要求数据链路层必须向上层提供可靠传输服务。 分组丢失 路由器输入队列快满了，主动丢弃收到的分组 分组时序 数据并未按照发送顺序依次到达接收端 分组重复 由于某些原因，有些分组在网络中滞留了，没有及时到达接收端，这可能会造成发送端对该分组的超时重发，重发的分组到达接收端，但一段时间后，滞留在网络的分组也到达了接收端，这就造成分组重复的传输差错 三种可靠传输方式 停止等待协议 SW 回退 N 帧协议 GBN 选择重传协议 SR Refhttps://www.tkn.tu-berlin.de/teaching/rn/animations/gbn_sr/https://zhuanlan.zhihu.com/p/126312611[Ch5-1TransportLayer#Principles of Reliable Data Transfer] 停止等待协议 Stop-and-Wait Protocol 确认与否认 首先，每次发送方都只发一个数据分组，接收方对数据分组进行差错检测，检验是否有误码; 如果没有误码，接收方发送ACK确认分组,发送方收到ACK确认分组后，发送方才能发送下一个数据分组。 如果有误码,接收方发送NAK否认分组并丢弃当前分组,发送方收到NAK否认分组后，重发数据分组。 超时重传 接收方收不到数据分组，就不会发送ACK或NAK。如果不采取其他措施，发送方就会一直处于等待接收方ACK或NAK的状态。数据分组在传输过程中有可能遇到已经满了的路由器等情况，此时路由器会丢失该分组，如此便会产生数据分组被丢失，发送方等不到接收方的ACK或者NAK,导致发送方陷入等待状态。 为解决该问题，可以在发送方发送完一个数据分组时，启动一个超时计时器。若到了超时计时器所设置的重传时间而发送方仍收不到接收方的任何ACK或NAK，则重传原来的数据分组，这就叫做超时重传。 超时计时器设置的重传时间应仔细选择。一般可将重传时间选为略大于从发送方到接收方的平均往返时间;在数据链路层点对点的往返时间比较确定，重传时间比较容易设定。然而在运输层，由于端到端往返时间非常不确定，设置合适的重传时间有时并不容易。 确认丢失 实际过程中,接收方发送的ACK或NAK也可能会丢失,发送方收不到接收方的ACK或NAK，触发超时计时器,会重传数据分组。如果接收方成功接收了数据分组，但发送ACK的分组丢失了，发送方会重传数据分组，这样会导致接收方收到重复的数据分组。 为解决该问题,我们用一个比特位给每个数据分组一个序号（0 或 1），当重新传输数据分组的时候，接收方检测到这个数据分组的序号,如果刚才的数据分组的序号相同就丢弃该数据分组，否则接收该数据分组。然后发送ACK确认分组。 这里为什么可以只用0和1呢，主要还是因为停止等待协议的特性，即每发送完一个数据分组便等待发送方的ACK或NAK，只要保证每发送一个新的数据分组，其发送序号与上次发送的数居分组的序号不同就可以了，因比用一个比特来编号就够了。 确认迟到 为了让发送方能够判断所收到的ACK分组是否是重复的，需要给ACK分组编号，所用比特数量与数据分组编号所用比特数量一样。数据链路层一般不会出现ACK分组迟到的情况，因此在数据链路层实现停止．等待协议可以不用给ACK分组编号。 信道利用率 [Ch1-NetworkOverview#利用率 Utilization] 回退 N 帧协议 Go-Back-N Protocol在停止-等待协议中，随着 RTT 的变大，信道的利用率也会变低（卫星通信），解决该问题的方法是：不以停等方式运行，允许发送方发送多个分组而无须等待确认。因为许多从发送方向接收方输送可以看成是填充到一条流水线中，故这种技术被称为流水线（pipeline），下图为停等和流水线发送示意图： 在回退 N 步协议中，将基序号（base）定义为最早未确认分组的序号，将下一个序号（nextseqnum）定义为最小的未使用序号，则将序号范围分割成如下 4 段： GBN 协议也常被称为滑动窗口协议(sliding-window protocol)中，窗口大小 N 决定了可以在没有确认的情况下发送的数据包的最大数量。这个窗口会随着数据包的确认而向前滑动。限制窗口大小的原因有两个，一个是流量控制，防止接收者被发送者的大量数据包淹没；另一个是 TCP 拥塞控制 在 GBN 协议中，接收方丢弃所有失序分组。这种方法的优点是接收缓存简单，即接收方不需要缓存任何失序分组。因此，虽然发送方必须维护窗口的上下边界及 nextseqnum在该窗口的位置，但接收方需要维护的唯一信息就是下一个按序接收的分组序号。运行中的 GBN 如下图所示： Notes 如果某个报文段没有被正确接收，则从这个报文段到后面的报文段都要重新发送。 采用累计应答的方式。例如接收端返回 ACK=3，则证明报文段 3 以及之前的报文段都被正确接收。(GBN 如何保证 3 之前的数据被正确接收了呢？在 GBN 的接收窗口$W_{R}=1$,即按顺序逐个接受数据,因此接收方只能按序接受正确到达的数据分组) 接收端不对失序到达的分组进行缓存。 回退帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数员，是一种连续 ARQ 协议， 在协议的工作过程中发送窗囗和接收窗囗不断向前滑动，因此这类协议又称为滑动圊囗协议。 缺点:如果发生错误，GBN 协议会丢弃后续的所有包，即使它们已经到达并且没有错误。这可能导致效率低下，特别是在通信线路质量不好的情况下 FSM 选择重传协议 Selective Repeat Protocol GBN 协议的接收窗口尺寸 WR 只能等于 1 ，因此接收方只能按序接收正确到达的数据分组。一个数据分组的误码会导致其后续多个数据分组不能被接收方按序接收而丢弃（尽管它们无乱序和误码）。这必然会造成发送方对这些数据分组的超时重传，显然这是对通信资源的极大浪费。为了进一步提高性能，可设法只重传出现误码的数据分组。因此，接收窗口的尺寸不应再等于 1 （而应大于 1 ）以便接收方先收下失序到达但无误码井且序号落在接收窗口内的那些数据分组，等到所缺分组收齐后再一井送交上层。这是选择重传协议。 $$ 发送窗口尺寸W_{T}必须满足: 1 < W_{T} \\lt 2^{n-1}; n为分组中的bit数 \\\\ 若W_{T} = 1,则退化为停止等待协议;若W_{T} \\gt 2^{n-1},则会造成接收方无法辨别新旧数据分组的问题\\\\ 接收窗口尺寸W_{R}必须满足: 1 < W_{R} \\leq W_{T}\\\\ 若W_{R} = 1,则退化为回退 N 帧协议;W_{R} \\gt W_{T}没有意义 $$ 点对点协议 Point to Point Protocol点对点协议 PPP（Point-to-Point Protocol）是目前使用最广泛的点对点数据链路层协议 PPP 协议是因特网工程任务组 IEIF 在 1992 年制定的。经过 1993 年和 1994 年的修订，现在的 PPP 协议已成为因特网的正式标准[RFC1661，RFC1662] 数据链路层使用的一种协议，它的特点是：简单；只检测差错，而不是纠正错；不使用序号，也不进行流量控制；可同时支持多种网络层协议","link":"/UESTC/ComputerNetworking/Ch3-1DataLinkLayer/"},{"title":"数据链路层 Datalink Layer Ⅱ","text":"点对点协议 Point to Point Protocol一般的用户接入互联网的方式: 连接到某个因特网服务提供者 ISP(中国电信,中国移动.etc),用户计算机获取到 ISP 所分配的合法 IP 地址后,才能成为因特网的一员;PPPoE(PPP over Ethernet)协议在家庭和小型企业中被广泛用于连接到互联网服务提供商 PPP（Point-to-Point Protocol）是一种网络协议,通常用于在两点之间建立直接连接,例如计算机和互联网服务提供商（ISP）的连接。PPP 可以在各种类型的物理网络上运行,包括串行线、电话线、同轴电缆、全双工光纤传输线路或无线连接等。 Components of PPPThe Link Control Protocol (LCP): responsible for establishing, configuring, and testing the link between the two devices. It negotiates link parameters like the maximum frame size and compression type while monitoring the link for errors and dropsThe Authentication Protocol (AP): responsible for verifying the identities of the two devices using a range of authentication methods, including passwords, digital certificates, and biometricsThe Network Control Protocol (NCP): responsible for negotiating the network layer protocol used to transmit data over the connection, supporting a variety of network layer protocols such as IP, IPX, and AppleTalk! PPP 的主要特性和功能 封装数据：PPP 可以封装 IP,IPX 等网络层协议的数据包,使它们可以在点对点链接上传输。 身份验证：PPP 支持 PAP（Password Authentication Protocol）和 CHAP（Challenge Handshake Authentication Protocol）等身份验证协议,这些协议可以在建立连接时验证用户的身份。 链接控制：PPP 使用 LCP（Link Control Protocol）来建立、配置和测试数据链路连接。 网络控制：PPP 使用 NCP（Network Control Protocol）来建立和配置不同的网络层协议。 错误检测：PPP 帧包含一个校验和字段,用于错误检测。 多协议支持：PPP 支持多种网络层协议,这使得它可以在各种不同的网络环境中使用。 PPP 是一种灵活且广泛使用的协议,特别适用于拨号和 DSL 连接。它是许多互联网用户连接到 ISP 的基础。它的特点是：简单；只检测差错,而不是纠正差错；不使用序号,也不进行流量控制；可同时支持多种网络层协议,是目前使用最广泛的点对点数据链路层协议 PPP 帧格式 PPP 透明传输面向字节的异步链路：字节填充法(插入转义字符)面向比特的同步链路：比特填充法(插入比特 0) 差错检测能够对接收端收到的帧进行检测,并立即丢弃有差错的帧。因此 PPP 向上层提供的是不可靠传输服务 工作状态 Bob initiates a connection by dialing his ISP’s phone number Bob’s modem establishes a physical connection with the ISP’s modem over a phone line The two modems exchange LCP packets for negotiating the connection parameters. Parameters are, for instance, the maximum frame size and compression type They agree to a maximum frame size of 1500 bytes with no compression After the LCP negotiation, Bob’s modem and the ISP’s modem authenticate each other’s identities The ISP uses the Challenge-Handshake Authentication Protocol (CHAP) to verify Bob’s identity. Bob, however, employs the Password Authentication Protocol (PAP) to verify the ISP’s identity Once authentication is complete, the two modems exchange NCP packets. So, they determine which network layer protocol will be used to transmit data over the connection They agree to use the TCP/IP protocol suite With the NCP negotiation complete, we can transmit the data between Bob’s computer and the internet using the TCP/IP protocol suite through encapsulated frames transmitted over the PPP connection Finally, when Bob finishes using the internet, he can terminate the PPP connection by disconnecting the modem or logging off the ISP’s **server*PPP 协议已不是纯粹的数据链路层的协议,它还包含了物理层和网络层的内容* 媒体接入控制 Media Access ControlMAC 引入局域网的数据链路层 局域网最主要的特点是： 网络为一个单位所拥有； 地理范围和站点数目均有限。 局域网具有如下主要优点： 具有广播功能,从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。 便于系统的扩展和逐渐地演变,各设备的位置可灵活调整和改变。 提高了系统的可靠性、可用性和残存性。 数据链路层的两个子层为了使数据链路层能更好地适应多种局域网标准,IEEE 802 委员会就将局域网的数据链路层拆成两个子层： 逻辑链路控制 LLC (Logical Link Control)子层； 媒体接入控制 MAC (Medium Access Control)子层。 与接入到传输媒体有关的内容都放在 MAC 子层,而 LLC 子层则与传输媒体无关。不管采用何种协议的局域网,对 LLC 子层来说都是透明的。 为什么要媒体接入控制（介质访问控制）？共享信道带来的问题若多个设备在共享信道上同时发送数据,则会造成彼此干扰,导致发送失败。 媒体接入控制(MAC)可分为 1. 静态信道划分 Static Channel Allocation静态信道划分（Static Channel Allocation）是一种通信网络中的资源分配策略,它将可用的频谱资源事先固定地分配给各个用户或者信道。这种方式下,即使某个用户或信道当前没有数据需要传输,其分配的资源也不能被其他用户或信道使用,因此可能导致资源的浪费。谨常在无线网络的物理层中使用 SCA 有三种主要的技术,在这些技术中,每个用户或信道都被分配到一个特定的频率带宽、时间槽或编码。 频分多址 FDMA,Frequency Division Multiple Access 时分多址 TDMA,Time Division Multiple Access 码分多址 CDMA,Code Division Multiple Access 2. 动态接入控制 Dynamic Access Control 动态接入控制（Dynamic Access Control）是一种网络通信中的资源分配策略,它根据网络的实时需求动态地分配资源。与静态信道划分（如 FDMA、TDMA、CDMA）相比,动态接入控制可以更有效地利用可用资源。在动态接入控制中,如果一个用户没有数据需要传输,其分配的资源可以被其他用户使用,从而避免了资源的浪费。这种方式需要一个接入控制协议来确定哪些用户可以在哪个时刻使用网络资源。 受控接入 Controlled Access(已经被淘汰) 集中控制 Centralized Control 分散控制 Distributed Control 随机接入 Random Access ALOHA CSMA/CD CSMA/CA MAC 定义Media access control, medium access control or simply MAC, is a specific network data transfer policy. It determines how data transmits through a regular network cable. The protocol exists to ease data packets’ transfer between two computers and ensure no collision or simultaneous data transit occurs. The medium access control – commonly referred to as the MAC protocol – is, effectively, a sublayer or MAC sublayer that controls hardware responsible for the communication with a wired, wireless or optical transmission medium. The MAC sublayer is part of the two sublayers scheme: data link layer. The other part of the data link layer is the logical link control (LLC) sublayer. The LLC sublayer offers multiplexing and flow control for the logical link, and the MAC sublayer acts as the interface between the LLC sublayer and the physical layer within a transmission medium. 媒体访问控制（MAC）是数据通信协议中一种子层,它是数据链路层的一部分。MAC 子层的主要职责是控制设备如何访问网络介质（例如以太网,Wi-Fi）,以便进行有效的信息传输。MAC 地址是一个设备网络接口的唯一标识符。它通常由六组两位十六进制数字组成,例如：00:0A:95:9D:68:16。每个网络设备的 MAC 地址都是全球唯一的,由设备制造商在生产时分配。MAC 地址在网络通信中起着关键作用。当一个设备需要发送数据包到另一个设备时,它会使用目标设备的 MAC 地址来定位它。这是在同一局域网（LAN）内进行通信的基础。 静态划分信道 Static Channel Allocation 复用 (Multiplexing) 是通信技术中的一个重要概念。复用就是通过一条物理线路同时传输多路用户的信号。当网络中传输媒体的传输容量大于多条单一信道传输的总通信量时,可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽。 频分复用 FDM (Frequency Division Multiplexing) 将传输线路的频带资源划分成多个子频带,形成多个子信道,各子信道间需要留出隔离频带,以免造成子信道间的十扰。当多路信号输入一个多路复用器时,这个复用器将每一路信号调制到不同频率的载波上。接收端由相应的分用器通过滤波将各路信号分开,将合成的复用信号恢复成原始的多路信号。 时分复用 TDM (Time Division Multiplexing) 时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。 每一个用户所占用的时隙是周期性地出现（其周期就是 TDM 帧的长度）的。 TDM 信号也称为等时 (isochronous) 信号。 时分复用的所有用户在不同的时间占用同样的频带宽度。 波分复用 WDM (Wavelength Division Multiplexing)波分复用就是光的频分复用,使用一根光纤来同时传输多个光载波信号;光信号传输一段距离后会衰减,所以要用掺铒光纤放大器 EDFA(Erbium-Doped Fiber Amplifier) 放大光信号 码分复用 CDM (Code Division Multiplexing)码分复用 CDM 是另一种共享信道的方法。实际上,由于该技术主要用于多址接入,人们更常用的名词是码分多址 CDMA(Code Division MuItipIe Access) 同理,频分复用 FDM 和时分复用 TDM 同样可用于多址接入,相应的名词是频分多址 FDMA(Frequency Division Multiple Access) 和时分多址 TDMA(Time Division Multiple Access);与 FDM 和 TDM 不同,CDM 的每一个用户可以在同样的时间使用同样的频带进行通信。由于各用户使用经过特殊挑选的不同码型,因此各用户之间不会造成干扰。CDM 最初是用于军事通信的,因为这种系统所发送的信号有很强的抗干扰能力,其频谱类似于白噪声,不易被敌人发现。随着技术的进步,CDMA 设备的价格和体积都大幅度下降,因而现在已广泛用于民用的移动通信中 复用与多址的概念。可简单理解如下： 复用(Multiplexing)是将单一媒体的频带资源划分成很多子信道,这些子信道之间相互独立,互不干扰。从媒体的整体频带资源上看,每个子信道只占用该媒体频带资的一部分。 多址(Multiple Access),更确切地应该称为多点接入,处理的是动态分配信道给用户;这在用户暂时性占用信道(如移动通信)的应用中是必须的。在信道永久性地分配给用户(如无线广播等)的应用中,多址是不需要的 某种程度上,FDMA,TDMAS CDMA 可以分别看成是 FDM,TDM,CDM 的应用 在 CDMA 中,每一个比特时间再划分为 m 个短的间隔,称为码片 (Chip);通常 m 的值是 64 或 128 为了简单起见,在后续的举例中,我们假设 m 为 8; 使用 CDMA 的每一个站被指派一个唯一的 m bit 码片序列 (Chip Sequence); 一个站如果要发送比特 1 ,则发送它自己的 m bit 码片序列； 一个站如果要发送比特 0 ,则发送它自己的 m bit 码片序列的二进制反码；指派给（ DMA 系统中某个站点的码片序列为 00011011发送比特 1:发送自己的码片序列 00011011发送比特 0:发送自己的码片序列的二进制反码 11100100为了方便，我们按惯例将码片序列中的 0 写为-1, 将 1 写为+ 1 。则该站点的码片序列是(-1 -1 -1 + 1 + 1 -1 + 1 + 1) 码片序列需要满足的条件 每个站的 Chip Sequence 不能相同,实际上常采用伪随机码片序列,这样可以使得码片序列之间的相关性很小,从而减小干扰； 每个站的 Chip Sequence 必须相互正交,令向量 S 表示站 S 的码片序列，令向量 T 表示其他任何站的码片序列。两个不同站 S 和 T 的码片序列正交，就是向量 S 和 T 的规格化内积为 0 ： 满足的 4 个条件如公式所示 $$ \\begin{array}{ll} S \\cdot T \\equiv \\frac{1}{m} \\sum_{i=1}^{m} S_{i} T_{i}=0 & S \\cdot \\bar{T} \\equiv 0 \\\\ S \\cdot S \\equiv \\frac{1}{m} \\sum_{i=1}^{m} S_{i} S_{i}=\\frac{1}{m} \\sum_{i=1}^{m} S_{i}^{2}=\\frac{1}{m} \\sum_{i=1}^{m}( \\pm 1)^{2}=1 & S \\cdot \\bar{S} \\equiv-1 \\end{array} $$ Examples 动态接入控制 Dynamic Access Control","link":"/UESTC/ComputerNetworking/Ch3-2DataLinkLayer/"},{"title":"网络层数据平面 Network Layer:Data Plane","text":"Overview of Network Layer网络层提供的功能从发送方主机传输报文段到接收方主机发送方主机封装报文段(segments)为数据报(datagrams)给链路层接收方主机递交报文段给传输层在每个主机、路由器上都需要运行网络层协议路由器会检查通过它的所有 IP 数据报的头部字段，然后根据目的 IP 地址对数据报进行转发 Forwarding and Routing: The Data Plane and Control Plane 转发(forwarding): 当数据包到达路由器的输入链路时，路由器必须将数据包移动到适当的输出链路。例如，从主机 H1 到路由器 R1 的数据包必须被转发到通往 H2 的路径上的下一个路由器。将分组从路由器的输入端口转移到正确的路由器输出端口(主要利用硬件) 路由(routing): 网络层必须确定数据包从发送者流向接收者时所走的路由 route 或路径 path,计算这些路径的算法被称为路由算法。例如，路由算法会确定数据包从 Host1 流向 Host2 的路径。路由在网络层的控制平面 Control Plane 中实现(主要利用软件) 转发指的是路由器在本地将数据包从输入链路接口转移到适当的输出链路接口的动作。转发在非常短的时间范围内发生（通常是几纳秒），因此通常在硬件中实现。路由指的是确定数据包从源到目的地的端到端路径的网络范围内的过程。路由在更长的时间范围内发生（通常是几秒钟），通常在软件中实现。 Control Plane: The Traditional Approach每个路由器都有单独的路由算法组件，路由器之间通过交互来实现控制平面由路由算法决定了路由器转发表的内容 Control Plane: The SDN Approach一个分离的（通常是远程的）控制器和路由器本地的控制代理 (local control agents，CAs) 交互，由 remote controller 计算并分发每个路由器要使用的转发表远程控制器可能在具有高可靠性和冗余的远程数据中心中实现，并可能由 ISP 或某第三方管理，因为计算转发表并与路由器交互的控制器是在软件中实现的，故被称为软件定义网络(Software Defined Networking, SDN) Network Service Model网络服务模型（network service model）定义了分组在发送与接收端系统之间的端到端运输特性。 某些分组交换机称为链路层交换机（link-layer switch），基于链路层帧中的字段值做出转发决定，这些交换机因此被称为链路层设备；其他分组交换机称为路由器（router），基于网络层数据报中的首部字段值做出转发决定，路由器因此是网络层设备。 网络层可能提供的服务 针对单个的数据报 datagram，可提供以下服务 Guaranteed delivery 确保交付：确保分组到达目的地。 Guaranteed delivery with bounded delay：最大时延的保证，例如确保主机到主机的时延不超过 40ms 针对数据包流(flow of datagrams)，可提供的服务有 In-order packet delivery 有序分组交付：按发送顺序到达。 Guaranteed minimal bandwidth 确保最小带宽：当发送主机以低于特定比特率的速率发送比特，分组不会丢失，在一定时延到达。 Security 安全性：网络层可以在源端对所有数据报进行加密，并在目的端进行解密，从而为所有传输层的段提供保密性。 互联网的网络层提供了一种单一的服务，称为尽力而为服务(best-effort service)。在尽力而为服务中，数据包既不能保证按照发送的顺序被接收，也不能保证最终被送达。没有对端到端延迟的保证，也没有最小带宽的保证。 QOS QoS 模型 优点 缺点 Best Effort 1. 简单，不需要复杂的网络策略或协议。2. 允许数据包在网络中自由流动，无需预设路径。3. 在无拥塞的情况下，可以提供可靠的服务。4. 允许最大的网络效率和成本效益。 1. 不允许资源预留或任何其他与网络特殊处理相关的机制。2. 对于实时（RT）流量需求的新兴应用，表现不佳。3. 当网络资源不足以满足 QoS 应用程序的需求时，不应使用此模型。 Integrated Services (IntServ) 1. 允许网络流量的个性化处理。2. 使用服务特定的预留协议为特定的数据流预留资源。3. 可以准确预测并保证定义的性能水平。 1. 不可扩展，需要比其他 QoS 模型（如 DiffServ）更多的管理控制。2. 实施此模型需要网络中存在 IntServ 能力的路由器，并使用 RSVP 进行端到端的资源预留。3. 由于 RSVP 是一个软状态协议，持续的信令负载只会加剧可扩展性问题。 Differentiated Services (DiffServ) 1. 提供一种基于类别的服务，某些类别的流量可以优先于其他流量类别得到处理。2. 适用于大型网络，因为它不需要为每个流量保留网络资源。 1. 不能为每个流量提供精确的 QoS 保证。2. 对于需要高精度 QoS 保证的应用，可能不是最佳选择。 虚电路 数据报 网络提供网络层的无连接 服务 虚电路 网络提供网络层的 连接 服务 类比于 TCP/UDP 的面向连接/ 无连接的传输层服务： 任何网络中的网络层只提供两种服务之一，不会同时提供。 虚电路网络：提供连接服务。 数据报网络：提供无连接服务。 传输层：面向连接服务在网络边缘的端系统中实现。 网络层：面向连接服务在端系统及网络核心的路由器中实现。 定义虚电路(Virtual Circuits)“源主机-目的主机路径的行为类似于电话网络的行为”,性能上类似,沿着源-目的路径的网络行为类似。 在数据传输之前，需要为每个呼叫建立连接 每个分组携带 VC 标识符(不是目的主机地址) 位于“源-目的路径”上的每个路由器会维护经过它的每条连接的“状态” 链路和路由器的资源(带宽、缓存)可以被分配给 VC(专用资源) 特点虚电路网络源于电话产业界（采用“真正”电路）。呼叫建立及每次呼叫的状态要在网络中的路由器上维持，比面向数据报的网络要复杂。网络功能复杂，端系统设备简单 What’s Inside a Router?对于一般的路由器来说，它主要包含四个部分 输入端口 (Input Ports) 执行物理层功能，终止路由器上的入站物理链接。 执行链路层功能，与入站链接另一侧的链路层进行互操作。 在输入端口执行查找功能，这将在输入端口的最右侧的框中发生。在这里，将查询转发表以确定将通过交换结构转发到哪个路由器输出端口的到达数据包。 控制数据包（例如，携带路由协议信息的数据包）从输入端口转发到路由处理器。 交换结构 (Switching Fabric) 连接路由器的输入端口和输出端口。 输出端口 (Output Ports) 存储从交换结构接收的数据包，并执行必要的链路层和物理层功能在出站链接上传输这些数据包。 当链接是双向的时，输出端口通常会与同一线卡上的该链接的输入端口配对。 路由处理器 (Routing Processor) 执行控制平面 Data Plane 功能 在传统路由器中，它执行路由协议，维护路由表和附加的链路状态信息，并为路由器计算转发表。 在 SDN 路由器中，路由处理器负责与远程控制器通信，以便（在其他活动中）接收由远程控制器计算的转发表条目，并将这些条目安装在路由器的输入端口中。 执行网络管理功能。 Input Port Processing and Destination-Based Forwarding路由器输入端口处理的工作流程可以概括如下： 输入端口处理 终止路由器上的入站物理链接。路由器根据 forwarding table 来查找输出端口，到达的数据包将通过交换结构转发到该端口。 转发表的更新：通过路由处理器计算和更新转发表，或者从远程 SDN 控制器接收。 转发表是通过一个单独的总线（例如，PCI 总线）从路由处理器复制到线卡(line card)上的，每个线卡都有一个转发表的副本，可以在每个输入端口本地做出转发决策，无需在每个数据包都要调用路由处理器，从而避免了集中处理的瓶颈。 基于目标地址的转发：在最简单的情况下，即将到达的数据包将被转发到的输出端口是基于数据包的目标地址的。在 32 位 IP 地址的情况下，转发表的暴力实现将为每个可能的目标地址有一个条目。由于可能的地址超过 40 亿个，这个选项完全不可能。 实际上路由器中使用分组目的地址的前缀（prefix）与该表中的表项进行匹配，如下图所示： 当有多个匹配项目时，该路由器使用最长前缀匹配规则（longest prefix matching rule），即在该表中寻找最长的匹配项，并向与最长的前缀匹配先关联的链路接口转发分组。 prefix Link Interface 11001000 00010111 00010 0 11001000 00010111 00011000 1 11001000 00010111 00011 2 Otherwise 3 一个端系统发送给另一个端系统的一批分组可能在网络中选择不同的路径，到达的顺序可能不一致 鉴于转发表的存在，查找在概念上很简单 - 硬件逻辑只是在转发表中搜索最长的前缀匹配。在千兆传输速率下，这种查找必须在纳秒内执行,因此，不仅必须在硬件中执行查找，而且需要对大表进行快速查找的算法;还必须特别注意内存访问时间，从而在设计中嵌入式片上 DRAM 和更快的 SRAM（用作 DRAM 缓存）存储器。实践中经常使用三态内容可寻址存储器（Tenary Content Address Memory，TCAM）来查找 SwitchingSwitch fabric 负责转发功能，完成交换的方式有很多，主要包括下面几种 Memory 在 CPU 直接控制下交换的传统计算机,数据交换的执行与传统 IO 设备一致； 数据包复制到 processor memory，processor 从 header 中提取目标地址； 速度受内存带宽限制，交换速度受总线带宽的速度限制 (每个分组穿过两次总线:Input&gt;Memory&gt;Output),故若总线带宽为每秒写入或读出 B 个分组，则总的转发吞吐量 (分组从输入端口被传送到输出端口的总速率)小于 B/2 Bus 输入端口通过一条共享总线将分组直接传送到输出端口，不需要选路处理器的干预。 每次只能有一个分组通过总线传送。分组到达一个输入端口时，若总线正忙，会被暂时阻塞，在输入端口排队 路由器交换带宽受总线速率限制。 Interconnection network 数据报分割成固定长度信元, 通过交换矩阵来交换信元。到达输入端口的分组沿水平总线穿行，直至与所希望的输出端口的垂直总线交叉点： 若该条垂直总线空闲，则分组被传送到输出端口； 否则，该到达的分组被阻塞，必须在输入端口排队。 Output port processing取出存放在输出端口内存中的分组，并将其传输到输出链路上。当交换结构将分组交付给输出端口的速率超过输出链路速率，就需要排队与缓存管理功能。当输出端口的缓冲区溢出时，就会出现延时和丢包。 When Does Queuing Occur在输入端口和输出端口都可以形成分组队列，随着这些队列的增长，路由器的缓存空间最终将会耗尽，并且当无内存可用于存储到达的分组时将会出现丢包（packet loss） Input Queueing当交换结构的速度慢于输入端口的速度，就会在输入端口的缓冲区发生排队,会导致排队延时和由于输入缓冲区溢出导致的丢包线头阻塞（Head-of-the-Line (HOL) blocking）: 在队列前面的被阻塞的数据报会阻止队列中的其他数据报被转发 Output Queueing当经过交换结构到达的速度超过了输出端口的处理线速就会发生排队,当输出端口的缓冲区溢出时就会发生丢包 Packet SchedulingFCFS(FIFO)维护一个 Queue，按照到达顺序依次处理分组 Priority Queuing通常每个 Packet 都有一个优先级，不同优先级的 Packet 被分配到不同的队列中，然后按照优先级顺序处理 Round Robin and Weighted Fari Queuing(WFQ) Round Robin 轮流服务将需要路由发送的资源进行分类，为每种类别生成自有的一个队列，发送时轮流从队列中选取队首的文件包进行发送。如果轮到某个队列时，该队列为空，则跳过该队列。 这样的服务能保障在各不同类型的网络服务中合理分配资源，不会让某一网络服务占用过大的带宽以至于影响其他的网络服务。比如某个下载程序占用过多网速，致使视频浏览出现卡顿或打开网页速度过慢。 WFQ 是基于 Round Robin 方法改进后而成的。对于某些网络服务，如网络电话或视频直播，为了保障能流畅进行，总是需要保留一定的优先带宽。这样情况下就可以使用 Round Robin 轮流服务的升级版本 Weighted Fair Quequing(WFQ)加权公平队列。其中的思想很简单，轮流服务中已经有了各个公平队列，需要做的就是对一些带宽敏感型服务进行标记并附以相应权重 $w_i$，服务时进行侧重就可以。 WFQ 在发送时仍然轮流从队列中选取队首文件包，但选取的数量根据权重 $w_i$ 确定，权重大的服务在一次发送循环中就能多发送文件包，从而确保相应的服务带宽，保证网络的服务质量。 The Internet Protocol (IP): IPv4, Addressing, IPv6, and MoreIPV4 Datagram Format 版本号（Version）：4bit。指定了数据报的 IP 协议版本。通过查看版本号，路由器可以确定如何解释 IP 数据报的其余部分。不同版本的 IP 使用不同的数据报格式。 首部长度（Header length）：确定 IP 数据报中有效载荷,在无选项（Options）首部时，IP 具有 20Byte 的首部； 服务类型（Type of service）：不同类型的数据报可以相互区分； 数据报长度（Datagram length）：IP 数据报的总长度（首部加上数据），以字节计数； 标识（Identifier）、标志（Flags）、分片偏移（Fragmentation offset）：一个链路层帧能承载的最大数据量叫作最大传送单元（Maximum Transmission Unit，MTU）。每个数据链路有自己的 MTU，链路类型不同，MTU 的值也不同，用于 IP 分片；在因特网中一个大的分组可能在路由器中被分割为几个分片，然后独立转发到目的地，在目的地将它们重新组装，然后将其有效载荷数据。IPV6 不允许分片 生存时间（Time-to-live，TTL）：确保数据段不会永远在网络中循环；每次数据报被路由器处理时，这个字段就会减 1。如果 TTL 字段达到 0，路由器必须丢弃该数据报。 上层协议（Upper-layer protocol）：IP 数据报到达最终目的地时使用。这个字段的值指示应该将该 IP 数据报的数据部分传递给特定的传输层协议。例如，值 6 表示数据部分传递给 TCP，而值 17 表示数据传递给 UDP。 首部检验和（Header checksum）：帮助路由器检测收到的 IP 数据报中的比特错误； 源和目的 IP 地址（Source and Destination IP address）； 选项（Options）：允许 IP 首部被扩展； 数据（Data）：一般为运输层报文段； IPV4 Addressing IP 地址: 分配给主机或路由器接口的标识符 接口: 主机/路由器与物理链路之间的边界 路由器有多个接口 主机可以有多个接口 每个接口有一个 IP 地址 IPV4 和 IPV6 IPV4：32 bits(4 Bytes)常用点分十进制(dotted-decimal notation)表示； IPV6：128 bits(16 Bytes)常用冒号分隔表示 32 比特的二进制表示和点分十进制表示法将 4 个字节中的每一个字节分别用十进制数来表示，4 个十进制数之间用 . 分隔。例如223.1.1.1 = 11011111 00000001 00000001 00000001根据不同的取值范围，早期将 IP 地址分为五类。IP 地址中前 5 位用于标识 IP 地址的类别，A 类地址的第一位为“0”，B 类地址的前两位为“10”，C 类地址的前三位为“110”，D 类地址的前四位为“1110”，E 类地址的前五位为“11110”。其中，A 类、B 类与 C 类地址为基本的 IP 地址。 A 类地址：地址范围为 1. 0. 0. 1－127.255.255.254全 0 表示本地地址，全 1 表示在本地网络中向所有机广播 B 类地址：地址范围为 128.0.0.1－191.255.255.254 C 类地址：地址范围为 192.0.0.1－223.255.255.254 特殊 IP 地址段 本地回环地址127.0.0.1-127.255.255.254是预留的一组 IP 地址，主要是用来识别主机本身的地址。也叫做“localhost”，一般用来测试。 私有地址（Private address）10.x.x.x, 172.16.x.x-172.31.x.x, 192.168.x.x三个地址段被称为私有 IP 地址段，也就是局域网所使用的地址段，在公网上不能被路由 0.0.0.0这个地址严格上来说都不是真正意义上的 IP 地址。主要是用来标识不清楚的网络和主机的。系统遇到无法识别的网络或主机的时候会统一的归纳到这个地址 255.255.255.255这个地址是受限的广播地址。主要指一个网段内的所有主机 IP 地址:网络号 (高位 bits):指明主机所在网络的编号主机号 (低位 bits):作为主机在网络中的编号。 网络号相同的 IP 地址属于同一个网络。而网络还可以划分为若干子网（subnet），划分子网的方法是从主机号借用若干个比特作为子网号，剩下的主机位为主机号。 子网 Subnet: 设备接口的 IP 地址具有同样的网络部分;没有路由器的介入，物理上能够相互到达子网掩码 Subnet Mask,子网掩码用来确定网络地址（包括网络号和子网号）和主机地址的长度。子网掩码长为 32 位比特，其中的 1 对应于 IP 地址中的网络号和子网号，而子网掩码中的 0 对应于主机号。有公式$ip_address &amp; subnet_mask = network_address$ 下图中，一台路由器（具有三个接口）用于互联 7 台主机。 图中左侧的 3 个主机和它们连接的路由器接口，都有一个形如233.1.1.xxx的 IP 地址。用 IP 的术语说，互联这 3 个主机接口与 1 个互联网接口的网络形成一个子网（subnet）。IP 编址为这个子网分配一个地址233.1.1.0/24，其中/24记法，指示 32 比特中的最左侧 24 比特定义了子网地址。 使用子网掩码的分组转发不划分子网时，路由表只有两项：目的网络地址和下一跳地址。使用子网划分后，路由表中将包括三项：目的网络地址、子网掩码和下一跳地址。 一个 A 类的 IP 地址，可以有 24bit 用于分配主机地址，因此可以支持$2^24$个主机(注意，实际上可接入主机要-2，因为有 2 个要留给 localhost 和广播地址)，但是一个家庭或者组织往往不需要这么多的地址空间，造成浪费。一个 C 类的 IP 地址，只有 8bit 用于分配主机地址，因此只能支持 256 个主机，又不太够用。因此，按传统 IP 地址分类方式分配 IP 被 CIDR 技术取代 CIDR，也被称为无类别域间路由选择（Classless Interdomain Routing，CIDR）, 消除了传统的 A 类、B 类和 C 类地址的概念。使用斜线记法，又称为 CIDR 记法来区分网络前缀和主机号，即在 IP 地址后面加上一个斜线/，斜线后面用一个数字指定网络前缀的长度。CIDR 将网络前缀都相同的连续的 IP 地址组成 CIDR 地址块。一个 CIDR 地址块可以表示分类 IP 的多个分类地址，这种地址的聚合称为路由聚合，又称为构造超网(superneting)。 下图为一个示例， ISP 获得地址块的方法——从 ICANN（Internet Corporation for Assigned Names and Numbers） 分配 IP 地址 管理 DNS 分配域名，解决纠纷 组织机构如何获取 IP 地址? 从 ISP 的地址空间中划分一块给申请者 所有的 IP 地址都由 ICANN 规划，然后主要由国际组织 NIC（Network Information Center）具体负责统一分配。目前全世界共有五个这样的网络信息中心(ARIN,LACNIC,RIPE NCC,AFRINIC,APNIC)我国申请 IP 地址要通过 APNIC，APNIC 的总部设在日本东京大学。申请时要考虑申请哪一类的 IP 地址，然后向国内的代理机构提出。 隋唐小练 现有一公司已获得网络号为 202.1.1.0/24,如果该公司有 3 个部门,（1）如果第 1 个部门有 60 台计算机，第二个部门有 20 台计算机，第三个部门有 16 台计算机，问如何分配地址?（2）如果第 1 个部门有 120 台计算机，第 2 个部门有 60 台计算机，第 3 个部门有 60 台计算机，使用上述方法可以分配地址吗？使用 CIDR 方法如何分配地址? （1）以最多台数的部门（60 台）为准，需要的最接近数为 2^6=64，故要从最后个字节借 8-6=2 位，子网分别为 202.1.1.0, 202.1.1.64, 202.1.1.128, 202.1.1.192，在这 4 个其中任选 3 个即可。掩码均为 255.255.255.192。（2）若以最多台数的部门（120 台）为准，仅能分两个子网，无法满足。故应采用 CIDR 法：首先以最小需求台数部门为准（60 台），此时主机号位数需要 6 位（因为 60=&lt;2^6-2），则子网号位数为 8-6=2 位，然后将子网划分出来，子网分别为 202.1.1.0, 202.1.1.64, 202.1.1.128, 202.1.1.192接下来，部门 2、3 可以直接在 4 个子网中任选两个，部门 1 选剩下 2 个以满足 120 台的要求（但这两个子网要连续，以便用 CIDR 法合并之，做超网）。比如 202.1.1.128、202.1.1.192 分别给部门 2、3，部门 1 用 202.1.1.0、202.1.1.64（3）最后将各部门 IP 段用 CIDR 超网形式描述，以便对外发布：部门 1：202.1.1.0/25; (注意含义：表示前 25 位是网络号，且最后一个字节最高位为 0，后面 7 位是主机号)部门 2：202.1.1.128/26; (最后一个字节最高两位为 10，后面 6 位是主机号)部门 3：202.1.1.192/26; (最后一个字节最高两位为 11，后面 6 位是主机号) 将 202.1.1.128、202.1.1.192 给部门 1，202.1.1.0、202.1.1.64 分别给部门 2、3 亦可。此时答案为：部门 1：202.1.1.0/26;部门 2：202.1.1.64/26;部门 3：202.1.1.128/25 Obtaining a Host Address: The Dynamic Host Configuration Protocol主机如何得到 IP 地址? 手工指定（保存在系统配置中） Windows: 控制面板-&gt;网络 UNIX/LINUX: 在/etc/rc.config 中，可使用 ifconfig 命令配置 DHCP: Dynamic Host Configuration Protocol,自动从一个 DHCP 服务器得到 IP 地址,方便灵活 DHCP DHCP 是应用层协议。其分配的不仅仅是 IP 地址，还可分配： 客户的第一跳路由器的地址（网关） DNS 服务器的 IP 地址或域名 子网掩码 报文格式 OP 若是 client 送给 server 的封包，设为 1，反向为 2； Htype 硬件类别，ethernet 为 1； Hlen 硬件长度，ethernet 为 6； Hops 若数据包需经过 router 传送，每站加 1，若在同一网内，为 0； Transaction ID：事务 ID，是个随机数，用于客户和服务器之间匹配请求和相应消息； Seconds 由用户指定的时间，指开始地址获取和更新进行后的时间； Flags 从 0-15bits，最左一 bit 为 1 时表示 server 将以广播方式传送封包给 client，其余尚未使用； Ciaddr 用户 IP 地址； Yiaddr 客户 IP 地址； Siaddr 用于 bootstrap 过程中的 IP 地址； Giaddr 转发代理（网关）IP 地址； Chaddr client 的硬件地址； Sname 可选 server 的名称，以 0x00 结尾； File 启动文件名； Options ，厂商标识，可选的参数字段 Steps DHCP 服务器被动打开 UDP 端口 67，等待客户端发来的报文。DHCP 客户端启动时,由于其还未配置 IP 地址,因此只能使用广播方式发送 Dhcpdiscover 包,即该数据包的源地址为 0.0.0.0,目标地址为 255.255.255.255 DHCP 客户从 UDP 端口 68 发送 DHCP 发现报文。 凡收到 DHCP 发现报文的 DHCP 服务器 都发出 DHCP 提供报文，因此 DHCP 客户 可能收到多个 DHCP 提供报文 DHCP 客户从几个 DHCP 服务器中选择 其中的一个，并向所选择的 DHCP 服务 器发送 DHCP 请求报文 被选择的 DHCP 服务器发送确认报文 DHCPACK，客户进入已绑定状态，并可 开始使用得到的临时 IP 地址了DHCP 客户现在要根据服务器提供的租用期 T 设置两个计时器 T1 和 T2，它们的超时时间分别是 0.5T 和 0.875T。当超时时间到就要请求更新租用期。 租用期过了一半（T1 时间到），DHCP 发送请求报文 DHCPREQUEST 要求更新租用期。 DHCP 服务器若不同意，则发回否认报文 DHCPNACK。这时 DHCP 客户必须立即停止使用原来的 IP 地址，而必须重新申请 IP 地址（回到步骤 2） DHCP 服务器若同意，则发回确认报文 DHCPACK。DHCP 客户得到了新的租用期，重新设置计时器。若 DHCP 服务器不响应步骤 6 的请求报文 DHCPREQUEST，则在租用期过了 87.5% 时，DHCP 客户必须重新发送请求报文 DHCPREQUEST（重复步骤 6），然后又继续后面的步骤。 DHCP 客户可随时提前终止服务器所提供的 租用期，这时只需向 DHCP 服务器发送释 放报文 DHCPRELEASE 即可。 Network Address Translation (NAT)对于外部网络而言，本地网络中的所有设备只共享一个 IPv4 地址。这样做有以下几点好处： 不需要从 ISP 分配一系列地址—— 只要一个 IP 地址用于所有设备 在本地网络，改变设备的 IP 地址不用通知外部世界 可以变更 ISP ，不用改变本地网络的设备的地址 本地网络内部设备不能被外部世界明确寻址，或是不可见 (增加了安全性) 但同时，为与外部网络交互，需进行网络地址转换(NAT)，执行 NAT，路由器 外出的分组: 把每个外出的分组的 (源 IP 地址, 端口号) 替换为 (NAT IP 地址, 新端口号) 在 NAT 转换表(NAT Translation Table)中记录每个(源 IP 地址, 端口号)到 (NAT IP 地址, 新端口号) 转换配对 进来的分组: 对每个进来的分组，用保存在 NAT 表中的对应的(源 IP 地址, 端口号) 替换分组中的目的域 （NAT IP 地址, 新端口号） Nat 的一些局限——16bit 端口号使得一个局域网地址可以同时支持 60,000 个并发连接! NAT 存在争议 路由器只应该处理到第三层 违反了端到端主张 应用程序设计者在设计时不得不将 NAT 加以考虑 如 P2P 应用程序 应使用 IPv6 来解决地址短缺问题 ICMPInternet Control Message Protocol（ICMP，互联网控制消息协议），负责在网络设备间传递控制与错误信息，确保数据包能够顺利抵达目的地。互联网中丢包、路由错误、网络拥塞等状况时有发生。这时，ICMP 便如同一位经验丰富的“诊断医生”，通过发送特定的消息类型，帮助识别并报告这些网络问题。 ICMP 的基本运作原理ICMP 位于 Internet 协议（IP）之上，属于 TCP/IP 协议栈的网络层。它并不直接参与数据的传输，而是作为 IP 协议的一个辅助工具，通过差错报告和询问机制来实现其功能。ICMP 报文通常封装在 IP 数据包内，包含类型、代码和校验和等字段，用以区分不同的消息类型和提供完整性检查。 差错报告：当数据包无法到达目标或遇到其他传输问题时，路由器或主机可以通过发送 ICMP 错误消息（如“目标不可达”、“超时”等）给源主机，告知发生了什么问题。 1234567891011121314151617type code 描述0 0 ping应答 (ping)3 0 目的网络不可到达3 1 目的主机不可到达3 2 目的协议不可到达3 3 目的端口不可达到3 6 不知道的目的网络3 7 不知道的目的主机4 0 源端抑制8 0 ping请求 (ping)9 0 路由器公告10 0 路由器发现11 0 TTL 过期12 0 IP首部损坏 ICMP 的实用价值网络故障排除：对于网络管理员而言，通过分析 ICMP 反馈的信息，可以迅速定位网络故障，比如判断是网络拥塞还是链路故障导致的数据包丢失。 路径监测与测量：“Traceroute”利用 ICMP 的 TTL（Time to Live）字段递减特性，逐跳追踪数据包的传输路径，帮助理解网络拓扑结构及延迟情况。 可用性检查：“Ping”命令简单有效，成为检测远程主机是否可达的日常工具，广泛应用于网络维护和服务器监控中。 安全考量与限制尽管 ICMP 对网络运维至关重要，但它也存在被滥用的风险，例如用于 DDoS 攻击中的 Smurf 攻击或放大攻击。因此，合理配置防火墙策略，对 ICMP 流量进行适当限制和监控，是保障网络安全的必要措施。 IPV6 初始动机： 32-bit IPv4 地址空间即将用尽 其他动机： 首部格式可帮助加速处理/转发 改变首部利于 QoS 要求 IPv6 数据报格式 固定长度的 40 字节首部 不允许分片 IPV6 报文格式 Priority: 表示流中分组的优先级Flowlabel: 表示分组在同一个“stream”中 (“流”的概念尚未完全定义)next hdr(header): 表示数据的上层协议 与 IPv4 区别 删掉分片/重新组装； 校验和: 全部去掉，减少每一跳的处理时间 虽允许 Option 字段, 但是不是标准首部的一部分，而是用下一个首部域指出 ICMPv6:新版本的 ICMP增加消息类型, 例如“分组太大”多播组管理功能 IPV6 地址表示 在 IPv6 中，地址分为 8 个段来表示，每段共 4 个字符 冒号十六进制表示法104.220.136.100.255.255.255.255.0.0.18.128.140.10.255.255用冒号十六进制表示为：69DC:8864:FFFF:FFFF:0:1280:8C0A:FFFF 零压缩表示法多个连续的0可用::替换;当计算机拿到这个压缩后的地址，发现比正常的 128 位少了 n 位，计算机就会试图在::的地方补上 n 个 0，从结果中可以发现，当一个 IPv6 地址被压缩后，如果计算机出现两个或多个::的时候，计算机在将地址还原时，就可能出现多种情况。这将导致计算机还原后的地址不是压缩之前的地址，将导致地址错误，最终通信失败。所以在压缩 IPv6 地址时，一个地址中只能出现一个::FF0C:0:0:0:0:0:B1零压缩表示为：FF0C::B1 从 IPV4 到 IPV6 过渡两种推荐方法:双栈：一些路由器具有双重栈 (v6, v4) 能够在两种格式中转换隧道: 在穿过 IPv4 路由器时，IPv6 分组作为 IPv4 分组的负载 Ref流量控制的相关算法与数据结构——Round Robin 轮流服务，Weighted Fair Quequing(WFQ)加权公平队列与 Leaky Bucket 漏桶限流","link":"/UESTC/ComputerNetworking/Ch4-1NetworkLayer/"},{"title":"网络层控制平面 Network Layer:Control Plane","text":"Introduction路由算法确定了通过网络的端到端路径，转发表确定了在路由器上的本地转发，转发表是链接数据平面与控制平面的主要元素，本篇将介绍其是如何计算、维护的 每个路由器控制 Per-router control：每台路由器有一个路由选择组件，用于与其他路由器中的路由选择组件通信，以计算其转发表的值。 逻辑集中式控制 Logically centralized control：逻辑集中式控制器计算并分发转发表以供每台路由器使用，如下图所示： Routing Algorithms路由的基本概念 默认路由器：与主机直接相连的路由器，又叫第一跳路由器。每当主机发送一个分组时，都先传送给它的默认路由器。 源路由器：源主机的默认路由器。 目的路由器：目的主机的默认路由器。 从源主机到目的主机的选路归结为从源路由器到目的路由器的选路。 路由算法：是确定一个分组从源路由器到目的路由器所经路径的算法 路由算法的关键：在给定的一组路由器以及连接路由器的链路中，找到一条从源路由器到目的路由器的“好”路径。 网络的抽象图模型 图$G = (N，E)$表示 N 个节点和 E 条边的集合，每条边是来自 N 的一对节点。Node 节点：表示路由器(做出分组转发判决的点)。如 $u，v，w，x，y，z$Edge 边：连接节点的线段，表示路由器之间的物理链路。如$(u，v)、 (u，x) 、(u，w)、…$ Cost 可以表示对应链路的物理长度、或链路速度、或与链路相关的费用。定义：$c(x，y)$ 表示从节点 x 到节点 y 的链路费用,规定若节点 x 与节点 y 不直接相连则$c(x,y)=\\infty$ Routing Algorithms Classification 集中式路由选择算法 Centralized Routing Algorithm：用完整、全局性的网络知识计算出从源到目的地之间的最低开销路径。具有全局状态信息的算法常被称作链路状态(Link State，LS)算法，因为该算法必须知道网络中每条链路的开销。 分布式路由算法 Decentralized Routing Algorithm：路由器以迭代、分布式计算的方式计算出最低开销路径。没有节点拥有关于网络链路开销的完整信息。一个分散式路由选择算法为距离向量(Distance-Vector，DV)算法，每个节点维护到网络中所有其他节点的开销估计的向量。 静态路由算法：路由确定后基本不再变化。只有人工干预调整时，可能有一些变化。 动态路由算法：当网络的流量负载或拓扑发生变化时，路径可能发生改变。可以周期性地或直接地响应拓扑或链路费用的变化。易受选路循环、路由振荡之类问题的影响。 Link State Routing Algorithms链路状态选路算法 在实践中，这经常由链路状态广播（link state broadcast）算法完成。下面给出的链路状态路由选择算法是 Dijkstra’s algorithm Dijkstra’s Alogorithm 所有节点知道网络拓扑，以及每条链路的费用信息 通过链路状态广播来实现 所有节点拥有相同的信息 计算任意一个节点（源节点）到所有其他节点的最低费用路径 给出该节点的转发表 迭代：通过 k 次迭代后可以知道到达 k 个目的节点的最低费用路径 基本思想：以源节点为起点，每次找出一个到源节点的费用最低的节点，直到把所有的目的节点都找到为止。 定义以下符号 c(x,y): 表示从节点 x 到节点 y 的链路费用,规定若节点 x 与节点 y 不直接相连则c(x,y)=∞ D(v)：到算法的本次迭代，从源节点到目的节点 v 的最低开销； p(v)：从源到 v 沿着当前最小开销路径的前一个节点（v 的邻居）； N'：节点子集；如果从源到 v 的最低开销路径已经确定，v 在N'中 u 源节点 Link-State (LS) Algorithm for Source Node u12345678910111213Initialization: N' = {u} for all nodes v if v is a neighbor of u: then D(v) = c(u,v) else D(v) = ∞while N' != N: # 从N'的补集中找一个到源节点费用最低的节点 find w not in N' such that D(w) is a minimum add w to N' update D(v) for each neighbor v of w and not in N': D(v) = min(D(v),D(w)+c(w,v)) 以上图为例,计算从u到所有可能目的节点的最低费用路径。算法迭代如下 构建从源节点到所有目的节点的路径 对于每个节点，都得到从源节点沿着它的最低费用路径的前驱节点； 每个前驱节点，又可得到它的前驱节点；以此继续，可以得到到所有目的节点的完整路径。如节点 z 的前驱节点依次为：p(z)=y,z-&gt;y;p(y)=x,z-&gt;y-&gt;x;p(x)=u,z-&gt;y-&gt;x-&gt;u 得出从源节点 u 到节点 z 的最低费用路径为：uxyz，费用为 4。 根据目的节点找出顺序和其费用以及前驱节点，可以画出源节点 u 到所有目的节点的最低费用路径树。 根据得到的所有目的节点的完整路径，或最低费用路径树，可以生成源节点的转发表。转发表存放从源节点到每个目的节点的最低费用路径上的下一跳节点。即指出对于发往某个目的节点的分组，从该节点发出后的下一个节点。 默认路由 * ：表示所有具有相同“下一跳”的表项。即将“下一跳”相同的项合并为一项，目的节点用*表示。优先级最低，转发分组时，当找不到对应表项时，才使用默认路由。 Dijkstra’s Algorithm 复杂度设 n 个节点(除源节点)，最坏情况下要经多少次计算才能找到从源节点到所有目的节点的最低费用路径?第一次迭代：搜索所有的 n 个节点以确定最低费用节点第二次迭代：检查 n-1 个节点；第三次：检查 n-2 个节点；依次类推。所有迭代中需要搜寻的节点总数为 $\\frac{n(n+1)}{2}$算法复杂性为 $O(n^2)$ 且路线上的流量变化和拥塞会使 LS 算法产生路由震荡 Routing Oscillations The Distance-Vector（DV）Routing Algorithm距离向量路由算法有以下特征 迭代 Iterative：计算过程一直持续到邻居之间无更多信息交换为止。 分布式 Distributed：每个节点都从其直接相连邻居接收信息，进行计算，再将计算结果分发给邻居。 异步 Asynchronous：不要求所有节点相互之间步伐一致地操作。 自我终结 Self-termination：算法能自行停止。 Bellman-Ford 方程 $$d_x(y)=min_v{c(x,v)+d_v(y)}$$ $d_x(y)$：节点 x 到节点 y 的最低开销路径的 cost。 $v$: 节点 x 的邻居节点。 $c(x,v)+ d_v(y)$：x 与某个邻居 v 之间的直接链路费用 c(x,v)加上邻居 v 到 y 的最小费用。即 x 经 v 到节点 y 的最小的路径费用。 $min_v$ ：从所有经直接相连邻居节点到节点 y 的费用中选取的最小路径费用。 Distance-Vector (DV) Algorithm 对每个节点 x: 初始化 等待 (收到本地链路代价变化或邻居来距离矢量更新) 重新计算距离矢量,更新距离向量 如果到任何目的节点的距离矢量发生变化, 通知邻居 goto2 仍以该图为例,计算源节点u到目的节点z的最低费用路径。 邻居 v：$d_v(z) = 5、c(u,v) = 2$ 邻居 w：$d_w(z) = 3、c(u,w) = 5$ 邻居 x：$d_x(z) = 3、c(u,x) = 1$ $$ d_u(z) = min \\{ c(u,v) + d_v(z), c(u,w) + d_w(z) , c(u,x) + d_x(z)\\} \\\\ = min\\{2+5,5+3,1+3\\} = 4 $$ 即源节点 u 经相邻节点 x 到目的节点 z 的路径费用最低，为 4 节点的距离向量表 行：该节点的距离向量 Dx 和其邻居的距离向量 Dv 列：所有目的节点。 节点 x 的距离向量 $D_x$ ，即节点 x 到每个目的节点 y 的估计费用； $Dx = [D_x(y) | y \\in N ]$节点 x 每个邻居的距离向量 $D_v$ ，即 x 的邻居 v 到每个目的节点 y 的估计费用，$Dv = [D_v(y)：y \\in N]$ 如何更新距离向量? 每个节点不断向邻居发送其距离向量的 copy； 当节点 x 收到一个邻居 v 的新距离向量，先保存，并用 B-F 公式更新自己的距离向量：$D_x(y)=min_v{c(x,v)+D_v(y)}$从所有经邻居 v 到节点 y 的费用中选取最小路径费用 若距离向量发生改变，将新的距离向量通知给邻居。 当距离向量不再变化，算法终止，此时$D_x(y)$收敛到$d_x(y)$，即得到节点 x 到节点 y 的最低费用路径。 多次重复从邻居接收更新距离向量、重新计算选路表项、并向邻居发送更新通知的过程，直到没有更新报文 算法进入静止状态，直到某个链路费用发生改变为止。 Distance-Vector Algorithm: Link-Cost Changes and Link Failure当一个节点检测到从它到邻居的链路费用发生变化时，就更新其距离向量，如果最低费用路径的费用发生变化，通知其邻居。 某链路费用减少时情况如图所示，当 y 到 x 的链路费用从 4 变为 1 的情况。 t0：y 检测到 x 的链路费用从 4 变为 1，更新其距离向量，并通知其邻居 z； t1：z 收到来自 y 的更新报文，并更新自己的距离表，此时到节点 x 的最低费用减为 2，并通知其邻居 y； t2：y 收到来自 z 的更新报文，并更新自己的距离表，此时到节点 x 的最低费用不变仍为 1。不发送更新报文，算法静止。当 x 与 y 之间费用减少，DV 算法只需两次迭代到达静止状态。节点之间链路费用减少的“好消息”在网络中能迅速传播,即 good news travels fast 某链路费用增加时情况假设 x 与 y 之间的链路费用从 4 增加到 60链路费用变化前$D_y(x)=4 ，D_y(z)=1， D_z(y)=1，D_z(x)=5$ t0 ：y 检测到链路费用从 4 变为 60。更新到 x 的最低路径费用$D_y(x)=min{c(y,x)+ D_x(x), c(y,z)+ D_z(x)}=min{60+0,1+5}=6$此时 $D_y(x)=6 ，D_y(z)=1， D_z(y)=1，D_z(x)=5$经节点 z 到 x 费用最低，此新费用错误，发给节点 z。 t1 ：z 收到新费用，更新其到 x 的最低路径费用$D_z(x )=min{ c(z,x)+ D_x(x), c(z,y)+ D_y(x)}=min{50+0,1+6}=7$此时 $D_y(x)=6 ，D_y(z)=1， D_z(y)=1，D_z(x)=7$经节点 y 到 x 费用最低，发给节点 y。 t2：y 收到新费用，更新到 x 的最低路径费用$D_y(x )=min{c(y,x)+ D_x(x), c(y,z)+ D_z(x)}=min{60+0,1+7}=8$经节点 z 到 x 费用最低，发给节点 z。……节点 y 或 z 的最低费用不断更新。产生选路回环(routing loop)：为到达 x， y 通过 z 选路，z 又通过 y 选路。即目的地为 x 的分组到达 y 或 z 后，将在这两个节点之间不停地来回反复，直到转发表发生改变为止。上述循环将持续 44 次迭代 (y 与 z 之间的报文交换)，直到 z 最终算出它经由 y 的路径费用大于 50 为止。并确定：z 到 x 的最低费用路径：zxy 到 x 的最低费用路径：yzx说明：链路费用增加的“坏消息”传播很慢,即 bad news travels slow当链路费用增加很大，会出现无穷计数(count-to-infinity)问题。如链路费用 c(y，x)变为 10000，c(z，x)变为 9999 时。 Distance-Vector Algorithm: Adding Poisoned Reverse针对上面的问题，引出毒性逆转（poisoned reverse）思想：如果 z 通过 y 路由选择目的地 x，则 z 将通告 y，它到 x 的距离是无穷大，也就是 z 将通告$D_z(x)=\\infin$。毒性逆转可以完全解决计数到无穷的问题吗？不能，如果三个以上节点的环路，则不能被毒性逆转技术检测 A Comparison of LS and DV Routing Algorithms消息复杂度LS 算法：知道网络每条链路的费用，需发送 $O(nE)$个报文；当一条链路的费用变化时，必须通知所有节点DV 算法：迭代时，仅在两个直接相连邻居之间交换报文；当链路费用改变时，只有该链路相连的节点的最低费用路径发生改变时，才传播已改变的链路费用收敛速度LS 算法：需要 $O(nE)$个报文和 $O(n^2)$的搜寻，可能会振荡DV 算法：收敛较慢。可能会遇到选路回环，或计数到无穷的问题。健壮性当一台路由器发生故障、操作错误或受到破坏时，会发生什么情况?LS 算法：路由器向其连接的一条链路广播不正确费用，路由计算基本独立（仅计算自己的转发表），有一定健壮性。DV 算法：一个节点可向任意或所有目的节点发布其不正确的最低费用路径，一个节点的计算值会传递给它的邻居，并间接地传递给邻居的邻居。一个不正确的计算值会扩散到整个网络。 Intra-AS Routing in the Internet: OSPF迄今为止，我们的路由研究都是理想化的： 所有路由器一样的 网络是 “平面的” 实际中并不是这样的。互联网在规模上具有 20 亿个节点，路由表中不可能存储所有的节点而路由表的信息交换也将淹没数据链路 随着路由器规模增大和管理自治的要求，可以通过将路由器组织进自治系统（Autonomous System，AS）来解决。在一个自治系统内运行的路由算法叫做自治系统内部路由选择协议（intra-autonomous system routing protocol），不同自治系统内的路由器可以运行不同的区域内路由协议","link":"/UESTC/ComputerNetworking/Ch4-2NetworkLayer/"},{"title":"运输层 TransportLayer Part Ⅰ","text":"Introduction and Transport-Layer ServicesRelationship Between Transport and Network Layers运输层协议为运行在不同的主机上的应用进程之间提供了逻辑通信（logic communication）功能传输层协议运行在端系统而非路由器 发送方: 将从发送应用程序接收到的报文转换成传输层分组(segment)传递给网络层 接受方: 将数据段重新组装成报文传递到应用层 传输层: 进程之间的逻辑通信;传输层建立在网络层之上，负责端到端的通信会话和数据的可靠传输。传输层使用端口号来区分主机上的不同应用程序，并确保数据被正确地发送到接收应用程序。网络层: 主机之间的逻辑通信; 网络层负责处理数据包的发送和路由，包括 IP 地址处理和路由选择。网络层的主要目标是确定如何将数据从源主机传输到目标主机，即使这两台主机在物理上可能相隔很远，并且在它们之间可能存在多个中间节点（路由器）。网络层的一个关键协议是互联网协议（IP），它定义了数据包的格式和地址。 Overview of the Transport Layer in the InternetInternet 的传输层协议有两个:传输控制协议 TCP,Transmission COntrol Protocol: 提供了一种可靠的、面向连接的服务。用户数据报协议 UDP,User Datagram Protocol:提供不可靠、无连接的服务 网络层的 IP 协议(Internet Protocol)提供了一种不可靠的、无连接的服务;IP 的服务模型是尽力而为交付服务（best-effort delivery service） UDP 和 TCP 最基本的责任是，将两个端系统间 IP 的交付服务扩展为运行在端系统上的两个进程之间的交付服务。将主机间交付扩展到进程间交付被称为运输层的多路复用（transport-layer multiplexing）与多路分解（demultiplexing）。 Multiplexing and Demultiplexing 运输层的多路复用与多路分解，也就是将由网络层提供的主机到主机的交付服务延伸到为运行在主机上的应用程序提供进程到进程的服务。一个进程（作为网络应用的一部分）有一个或多个套接字（socket），它相当于从网络向进程传递数据和从进程向网络传递数据的门户。下图为进程交付过程： 多路复用（Multiplexing）：在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息（这将在以后用于分解）从而生成报文段，然后将报文传递到网络层； 多路分解（Demultiplexing）：它是多路复用的逆过程;在接收端，运输层检查这些字段，标识出接收套接字，进而将报文段定向到该套接字，即将运输层报文段的数据交付到正确的套接字的工作； 主机收到 IP 数据报(IP Datagram),每个 IP 数据报中有源 IP 地址和目的 IP 地址,每个数据报搬运一个数据段,数据段中有源端口号和目的端口号,这样就可以将数据段交付给正确的 Socket。 运输层多路复用要求: 套接字由唯一标识符； 每个报文段通过源端口号字段（source port number field）和目的端口号字段（destination port number field）来指示该报文段所要交付的套接字； 端口号是一个 16 比特的数，其大小在 0~65535之间。0~1023范围的端口号称为周知端口号（well-know port number），是受限制的。 UDP 的 Socket 表示(source port， dest port) TCP 的 Socket 表示(source IP， source port， dest IP， dest port) Connectionless Transport: UDPUDP Segment Structure使用 UDP 时，在发送报文段之前，发送方和接收方的运送层实体之间没有握手，UDP 被称为无连接的 connectionless;UDP 只在 IP 的数据报服务之上增加了很少一点的功能，即端口的功能和差错检测的功能。 是无连接的，即发送数据之前不需要建立连接(no connection establishment) 简单: 在发送者接受者之间不需要连接状态(no connection state) 没有拥塞控制，很适合多媒体通信的要求,UDP 能够用尽可能快的速度传递(no congestion control) UDP 的首部开销小，只有 8 个字节(small header size) 支持一对一、一对多、多对一和多对多的交互通信 UDP 是面向报文的。发送方 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。应用层交给 UDP 多长的报文，UDP 就照样发送，即一次发送一个报文。接收方 UDP 对 IP 层交上来的 UDP 用户数据报，在去除首部后就原封不动地交付上层的应用进程，一次交付一个完整的报文。应用程序必须选择合适大小的报文。虽然 UDP 用户数据报只能提供不可靠的交付，但 UDP 在某些方面有其特殊的优点。 UDP 首部有 8 个字节，由 4 个字段构成，每个字段都是两个字节： 1.源端口： 源端口号，需要对方回信时选用，不需要时全部置 0. 2.目的端口：目的端口号，在终点交付报文的时候需要用到。 3.长度：UDP 的数据报的长度（包括首部和数据）其最小值为 8（只有首部） 4.校验和：检测 UDP 数据报在传输中是否有错，有错则丢弃,该字段是可选的，当源主机不想计算校验和，则直接令该字段全为 0.当传输层从 IP 层收到 UDP 数据报时，就根据首部中的目的端口，把 UDP 数据报通过相应的端口，上交给应用进程。如果接收方 UDP 发现收到的报文中的目的端口号不正确（不存在对应端口号的应用进程），就丢弃该报文，并由 ICMP 发送“端口不可达”差错报文给对方。 伪首部中 17 是协议代号，表示 UDP伪首部的作用第一，通过伪首部的 IP 地址检验，UDP 可以确认该数据报是不是发送给本机 IP 地址的；第二，通过伪首部的协议字段检验，UDP 可以确认 IP 有没有把不应该传给 UDP 而应该传给别的高层的数据报传给了 UDP。 伪首部包括了 IPv4 头部中的一些信息，但它并不是发送 IP 数据包时使用的 IP 数据包的头部。接收主机在收到 UDP 报文以后，从 IP 首部获悉 IP 地址信息构造 UDP 伪首部。在进行校验和计算。识别一个通信应用需要 5 个因素。”源 IP 地址”、”目标 IP 地址”、”源端口”、”目标端口”、”协议号”。UDP 首部只包含了（源端口和目标端口），用此来校验，如果其他三项信息被破坏，极有可能导致应收包应用收不到，不应该收包的应用收到。为此，有必要在通信中，验证这 5 项的识别码是否正确，就引入了伪首部的概念。 UDP ChecksumUDP/IP 硬件协议栈设计（三）：校验 Sender:将数据段看成 16bit 的整数序列校验和: 数据段内容相加 (1 的补码和，即反码)发送者将校验和值放入 UDP 的校验和域Receiver计算接收到数据段的校验和检查 计算的校验和是否等于校验和域中的值:NO – 检测到错误YES – 没有检测到错误,但是可能是错误的 Principles of Reliable Data Transfer[Ch3-1DataLinkLayer#可靠传输 Reliable Transmission] 可靠数据传输的框架：为上层实体提供的服务抽象是：数据可以通过一条可靠的信道进行传输。如下图所示： rdt: reliable data transfer Building a Reliable Data Transfer ProtocolReliable Data Transfer over a Perfectly Reliable Channel: rdt1.0发送方和接收方的表示使用有限状态机（Finite-State Machine，FSM）定义，如果对一个事件没有动作，我们将在横线上方或下方使用符号$\\Lambda$，以表示发生这个事件后不进行处理。我们考虑最简单的情况，即底层信道是完全可靠的，我们称该协议为 rdt1.0，发送方和接收方的 FSM 定义如下： Reliable Data Transfer over a Channel with Bit Errors: rdt2.0 下层信道可能让传输分组中的 bit 受损 校验和将检测到 bit 错误 问题: 如何从错误中恢复 确认(ACKs): 接收方明确告诉发送方 分组接收正确 否认 (NAKs):接收方明确告诉发送方 分组接收出错 发送方收到 NAK 后重发这个分组 在 rdt2.0 中的新机制 (在 rdt1.0 中没有的): 差错检测 接收方反馈: 控制信息 (ACK,NAK) rcvr-&gt;sender 实际上的底层信道是可能出现比特受损的；在分组传输、传播或缓存的过程中，这种比特差错通常会出现在网络的物理部件中。在接收方得到比特差错的信息时，需要发送方进行重传。在计算机网络环境中，基于这种重传机制的可靠数据传输协议称为自动重传请求（Automatic Repeat reQuest，ARQ）协议。ARQ 协议中还需要另外三种协议来处理存在比特差错的情况： Error Detection：发送方同时发送检测和（checksum）到接收端判断是否出现比特差错； Receiver feedback： 肯定确认（ACKnowledgement，ACK）：接收方告诉发送方包数据无差错； 否定确认（Negative AcKnowledgement，NAK）：接收方告诉发送方包数据有错误； Retransmission：接收方收到有差错的分组时，发送方将重传该分组文； rdt2.0 中，当发送方为Wait for ACK or NAK状态时，它不能再接收上层传来的数据，即rdt_send()事件不能再出现；直到接收到 ACK 并离开该状态，才能再次接收上层传来的数据。因此，rdt2.0 也被称为停等协议（stop-and-wait protocol）。 rdt2.0协议存在致命的缺陷，它并没有考虑 ACK 和 NAK 受损的情况,一个困难的问题是协议该如何 从错误中恢复。为了解决这一问题，就是在数据分组中添加一新字段，让发送方对其数据分组编号(编号占用 1bit，为 0/1)，即将发送数据分组的序号（sequence number）放在该字段。于是，接收方只需要检查序号即可确定收到的分组是否一次重传。 rdt2.2: 一个不要 NAK 的协议;同 rdt2.1 一样的功能, 只用 ACKs 不用 NAK。如果上个报文接收正确接收方发送 ACK;接收方必须明确包含被确认的报文的序号；如果接受到受损的数据，那就发送一个 ACK，序号为最后一个正确的数据包的序号。发送方收到重复 ACK(duplicate ACK)等同于收到 NAK,将重发当前报文 Reliable Data Transfer over a Lossy Channel with Bit Errors: rdt3.0新假设: 下层信道还要丢失报文 (数据或者 ACKs);校验和, 序号, 确认, 重发将会有帮助，但是不够引入倒计数定时器（countdown timer），实现基于时间的重传机制；只有在定时器超时时才触发重发 因为分组序号在 0 和 1 之间交替，因此 rdt3.0也被称为比特交替协议（alternating-bit protocol）。运行如下图所示： Pipelined Reliable Data Transfer Protocolssender 信道利用率$U_{sender}=\\frac{L/R}{RTT+L/R}$ Stop-and-Wait 方式发送方信道利用率很低，解决方案是流水线化（pipelining），即发送方可以发送多个分组，而不需要等待接收方的确认。 GBN &amp; SRRef[Ch3-1DataLinkLayer#回退 N 帧协议 Go-Back-N Protocol][Ch3-1DataLinkLayer#选择重传协议 Selective Repeat Protocol]","link":"/UESTC/ComputerNetworking/Ch5-1TransportLayer/"},{"title":"应用层 ApplicationLayer Part Ⅰ","text":"Principles of Network ApplicationsNetwork application architecture应用程序体系结构（application architecture）由应用程序研发者设计，规定了如何在各种端系统上组织该应用程序。现代网络应用程序中所使用的两种主流体系结构：the client-server architecture 和 the peer-to-peer (P2P) architecture. Client-Server Architecture Server 总是在线（always on host）； 永久的 IP 地址（permanent IP address）； 配置在数据中心（often in data centers）； Client 与服务器沟通联系； 被间歇性（intermittently）的连接； 拥有动态地址； 客户之间不直接联系； P2P Architecture 没有总是打开的服务器 任意一对主机(peer)直接相互通信 对等方间歇连接并且可以改变 IP 地址 自我可扩展性 self-scalability P2P (Peer-to-Peer) 网络的自我可扩展性（self-scalability）是指网络的能力，随着参与节点数量的增加，其性能和效率不会显著下降，甚至可能会提高。这种特性是由 P2P 网络的分散性和去中心化特性赋予的。在许多传统的客户端-服务器模型中，所有的请求都会集中到一台或几台服务器上，随着用户数量的增加，服务器可能会遭受过载，导致性能下降。然而，在 P2P 网络中，每个节点都可以成为数据的提供者和消费者，因此负载可以在所有的节点上进行分布，使得网络能够更好地扩展。然而，这并不意味着 P2P 网络没有扩展性问题。例如，当网络规模变得非常大时，查找和路由可能会变得复杂和昂贵。因此，需要使用高效的查找和路由算法，例如分布式哈希表（DHT），来确保网络的可扩展性。 C/S 与 P2P 混合的体系结构 Processes CommunicatingClient And Server Process 进程：运行在端系统中的程序[ProcessVsThread#Definition] 同一主机上的两个进程通过内部进程通信机制进行通信 不同主机上的进程通过交换报文(message)相互通信 客户进程：发起通信的进程；服务进程：在会话开始时等待联系的进程； The Interface Between the Process and the Computer Network大多数应用程序由许多互相通信的进程对(pairs of communicating processes)组成,任何两个进程之间发送的报文都需要经由底层的网络;套接字 Socket作为软件接口,向进程提供发送和接受报文功能 由于该套接字是建立网络应用的可编程接口，因此套接字被称为应用程序和网络之间的应用程序编程接口（Application Programming Interface，API）。 Addressing Processes IP Address 用于唯一标识 Internet 上的主机 Port 用于标识目的主机的接受进程 发送进程还必须识别在主机中运行的接收进程（更具体地说，是接收信息的 Socket）。这个信息是必要的，因为通常一个主机可能运行着许多网络应用。目标端口号就是为了这个目的而设立的。一些流行的应用已经被分配了特定的端口号。例如，Web 服务器被标识为 80 号端口。邮件服务器进程（使用 SMTP 协议）被标识为 25 号端口。 Transport Services Available to Applications Reliable Data Transfer 一些应用需要 100%可靠数据传输,如金融应用 loss-tolerant applications 允许丢包(loss),常见的有多媒体应用,如视频通话等 Throughout 具有吞吐量要求是应用程序被称为带宽敏感的应用（bandwidth-sensitive application）； 弹性应用（elastic application）能够根据当时可用的带宽或多或少地利用可供使用的吞吐量； Timing 低延时（low delay）要求； Security 传输数据的 Cryption&amp;Decryption Confidentiality(保密性) 数据完整性 Data Integrity 终端验证 end-point authentication Application Data Loss Throughtput Time-Senstive 文件传输 No loss elastic no 电子邮件 No loss elastic no Web No loss elastic no 实时音频/视频 Loss-tolernet 音频: 几 kbps-1Mbps yes,100 msec 存储音频/视频 Loss-tolernet 视频:10kbps-5Mbps yes, 几秒 交互式游戏 Loss-tolernet 视频:10kbps-5Mbps yesy, 100 msec 即时讯息 No loss 几 kbps 以上 elastic yes and no Transport Services Provided by the Internet TCP 服务 面向连接的服务（connection-oriented）：报文开始流动之前，TCP 让客户和服务器互相交换运输层控制信息（握手阶段），握手阶段后，一条 TCP 连接（TCP connection）就在两条进程的套接字之间建立； 可靠的数据传送服务（reliable transport）：无差别、按适当顺序交付所有发送的数据； 拥塞控制机制（congestion control） 安全套接字层（Secure Sockets Layer，SSL）提供了关键的进程到进程的安全性服务🚥http + SSL = https UDP 服务 无连接 尽最大努力交付 面向报文 无拥塞控制 支持一对一，一对多，多对一和多对多的交互通信 首部开销小 Application Layer Protocols**应用层协议(Application Layer Protocols)**定义了在不同端系统上运行的应用程序进程如何相互传递消息。具体来说，应用层协议定义了： 交换的消息类型，例如，请求消息和响应消息 报文类型的语法：报文中的各个字段及其详细描述 字段的语义，即包含在字段中的信息的含义 进程何时、如何发送报文及对报文进行响应 应用层协议根据其是否公开可供所有人使用，可以分为两种类型：公共领域协议和专用协议: 公共领域协议:由 RFC 文档定义,可供所有人使用,例如 HTTP,SMTP,POP3 专用协议:由公司或组织定义,例如 Skype, KaZaA RFC，全称是 Request for Comments（征求意见书），是由互联网工程任务组（IETF）出版的一系列备忘录，用于描述、规定或者建议互联网标准、协议、程序、或者概念。RFC 文档是互联网技术和协议的主要来源，包括了诸如 TCP/IP、HTTP、SMTP 等核心互联网协议的规范。RFC 文档的内容可以是互联网社区的共识、工作小组的产品、个人的观点，或者只是为了获取公众的反馈。RFC 文档一旦发布，编号就不再改变，如果需要对 RFC 进行修改或者更新，会以新的 RFC 编号发布。值得注意的是，尽管 RFC 是”征求意见书”的缩写，但是大部分 RFC 文档实际上是互联网标准的官方规范，而不仅仅是征求意见的提案。 Network Applications The Web and HTTPOverview of HTTP 网页 WebPage，或称 Document由许多对象 Object组成。 对象就是文件，可以是 HTML 文件, JPEG 图像, Java applet, 音频文件… 多数网页由单个基本 HTML 文件 base HTML和若干个所引用的对象构成 每个对象被一个 统一资源定位符 URL Uniform Resource Locator寻址 Web 浏览器（Web browser）实现了 HTTP 的客户端；Web 服务器（Web server）实现了 HTTP 的服务器端； HTTP 使用 TCP 作为运输协议； HTTP 超文本传输协议（HyperText Transfer Protocol） 因为 HTTP 服务器不维护客户先前的状态信息， 是无状态协议（stateless protocol）； 维护状态的协议非常复杂 必须维护过去历史 (状态信息) 如果 server/client 崩溃, 它们各自的状态视图可能不一致, 因此必须保持协调一致。 12http://www.someschool.edu/someDept/pic.gif👆🏻协议 👆🏻主机名 👆🏻路径名 Non-Persistent and Persistent Connections非持久 HTTP 连接 每个 TCP 连接上只传送一个对象，下载多个对象需要建立多个 TCP 连接 HTTP/1.0 使用非持久 HTTP 连接 持久 HTTP 连接 一个 TCP 连接上可以传送多个对象 HTTP/1.1 默认使用持久 HTTP 连接 往返时间（Round-Trip Time，RTT）定义：该时间是指一个短分组从客户到服务器然后在返回客户所需要的时间；[Ch1-NetworkOverview#往返时间 Round Trip Time] HTTP Message Format终端输入curl -v &quot;https://baidu.com&quot;或使用 wireshark 等抓包工具可以 12345678910111213141516171819202122232425262728293031 curl -v &quot;https://baidu.com&quot;* Host baidu.com:443 was resolved.* IPv6: (none)* IPv4: 110.242.68.66, 39.156.66.10* Trying 110.242.68.66:443...* Connected to baidu.com (110.242.68.66) port 443* schannel: disabled automatic use of client certificate* ALPN: curl offers http/1.1* ALPN: server accepted http/1.1* using HTTP/1.x&gt; GET / HTTP/1.1&gt; Host: baidu.com&gt; User-Agent: curl/8.6.0&gt; Accept: */*&gt;&lt; HTTP/1.1 302 Moved Temporarily&lt; Server: bfe/1.0.8.18&lt; Date: Wed, 27 Mar 2024 07:08:02 GMT&lt; Content-Type: text/html&lt; Content-Length: 161&lt; Connection: keep-alive&lt; Location: http://www.baidu.com/&lt;&lt;html&gt;&lt;head&gt;&lt;title&gt;302 Found&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=&quot;white&quot;&gt;&lt;center&gt;&lt;h1&gt;302 Found&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;bfe/1.0.8.18&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;* Connection #0 to host baidu.com left intact HTTP Request Message12345GET /somedir/page.html HTTP/1.1Host: www.someschool.eduConnection: closeUser-agent: Mozilla/5.0Accept-language: fr 请求行 request line请求报文的第一行,其有 3 个字段：方法字段、URL 字段和 HTTP 版本字段； 方法包含GET,POST,HEAD,PUT,DELETE； 首部行 header line 请求行后继的行叫作 HTTP Response Message123456789HTTP/1.1 200 OKConnection：closeDate: Sat, 06 Aug 2011 12:00:15 GMTServer: Apache/1.3.0 (Unix)Last-Modified: Thu, 22 Jun 2011 …...Content-Length: 6821Content-Type: text/htmldata data data data data ... 状态行 status line响应报文的第一行,其有 3 个字段：HTTP 版本字段、状态码字段和状态码短语字段； 首部行 header line 响应行后继的行叫作 HTTP 状态码1xx （信息性状态码）：表示服务器已经接收到请求，正在处理。 100 Continue: 服务器已收到请求的初始部分，客户端应继续发送其余部分。 101 Switching Protocols: 服务器已经理解客户端的请求，并将切换到更适合的协议进行通信。 2xx （成功状态码）：表示请求已成功处理。 200 OK: 请求成功，返回所请求的内容。 201 Created: 请求成功，并在服务器上创建了一个新的资源。 202 Accepted: 请求已被接受，但尚未处理完成。 204 No Content: 请求成功，但服务器没有返回任何内容。 3xx （重定向状态码）：表示需要进一步操作以完成请求。 301 Moved Permanently: 被请求的资源已永久移动到新位置，并且将来的请求应使用新的 URL。 302 Found: 被请求的资源暂时移动到了新位置。 304 Not Modified: 资源未被修改，可以直接使用缓存的版本。 4xx （客户端错误状态码）：表示客户端发送了错误的请求。 400 Bad Request: 客户端发送的请求语法错误。 401 Unauthorized: 请求需要身份验证。 403 Forbidden: 服务器拒绝了请求，客户端没有权限访问请求的资源。 404 Not Found: 请求的资源在服务器上未找到。 5xx （服务器错误状态码）：表示服务器在处理请求时发生了错误。 500 Internal Server Error: 服务器在执行请求时遇到了未知的错误。 502 Bad Gateway: 作为代理或网关的服务器收到无效的响应。 503 Service Unavailable: 服务器暂时无法处理请求，通常是由于过载或维护。 User-Server Interaction: Cookies前面提到 HTTP 服务器为无状态的，而一个 Web 站点通常希望能够识别用户，可能是因为服务器希望限制用户的访问，或者因为它希望把内容与用户身份联系起来。为此，HTTP 使用了 cookie(最初被称作 magic cookie)🍪Magic_cookie cookie technology has four components: a cookie header line in the HTTP response message; a cookie header line in the HTTP request message; a cookie file kept on the user’s end system and managed by the user’s browser a back-end database at the Web site. Cookies 跟踪用户cookies 允许网站更加了解你你可以提供名字和 e-mail 给网站广告公司通过网站获得信息Cookies 不适合游动用户Cookie 可用于：跟踪用户在给定网站上的行为（第一方 cookie）在多个网站上跟踪用户行为（第三方 cookie），而无需用户选择访问跟踪器网站！跟踪可能对用户不可见：可能是一个不可见的链接通过 Cookie 进行的第三方跟踪：在 Firefox、Safari 浏览器中默认禁用，将于 2023 年在 Chrome 浏览器中禁用 Web Caching(proxy server)Web 缓存器 Web cache,也称代理服务器 proxy server，设计它的目标是代表初始 Web 服务器（origin server）满足 HTTP 请求;一般的，Web 缓存器既是服务器又是客户机,典型的缓存器由 ISP 提供（大学、公司或居民 ISP）;引入 Weh 缓存器减少了对客户机请求的响应时间,内部网络与接入链路上的通信量,并从整体上大大降低因特网上的 Web 流量 如图,加入 cache 后,客户端请求的对象可能在缓存器中(称作缓存命中),缓存器直接返回给客户端;图中接入链路(access link)的速率为 15Mbps,远低于局域网的网络速率,$total delay = LAN delay + access dalay + Internet delay$,可见接入时延为该例中提升传播速率的瓶颈;可选择更快的接入链路,但这需要更多的费用;而缓存器可以减少接入链路上的流量,从而减少接入时延,同时费用相对较低 LAN delay: 在局域网中传输一个报文所需的时间Access delay: 在两个路由器之间传输一个报文所需的时间Internet delay: 在因特网中传输一个报文所需的时间 Request Steps: 浏览器创建一个到 Web 缓存器的 TCP 连接，并向 Web 缓存器中的对象发送一个 HTTP 请求； Web 缓存器进行检查，看看本地是否存储该对象副本。如果有，Web 缓存器向客户返回该对象； 如果缓存器中没有该对象，它就打开一个与该对象的初始服务器的 TCP 连接。Web 缓存器向初始服务器发送请求，并得到初始服务器的响应； 当 Web 缓存器接受对象后，在本地创建给对象的副本，并向客户发送响应报文返回该对象；通过使用内容分发网络（Content Distribution Network，CDN），Web 缓存器正在因特网中发挥着越来越重要的作用。[Ch6-2ApplicationLayer#Content Distribution Networks] 尽管高速缓存器能减少用户感受到的响应时间，但引入了一个新的问题，即存放在缓存器中的副本可能陈旧的。为验证缓存器中的副本是否仍然有效，你可以使用条件 GET 请求,参照如下 python 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import socket# 定义报文内容和首部request = &quot;GET /index.html HTTP/1.1\\r\\n&quot;request += &quot;Host: www.baidu.com\\r\\n&quot;request += &quot;If-Modified-Since: Sat, 01 Jan 2022 00:00:00 GMT\\r\\n&quot;request += &quot;Connection: close\\r\\n\\r\\n&quot;# 创建套接字并连接目标服务器s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect(('www.baidu.com', 80))# 发送报文s.send(request.encode())response = b&quot;&quot;while True: data = s.recv(4096) if not data: break response += dataprint(response.decode())s.close()[OUTPUT]HTTP/1.1 200 OKAccept-Ranges: bytesCache-Control: no-cacheContent-Length: 9508Content-Type: text/htmlDate: Fri, 29 Mar 2024 13:00:29 GMTP3p: CP=&quot; OTI DSP COR IVA OUR IND COM &quot;P3p: CP=&quot; OTI DSP COR IVA OUR IND COM &quot;Pragma: no-cacheServer: BWS/1.1Set-Cookie: BAIDUID=E79C6BEF6A7F8AA35FBC1FD6742520D8:FG=1; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.comSet-Cookie: BIDUPSID=E79C6BEF6A7F8AA35FBC1FD6742520D8; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.comSet-Cookie: PSTM=1711717229; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.comSet-Cookie: BAIDUID=E79C6BEF6A7F8AA30F2B2E6688EB66DE:FG=1; max-age=31536000; expires=Sat, 29-Mar-25 13:00:29 GMT; domain=.baidu.com; path=/; version=1; comment=bdTraceid: 1711717229235279668210477533425964763324Vary: Accept-EncodingX-Ua-Compatible: IE=Edge,chrome=1X-Xss-Protection: 1;mode=blockConnection: close# html filedata data ... data HTTP/2HTTP1.1： 在单个 TCP 连接上引入了多个流水线 GET 服务器按顺序响应 GET 请求（FCFS: first-come-first-served scheduling） 对于 FCFS，小对象可能必须在大对象后面等待传输 head-of-line(HOL)blocking, 线头阻塞 HOL 丢失恢复（重新传输丢失的 TCP 段）对对象传输时间的影响 HTTP/2:[RFC 7540，2015] 增加了服务器向客户端发送对象的灵活性 方法、状态代码、大多数头字段与 HTTP1.1 相比没有变化 基于客户端指定的对象优先级的请求对象的传输顺序（不一定是 FCFS） 将未请求的对象推送到客户端 将对象划分为帧 frames 以减少 HOL 阻塞 详细分析 http2 和 http1.1 区别 HTTP/3：通过 UDP 增加了安全性、每个对象的错误和拥塞控制（更多的流水线操作） Electronic Mail in the Internet邮箱系统的 3 个主要组成部分: 用户代理 user agents 允许用户阅读,回复,转发,保存,编辑邮件； 服务器上存储的传入和传出的消息； 例如：Outlook, foxmail 等 邮件服务器 mail servers 邮箱（mailbox）包括用户传入的消息； 报文队列（message queue）中为待发送的邮件报文； 简单邮件传送协议 SMTP SMTPSMTP 服务概述SMTP（Simple Mail Transfer Protocol）是一种用于电子邮件传输的标准协议。它定义了电子邮件客户端（如邮件程序）和邮件服务器之间的通信规则，以便可靠地将邮件从发送方传递到接收方。 SMTP 使用持久连接 SMTP 要求邮件消息(header &amp; body)必须是 7-bit ASCII SMTP 服务器使用 CRLF.CRLF 来判断邮件消息的结束 用户代理与发送服务器的连接：用户代理（例如电子邮件客户端）使用 SMTP 协议与发送服务器建立连接。连接过程包括身份验证和协议握手等步骤。用户代理提交邮件：用户代理将邮件发送到发送服务器。邮件的内容、收件人、发件人等信息被打包成一个 SMTP 消息。 发送服务器的邮件传递：发送服务器接收到用户代理提交的邮件后，开始根据收件人的电子邮件地址确定邮件的路由。它可能会通过 DNS 查找 MX 记录来找到目标邮件服务器，并将邮件转发给目标邮件服务器。 目标邮件服务器的接收与存储：目标邮件服务器接收到邮件后将其存储，并等待用户代理或接收器以后续协议（如 POP3 或 IMAP）请求获取邮件。 用户代理收取邮件：用户代理使用 POP3 或 IMAP 协议从接收服务器上下载邮件，并将邮件显示在用户界面上供用户查看和管理。 SMAP 与 HTTP 的区别 特性 SMTP HTTP 协议类型 推协议 push protocol 拉协议 pull protocol 数据编码 要求采用 7 比特 ASCII 码格式 不受 7 比特 ASCII 码限制 消息传递 发送文件的机器发起 TCP 连接 接收文件的机器发起 TCP 连接 报文封装 所有报文对象放在一个报文中 每个对象封装在不同的 HTTP 响应报文中 Mail Message Format一般格式如下： 123456To:发件人地址From:收件人地址Subject:邮件主题...邮件正文 MIME: Multipurpose Internet mail Extensions 多用途因特网邮件扩展, RFC 2045, 2046;增添额外的信头头部声明 MIME content-type,实现多媒体邮件 1234567891011From: alice@crepes.frTo: bob@hamburger.eduSubject: Picture of yummy crepe.MIME-Version: 1.0Content-Transfer-Encoding: base64Content-Type: image/jpegbase64 encoded data ....................................base64 encoded data Mail Access Protocols收件人的用户代理不能使用 SMTP 得到报文，因为取得报文是一个 pull 操作，而 SMTP 协议是一个 push 协议。通过引用一个特殊的邮件访问协议来解决这个问题，该协议将收件人邮件服务器上的报文传送给他的本地 SMTP: 递送/存储邮件消息到接收者邮件服务器 邮件访问协议: 从服务器获取邮件消息 POP3: Post Office Protocol-Version3 邮局协议[RFC 1939]110 端口号身份认证 (代理 &lt;–&gt;服务器) 并 下载邮件消息 IMAP: Internet Message Access Protocol [RFC 3501] 143 端口更多功能特征,允许用户像对待本地邮箱那样操纵远程邮箱的邮件 HTTP: Hotmail , Yahoo! Mail, etc. POP3 VS IMAP 特性 POP3 IMAP 邮件存储 下载邮件至本地客户端 在服务器上保留邮件副本 邮件同步 单设备上的邮件删除操作不会同步更新 多设备上的邮件操作同步更新 邮件管理 仅支持简单的邮件收发操作 支持复杂的邮件管理功能","link":"/UESTC/ComputerNetworking/Ch6-1ApplicationLayer/"},{"title":"应用层 ApplicationLayer Part Ⅱ","text":"DNS——The Internet’s Directory ServiceServices Provided by DNS识别主机的两种方式：通过hostname或者IP address。人们喜欢记忆主机名标识方式，而路由器喜欢定长的、有着层次结构的 IP 地址。DNS 提供了一种将主机名转换为 IP 地址的服务。 DNS(Domain Name System),域名系统 分布式数据库：一个由分层 DNS 服务器实现的分布式数据库 应用层协议：DNS 服务器实现域名转换,域名/地址转换;DNS 协议运行在 UDP之下，使用 53号端口； DNS 服务器提供的功能 主机名到 IP 地址的转换（hostname to IP address translation）； 主机别名（host aliasing）：一个主机可以有一个规范主机名和多个主机别名,应用程序调用 DNS 获取主机别名对应的规范主机名（canonical hostname）以及主机的 IP 地址； 邮件服务器别名（mail server aliasing）； 负载分配（load distribution）：繁忙的站点被冗余分布在多台服务器上，每台服务器运行在不同的端系统上，每个都有着不同的 IP 地址。由于这些冗余的 Web 服务器，一个 IP 地址集合对应一个规范主机名。当客户对映射到某处到某地址集合的名字发出一个 DNS 请求时，该服务器用 IP 地址的整个集合进行响应，但在每个回答中循环这些地址次序。因为客户通常总是向 IP 地址排在最前面的服务器发送 HTTP 请求报文，所以 DNS 就在所有这些冗余的 Web 服务器之间循环分配了负载； Overview of How DNS Works集中式设计的问题 单点故障（a single point of failure）； 通信容量（traffic volume）； 远距离的集中式数据库（distant centralized database）； 维护（maintenance）； 分布式 DNS 服务器的层次结构 Root DNS servers:负责记录顶级域名服务器的信息 Top-Level Domain DNS servers:负责顶级域名 com, org, net, edu, etc, 和所有国家的顶级域名 uk, fr, ca, jp. Authoritative DNS servers:在因特网上具有公共可访问主机（如 Web 服务器和邮件服务器）的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。组织机构的权威 DNS 服务器负责保存这些 DNS 记录。 Local DNS servers:严格来说不属于该服务器的层次结构,每个 ISP（如居民区 ISP、公司、大学）都有一个本地 DNS,也叫默认服务器,当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器,它起着代理的作用，转发请求到层次结构中。 PS:你可以通过ipconfig /all命令查看本地 DNS 服务器的地址。 123456789101112131415Wireless LAN adapter WLAN:Connection-specific DNS Suffix . :Description . . . . . . . . . . . : Intel(R) Wi-Fi 6 AX200 160MHzPhysical Address. . . . . . . . . : 48-51-C5-27-0C-9FDHCP Enabled. . . . . . . . . . . : YesAutoconfiguration Enabled . . . . : YesIPv4 Address. . . . . . . . . . . : 113.54.231.1(Preferred)Subnet Mask . . . . . . . . . . . : 255.255.224.0Lease Obtained. . . . . . . . . . : Thursday, March 28, 2024 12:25:52 PMLease Expires . . . . . . . . . . : Thursday, March 28, 2024 3:16:27 PMDefault Gateway . . . . . . . . . : 113.54.224.1DHCP Server . . . . . . . . . . . : 113.54.224.1DNS Servers . . . . . . . . . . . : 202.112.14.21202.112.14.11NetBIOS over Tcpip. . . . . . . . : Enabled DNS 查询方法递归 Recursive Query：客户端只发一次请求，要求对方给出最终结果。迭代 Iterated Quert：客户端发出一次请求，对方如果没有授权回答，它就会返回一个能解答这个查询的其它名称服务器列表 DNS 缓存 一旦名字服务器获得 DNS 映射, 它将缓存该映射到局部内存 服务器在一定时间后将丢弃缓存的信息 本地 DNS 服务器可以缓存 TLD 服务器的 IP 地址 因此根 DNS 服务器不会被经常访问 权威 DNS 服务器记录更新：IETF 动态更新/通报机制 DNS Records and MessagesDNS Resource RecordsDNS 服务器中存储了大量的资源记录——Resource Record(RR),RR 是一个包含了下列字段的 4 元组(name, value, type, ttl) DNS Messages Identification 标识符: 16 位，查询和应答报文使用相同的标识符 Flags 标志:有若干个标志构成，分别标识不同的功能 查询/应答－0/ 1 查询希望是/非递归查询－1/0 应答可/否获得(支持)递归查询－1/0 应答是/否来自权威名字服务器－1/ 0 Questions 问题部分:查询的 Name, type Answers 回答部分:对于查询,应答的资源记录可以多个资源记录，由于可以有多个 IP 地址 Authority 权威部分:域对应的权威名字服务器的信息 Additional information 附加信息部分:权威名字服务器的 IP 地址等其他有帮助的记录. 1234567891011121314151617181920212223import dns.messageimport dns.query# 创建一个 DNS 查询报文对象query = dns.message.make_query(&quot;baidu.com&quot;, dns.rdatatype.ANY)# 发送 DNS 查询并接收响应报文,设置DNS服务器的IP地址为202.112.14.21response = dns.query.tcp(query, &quot;202.112.14.21&quot;)# 打印输出报文的信息print(f&quot;Identification: {response.id}&quot;)print(f&quot;Flags: {response.flags}&quot;)print(f&quot;Questions: {response.question}&quot;)print(f&quot;Answers: {response.answer}&quot;)print(f&quot;Authority: {response.authority}&quot;)print(f&quot;Additional information: {response.additional}&quot;)[OUTPUT]Identification: 41532Flags: 33152Questions: [&lt;DNS baidu.com. IN ANY RRset: []&gt;]Answers: [&lt;DNS baidu.com. IN A RRset: [&lt;110.242.68.66&gt;, &lt;39.156.66.10&gt;]&gt;, &lt;DNS baidu.com. IN NS RRset: [&lt;ns7.baidu.com.&gt;, &lt;ns2.baidu.com.&gt;, &lt;dns.baidu.com.&gt;, &lt;ns3.baidu.com.&gt;, &lt;ns4.baidu.com.&gt;]&gt;]Authority: []Additional information: [&lt;DNS dns.baidu.com. IN A RRset: [&lt;110.242.68.134&gt;]&gt;, &lt;DNS ns2.baidu.com. IN A RRset: [&lt;220.181.33.31&gt;]&gt;, &lt;DNS ns3.baidu.com. IN A RRset: [&lt;153.3.238.93&gt;, &lt;36.155.132.78&gt;]&gt;, &lt;DNS ns4.baidu.com. IN A RRset: [&lt;111.45.3.226&gt;, &lt;14.215.178.80&gt;]&gt;, &lt;DNS ns7.baidu.com. IN A RRset: [&lt;180.76.76.92&gt;]&gt;, &lt;DNS ns7.baidu.com. IN AAAA RRset: [&lt;240e:bf:b801:1002:0:ff:b024:26de&gt;, &lt;240e:940:603:4:0:ff:b01b:589a&gt;]&gt;] Peer-to-Peer File Distribution 没有总是在线的服务器 任意端系统之间直接通信 对等方之间可以间断连接并可以改变 IP 地址 BitTorrentBitTorrent 是一种用于高效分发文件的协议和技术。它是一种点对点（P2P）文件共享协议，允许用户在互联网上分享和下载文件。 相比于传统的文件下载方式，BitTorrent 采用了一种分布式的下载模式，使得文件可以同时从多个来源下载，从而提高了下载速度和可靠性。BitTorrent 协议的核心思想是让下载者同时充当上传者，即将下载好的文件块分享给其他下载者，从而实现文件的高效传输。 以下是 BitTorrent 的工作原理： 种子文件（Torrent File）的创建和分享：对于要被共享的文件，首先需要创建一个种子文件，该文件包含了文件的元数据和跟踪器（Tracker）的信息。跟踪器是协调下载者之间连接的服务器，帮助下载者找到其他参与文件共享的人。这个种子文件被分享给其他用户。 Peers 的连接和数据交换：下载者（也称为 Peer）通过 BitTorrent 客户端连接到跟踪器，并获取参与共享文件的其他 Peer 的信息。然后，下载者与这些 Peer 建立连接，开始交换文件块。下载者不仅从上传者下载文件块，也同时将自己已经下载好的文件块分享给其他下载者。 分块下载和校验：文件被分成小块（通常为 256KB 或 512KB），下载者通过与其他 Peer 交换文件块来逐步下载文件。每个文件块都有一个唯一的标识符，以便下载者之间进行正确的数据交换。下载者还会进行校验，确保下载的文件块的完整性和准确性。 做种（Seeding）：当下载者完全获得整个文件后，他们可以选择继续将文件保持在 BitTorrent 网络中作为种子继续分享给其他下载者，这称为做种。通过做种，更多的用户可以从他们那里下载文件，从而促进整个网络的稳定性和可扩展性。 Video Streaming and Content Distribution NetworksHTTP Streaming And DASHHTTP 流所有客户接受到相同编码的视频，但对不同用户或者不同时间，客户可用的带宽大小有很大不同。HTTP 的动态适应性流（Dynamic Adaptive Streaming over HTTP，DASH）：视频编码成几个不同的版本，其中每个版本具有不同的比特率，对应于不同的质量水平。客户动态地请求来自不同版本且长度为几秒的视频段数据块。 每个视频版本存储在 HTTP 服务器中，每个版本都有一个不同的 URL。HTTP 服务器也有一个告示文件（manifest file），为每个版本提供了一个 URL 及其比特率。 Content Distribution Networks如何从海量的视频中，挑选出某些内容，采用流的方式发送给成千上万的用户?CDN 使用多台分布在全球各地的服务器（这些服务器被称为边缘节点），这些服务器存储了网站中内容的副本。当用户请求访问网站时，CDN 会根据用户的地理位置，选择距离用户最近的边缘节点来响应请求。 Private CDN 私有 CDN 是由单个组织或企业自己建立和管理的内容分发网络。它通常由该组织或企业在自己的数据中心或云环境中架设服务器节点，用于存储和分发自己的内容。私有 CDN 的优势在于对内容的控制权和安全性更高。 Third-party CDN 第三方 CDN 是由专业的 CDN 提供商运营和管理的网络基础设施。这些提供商拥有全球分布的服务器节点，并为各种网站和应用提供内容分发服务。第三方 CDN 通过在全球各地部署服务器节点，将站点或应用的静态和动态内容缓存到离用户近的节点，并通过智能路由和负载均衡，将用户的请求引导到最近的节点。 CDN Operation: When a browser in a user’s host is instructed to retrieve a specific video (identified by a URL), the CDN must intercept(截获) the request so that it can Determine a suitable CDN server cluster(集群) for thatclient at that time Redirect the client’s request to a server in that cluster. 许多 CDN 利用 DNS 截获用户请求并将用户重定向到最近的 CDN 服务器。 如下是一个用户访问 NetCinema 网页中视频的过程： 用户访问 NetCinema 的网页。 当用户点击链接http://video.netcinema.com/6Y7B23V时，用户的主机会发送一个寻找video.netcinema.com的 DNS 查询。 用户的本地 DNS 服务器（LDNS）将 DNS 查询转发到 NetCinema 的权威 DNS 服务器，该服务器注意到主机名video.netcinema.com中的字符串 video。为了将 DNS 查询交给 KingCDN，NetCinema 的权威 DNS 服务器不返回 IP 地址，而是返回 KingCDN 域中的主机名，例如a1105.kingcdn.com DNS 查询进入 KingCDN 的私有 DNS 基础设施;用户的 LDNS 然后发送查询a1105.kingcdn.com的请求;KingCDN 的 DNS 系统指定合适的 KingCDN 内容服务器,将其 IP 地址返回给 LDNS。 LDNS 将提供内容的 CDN 节点的 IP 地址转发给用户的主机。 一旦客户端收到 KingCDN 内容服务器的 IP 地址，它就会与该 IP 地址的服务器建立 TCP 连接，并发出一个 HTTP GET 请求获取视频。如果使用 DASH，服务器会首先向客户端发送一个清单文件，其中包含一个 URL 列表，每个版本的视频对应一个 URL，客户端会动态地从不同的版本中选择块。 Socket Programming: Creating Network Applications","link":"/UESTC/ComputerNetworking/Ch6-2ApplicationLayer/"},{"title":"运输层 TransportLayer Part Ⅱ","text":"Connection-Oriented Transport: TCPTCP Connection 面向连接 connection-oriented：相互发送预备报文段，以建立确保数据传输的参数； 全双工服务 full-duplex service：如果一台主机上的进程 A 与另一台主机上的进程 B 存在一条 TCP 连接，那么应用层数据就可以在从进程 B 流向进程 A 的同时，也从进程 A 流向进程 B； 点对点 point-to-point：即在单个发送方与单个接收方之间的连接； 三次握手 three-way handshake：客户先发送一个特殊 TCP 报文段，服务器用另一个特殊的 TCP 报文段来响应，最后客户再用第三个特殊报文段作为响应。 流量控制 Traffic control：TCP 通过流量控制机制来确保发送方不会淹没接收方； 客户进程通过套接字，TCP 会将要发送的数据引导到该连接的发送缓存（send buffer），发送缓存是发起三次握手期间设置的缓存之一，TCP 发送缓存与接收缓存如下图所示： TCP Segment Structure 源端口和目的端口字段 Source Port Dest Port: 各占 2 字节。端口是运输层与应用层的服务接口。运输层的复用和分用功能都要通过端口才能实现 序号字段 Sequence number: 占 4 字节。TCP 连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号 确认号字段 Acknowledge number: 占 4 字节，是期望收到对方的下一个报文段的数据的第一个字节的序号 数据偏移(首部长度) header length 占 4 位，它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。“数据偏移”的单位是 32 位字（以 4 字节为计算单位） 保留字段 Unused: 占 8 位，保留为今后使用，但目前应置为 0 标识字段 flag field 占 6bit URG (Urgent Pointer field significant)：当设置为 1 时，表示紧急指针字段有意义，即 TCP 报文段中存在紧急数据，需要优先传送。 ACK (Acknowledgement field significant)：当设置为 1 时，表示确认号字段有效。TCP 使用 ACK 标志和确认号字段来实现可靠传输，确认对方发送的数据已经成功接收。 PSH (Push Function)：当设置为 1 时，表示接收方应立即将这个报文段交给应用层，而不是等待缓冲区满后再交付。 RST (Reset the connection)：当设置为 1 时，表示连接出现严重问题，需要立即重置，即终止当前连接。 SYN (Synchronize sequence numbers)：在建立连接时使用。当 SYN 标志设置为 1，而 ACK 标志为 0 时，表示这是一个连接请求报文段。如果 SYN 和 ACK 都为 1，表示对方已确认连接请求，此时连接建立。 FIN (Finish,No more data from sender)：当设置为 1 时，表示此方已经没有数据要发送，希望关闭连接。 实践中，PSH，URG，Urgent data pointer 不被广泛使用在 RFC 3168 中添加了两个新的标志（ECE 和 CWR），CWR：CWR 标志与后面的 ECE 标志都用于 IP 首部的 ECN 字段，ECE 标志为 1 时，则通知对方已将拥塞窗口缩小；ECE：若其值为 1 则会通知对方，从对方到这边的网络有阻塞。在收到数据包的 IP 首部中 ECN 为 1 时将 TCP 首部中的 ECE 设为 1； 窗口字段 Receiver window: 占 2 字节，用来让对方设置发送窗口的依据，单位为字节。 检验和 Internet checksum:占 2 字节。检验和字段检验的范围包括首部和数据这两部分。在计算检验和时，要在 TCP 报文段的前面加上 12 字节的伪首部。 紧急指针字段 Urgent data pointer 占 16 位，指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面）。 填充字段 这是为了使整个首部长度是 4 字节的整数倍。 Seq number and ACK number报文段的序号(Sequence number)和确认号(Acknowledgement number)是 TCP 提供可靠数据传输的关键。其中序号指数据段中第一个字节在数据流中的位置编号，确认号指期望从另外一边收到的下一个字节的序号。TCP 为全双工通信，因此每个方向的数据流都有自己的序号和确认号。 假设有两台主机，主机 A 启动了一个与主机 B 的 Telnet 会话。因为主机 A 启动了会话，所以它被标记为客户端，主机 B 被标记为服务器。用户（在客户端）输入的每个字符都会被发送到远程主机；远程主机将会发送回每个字符的副本，这些字符将会显示在 Telnet 用户的屏幕上。这种“回显”用于确保 Telnet 用户看到的字符已经在远程站点被接收并处理。因此，每个字符在用户按下键盘到字符在用户的监视器上显示的时间内，都会在网络上传输两次现在假设用户输入了一个单独的字母，‘C’，然后去拿咖啡。如图所示，这里我们假设客户端和服务器的起始序列号 ISN 分别是 42 和 79。一个段的序列号是数据字段中第一个字节的序列号。因此，从客户端发送的第一个段的序列号将是 42；从服务器发送的第一个段的序列号将是 79。回忆一下，确认号是主机正在等待的下一个数据字节的序列号。在 TCP 连接建立但在任何数据发送之前，客户端正在等待字节 79，服务器正在等待字节 42 在 TCP 中，每一个新的连接都会从一个随机的起始序列号（ISN, Initial Sequence Number）开始。ISN 是在 TCP 三次握手过程的第一步中由连接的发起方确定。实际的 TCP 连接中，起始序列号会是一个随机的、32 位的数值。这里我们使用 42 和 79 只是为了简化讨论。为什么要用随机 ISN?一方面是为了防止连接失效后 SOCKET 被重用使得以前残留的包被错误的接受；另一方面是为了防止黑客轻易的知道序列号之后制造 tcp 序列号攻击，不过即使这样 tcp 序列号攻击也是有办法进行的，所以有很多 tcp 序列号的生成算法被提出和改进。 如图所示，发送了三个段。第一个段从客户端发送到服务器，其数据字段中包含字母‘C’的 1 字节 ASCII 表示。正如我们刚才描述的，这个第一个段的序列号字段中有 42。另外，因为客户端还没有从服务器接收到任何数据，所以这个第一个段的确认号字段中会有 79。 第二个段从服务器发送到客户端。它有两个目的。首先，它确认了服务器接收到的数据。通过在确认字段中放入 43，服务器告诉客户端它已经成功接收了直到字节 42 的所有内容，现在正在等待字节 43 及其后的数据。这个段的第二个目的是回显字母‘C’。因此，这个第二个段的数据字段中有字母‘C’的 ASCII 表示。这个第二个段的序列号是 79，这是这个 TCP 连接的服务器到客户端数据流的初始序列号，因为这是服务器发送的第一个数据字节。注意，对客户端到服务器数据的确认是在携带服务器到客户端数据的段中进行的；这个确认被说成是在服务器到客户端的数据段上的捎带确认。 回显 Echo Protocol 通常用于网络测试和故障排查。它是一种简单的协议，客户端发送给服务器的任何数据，服务器都会原封不动地发送回来。这种机制可以用于测试网络连接的质量，包括延迟、数据包丢失率等。它在 RFC 862 中有详细的描述。然而，需要注意的是，TCP Echo 并不常用，因为它可能会被利用进行拒绝服务攻击（Denial of Service attack，DoS attack） 第三个段从客户端发送到服务器。它的唯一目的是确认它从服务器接收到的数据。（回忆一下，第二个段包含了从服务器到客户端的数据——字母‘C’。）这个段的数据字段是空的（也就是说，确认没有与任何客户端到服务器的数据捎带）。这个段的确认号字段中有 80，因为客户端已经接收了直到字节序列号 79 的字节流，现在正在等待字节 80 及其后的数据。你可能会觉得奇怪，这个段也有一个序列号，虽然段中没有数据。但是，因为 TCP 有一个序列号字段，所以这个段需要有一些序列号。 TCP，就像我们在 3.4 节中的 rdt 协议一样，使用超时/重传机制来从丢失的段中恢复。虽然这在概念上很简单，但是当我们在实际的协议如 TCP 中实现超时/重传机制时，会出现许多微妙的问题。也许最明显的问题是超时间隔的长度。显然，超时应该大于连接的往返时间（RTT），即从发送一个段到它被确认的时间。否则，会发送不必要的重传。但是超时应该大多少？首先应该如何估计 RTT？是否应该与每个未确认的段关联一个定时器？ Round-Trip Time Estimation and Timeout如何估计往返时间 样本 RTT(SampleRTT): 测量从报文段发送到收到确认的时间EstimatedRTT TCP 维持的 SampleRTT 均值，其更新方式如下:$\\alpha$ 推荐值为 0.125 $$EstimatedRTT=(1-\\alpha)\\times EstimatedRTT+\\alpha\\times SampleRTT$$ 上述平均方法被称为指数加权移动平均（Exponential Weighted Moving Average，EWMA） RTT 偏差(RTT Deviation,DevRTT)，用于估算 SampleRTT 一般会偏离 EstimatedRTT 的程度：$\\beta$ 推荐值为 0.25 $$DevRTT=(1-\\beta)\\times DevRTT+\\beta\\times |SampleRTT-EstimatedRTT|$$ Timeout 时间设置超时间隔应该大于等于 EstimatedRTT 以避免不必要的重传。同时要考虑到 RTT 的变化，因此要加上 RTT 偏差 $$TimeoutInterval = EstimatedRTT + 4\\times DevRTT$$ 初始时$TimeoutInterval$设置为 1s 第一个样本 RTT 获得后， $EstimatedRTT=SampleRTT，DevRTT=SampleRTT/2$ $TimeoutInterval =EstimatedRTT + max (G, K*DevRTT)$ （K=4，G 是用户设置的时间粒度） Reliable Data TransferTCP 在 IP 不可靠服务之上创建了一种可靠数据传输服务（reliable data transfer service,rdt）。为了减少多个定时器管理带来的相当大的开销，TCP 在即使有多个已发送但未确认的报文段的情况下，定时器的管理过程仅使用单一的定时器。简化的 TCP 发送方如下 1234567891011121314151617181920212223242526272829/* Assume sender is not constrained by TCP flow or congestion control, that data from above is less than MSS in size, and that data transfer is in one direction only. */NextSeqNum=InitialSeqNumber // 表示下一个要发送的数据段的序列号SendBase=InitialSeqNumber // 表示已发送但尚未被确认的最早的数据段的序列号loop (forever) { switch(event) event: data received from application above create TCP segment with sequence number NextSeqNum if (timer currently not running) start timer pass segment to IP NextSeqNum=NextSeqNum+length(data) break; event: timer timeout retransmit not-yet-acknowledged segment with smallest sequence number start timer break; event: ACK received, with ACK field value of y if (y &gt; SendBase) { SendBase=y if (there are currently any not-yet-acknowledged segments) start timer } break;} /* end of loop forever */ 简化的 TCP 发送方 data received from application above: 当从上层应用接收到数据时，创建一个 TCP Segment，其序列号为 NextSeqNum，如果没有启动定时器，则启动定时器，然后将该段传递给 IP 层以进行传输，NextSeqNum += length(data) timer timeout: 当定时器超时时（这通常意味着一个 TCP 段丢失了，因为我们没有在预期的时间内收到 ACK），会重新传输序列号最小的尚未确认的段，然后重新启动定时器 ACK received, with ACK field value of y: 当收到一个 ACK 时，如果 ACK 字段的值 y 大于 SendBase，则更新 SendBase 为 y。这意味着我们已经收到了序列号小于或等于 y 的所有段的确认。然后，如果还有尚未确认的段，就启动定时器 Retransmission Scenarios 当发生 timeout 事件时，TCP 重传时都会将下一次的 timeout 间隔设为先前值的两倍；当发生其他两个事件计时器重启时，TimeoutInterval由最近的 EstimatedRTT值与 DevRTT值推算得到。这种修改提供了一个形式受限的拥塞控制,在拥塞时期，如果源继续坚持重新传输数据包，拥塞可能会变得更,通过延长超时时间，TCP 可以减少重传的次数，从而减少拥塞。如下图 p2 所示，Seq92 超时重传，TimeoutInterval 加倍，$TimeoutInterval \\lt Seq100 Transport Time \\lt 2 \\times TimeoutInterval $, 从而 Seq100 不会被重传 累计确认机制避免了重传第一个段，如下图 p3 所示，Seq92 和 Seq100 已经被确认，虽然 ACK100 丢失，但 ACK120 被接收，由于累计确认机制，Seq92 和 Seq100 都被确认，因此不会被重传 > p1: Retransmission due to a lost acknowledgment > p2：Segment 100 not retransmitted > p3: A cumulative acknowledgment avoids retransmission of the first segmen Fast Retransmit 当比期望序号大的失序报文段到达，接收方立即发送冗余 ACK（duplicate ACK），指明下一个期待字节的序号如果发送方收到一个确认后再收到 3 个对同样报文段的确认，发送方应意识到不对劲。生成三个重复 ACK，是因为接收方存在缺失报文段；于是启动快速重传(fast retransmit): 在定时器超时之前重发丢失的报文段 12345678910111213event: ACK received, with ACK field value of yif (y &gt; SendBase) { SendBase = y if (there are currently not-yet-acknowledged segments) start timer }else { increment count of dup ACKs received for y if (count of dup ACKs received for y == 3) { resend segment with sequence number y }} GBN or SR TCP 错误恢复机制是 GBN（Go-Back-N）协议还是 SR（Selective Repeat）协议？ TCP 的确认是累积的，正确接收但是顺序错误的段并不会被接收者单独确认。因此，TCP 发送者只需要维护传输但未确认的字节的最小序列号（SendBase）和下一个要发送的字节的序列号（NextSeqNum）。从这个意义上说，TCP 看起来很像一个 GBN 风格的协议。但是 TCP 和 GBN 之间有一些显著的差异。许多 TCP 实现会缓存(buffer)正确接收但顺序错误的 Segment [Stevens 1994]。对 TCP 的一项提议修改，所谓的选择性确认 [RFC 2018]，允许 TCP 接收者选择性地确认顺序错误的段，而不是只是累积地确认最后正确接收的，顺序正确的段。当与选择性重传结合使用，TCP 看起来很像我们的通用 SR 协议。因此，TCP 的错误恢复机制可能最好被分类为 GBN 和 SR 协议的混合体。 Flow ControlTCP 通过让发送方维护一个称为接收窗口（receive window）的变量来提供流量控制。通俗的说，接收窗口用于给发送方一个指示——该接收方还有多少可用的缓存空间。因为 TCP 是全双工通信，在连接两端的发送方都各自维护一个接收窗口。接收窗口（rwnd）和接收缓存（RcvBuffer）如下图所示： 通过 TCP 连接的主机都会为连接设置一个接收缓冲区。当 TCP 连接接收到正确且顺序正确的字节时，它会将数据放入接收缓冲区(TCP data in buffer)。相关的应用程序进程(Application process )将从这个缓冲区读取数据。进程从 buffer 中读取数据的时机是不确定的，可能在数据到达的瞬间读取，也可能在数据到达很久之后才尝试读取数据。如果应用程序读取数据的速度相对较慢，发送者很容易通过过快地发送过多的数据来溢出连接的接收缓冲区。 TCP 为其应用程序提供了一种流量控制服务 Flow Control，以消除发送者溢出接收者缓冲区的可能性。因此，流量控制是一种速度匹配服务(匹配发送者发送的速率与接收应用程序读取的速率)。 如前所述，由于 IP 网络内的拥塞，TCP 发送者也可能被节流(throttled)；这种称为拥塞控制 Congestion Control。尽管流量控制和拥塞控制采取的行动相似（即节流发送者），但它们显然是出于非常不同的原因。 TCP 通过让发送者维护一个叫做 receive window 的变量来提供流量控制。接收窗口用于告诉 sender 关于 receiver 有多少可用缓冲区空间的信息。因为 TCP 是全双工的，连接的每一侧的发送者都维护一个独立的接收窗口。让我们在文件传输的上下文中研究接收窗口。 假设主机 A 正在通过 TCP 连接向主机 B 发送一个大文件。主机 B 为这个连接分配一个接收缓冲区；表示其大小为 RcvBuffer。不时地，主机 B 的应用程序进程从缓冲区中读取数据。定义以下变量： LastByteRead：这是应用程序从接收缓冲区中读取的数据流的最后一个字节的序号。换句话说，这是应用程序最后读取的数据的字节序号。例如，如果 LastByteRead 的值为 1000，那么意味着应用程序已经读取了序号为 1 到 1000 的字节。 LastByteRcvd：这是已经从网络到达并被放入主机 B 的接收缓冲区的数据流的最后一个字节的序号。换句话说，这是最后一个被接收并放入缓冲区的数据的字节序号。例如，如果 LastByteRcvd 的值为 1500，那么意味着已经接收了序号为 1 到 1500 的字节，并且这些字节已经被放入了接收缓冲区。 $LastByteRcvd - LastByteRead$即为应用程序未读取的数据量，它存放于 Buffer 中 因为 TCP 不允许溢出分配的缓冲区，我们必须有 $LastByteRcvd – LastByteRead \\lt RcvBuffer$接收窗口，表示为 rwnd，设置为缓冲区的空闲空间：$rwnd = RcvBuffer – (LastByteRcvd – LastByteRead)$，因为空闲空间随时间变化，rwnd 是动态变化的。 连接如何使用变量 rwnd 来提供流量控制服务呢？ 主机 B 通过在每个发送给 A 的 Segment 的接收窗口字段(Receieve Window)中放置其 rwnd 的当前值，告诉主机 A 连接缓冲区中有多少空闲空间。最初，主机 B 设置$rwnd = RcvBuffer$。注意，要实现这一点，主机 B 必须跟踪几个特定于连接的变量。 反过来，主机 A 跟踪两个变量，LastByteSent 和 LastByteAcked。这两个变量之间的差值 $LastByteSent – LastByteAcked$ 表示 A 已发送但未被确认的数据的量。通过保持未确认的数据量小于 rwnd 的值，主机 A 可以确保它没有溢出接收者的缓冲区。 这个方案有一个小的技术问题。为了看到这一点，假设主机 B 的接收缓冲区变满了，所以 rwnd = 0。在向主机 A 广告 rwnd = 0 后，假设 B 没有任何数据要发送给 A。现在考虑会发生什么。当 B 的应用程序进程清空缓冲区时，TCP 不会向主机 A 发送新的段和新的 rwnd 值；实际上，只有当 TCP 有数据要发送，或者有确认要发送时，才会向主机 A 发送段。因此，主机 A 永远不会被通知主机 B 的接收缓冲区已经有了一些空间——主机 A 被阻塞了，不能再传输任何数据为了解决这个问题，TCP 规范要求主机 A 得知 B 的接收窗口为零时继续发送带有一个数据字节的段。这些段将被 B 确认。最终，缓冲区将开始清空，确认将包含一个非零的 rwnd 值。Flow Control Animations UDP 不提供流量控制，因此，由于缓冲区溢出，接收者可能会丢失段。例如，考虑从主机 A 的一个进程发送一系列 UDP 段到主机 B 的一个进程。对于典型的 UDP 实现，UDP 会将段附加在一个有限大小的缓冲区中，这个缓冲区“位于”相应的套接字之前。进程一次从缓冲区中读取一个完整的段。如果进程从缓冲区中读取段的速度不够快，缓冲区将溢出，段将被丢弃。 Flow Control例题 Q: 主机甲和主机乙之间已建立一个TCP连接，TCP最大段长度为1000字节，若主机甲的当前拥塞窗口为5000字节，在主机甲向主机乙连接发送2个最大段后，成功收到主机乙发送的第一段的确认段，确认段中通告的接收窗口大小为3000字节，则此时主机甲还可以向主机乙发送的最大字节数是？A: 第一个段的ACK段中通告的接收窗口rwnd大小为3000字节，即表明在接受到第一个报文段后，还有2000字节的缓存空间可用。 由于发送方发送了二个报文段，第二个段将占用剩下的3000字节中的1000字节，即一共还有 3000-1000=2000字节，min{2000,CongestionWindowSize} = 2000,所以此时主机甲还可以向主机乙发送的最大字节数是2000Byte TCP Connection ManagementHow a TCP connection is established and torn down? three-way handshake假设一个主机（客户端）上的进程希望与另一个主机（服务器）上的进程建立连接。客户端应用程序首先通知客户端的 TCP 它希望与服务器中的进程建立连接。然后，客户端的 TCP 按照以下方式与服务器的 TCP 建立连接： Step 1：客户端 TCP 首先向服务器 TCP 发送一个特殊的 TCP 段。这个特殊段中不包含应用层数据。但是段头部(Segment Header)中的 SYN 标志位，被设置为 1。因此，这个特殊段被称为 SYN Segment。此外，客户端随机选择一个初始序列号（client_isn），并将此号码放入初始 TCP SYN 段的序列号字段中。此段被封装在一个 IP 数据报中并发送到服务器 Step 2：一旦包含 TCP SYN 段的 IP 数据报到达服务器主机，服务器将 TCP SYN 段从数据报中提取出来，为连接分配 TCP 缓冲区和变量，并向客户端 TCP 发送连接确认段。这个连接确认段也不包含应用层数据。然而，它在段头部包含三个重要的信息。首先，SYN 位被设置为 1。其次，TCP 段头部的确认字段被设置为 client_isn+1。最后，服务器选择自己的初始序列号（server_isn）并将此值放入 TCP 段头部的序列号字段中。这个连接确认段实际上在说，“我收到了你的 SYN 包，要求以你的初始序列号 client_isn 开始一个连接。我同意建立这个连接。我的初始序列号是 server_isn。”这个连接确认段被称为 SYNACK 段。 Step 3：收到 SYNACK 段后，客户端也为连接分配缓冲区和变量。然后，客户端主机向服务器发送另一个段；这个最后的段确认了服务器的连接确认段（客户端通过将值 server_isn+1 放入 TCP 段头部的确认字段中来做到这一点）。SYN 位被设置为零，因为连接已经建立。第三次握手时客户端可以在报文中加入数据 为什么需要三次握手三次握手（Three-Way Handshake）是 TCP/IP 协议中建立连接的过程，其主要目的是在两个 TCP 节点之间建立一个可靠的连接。这个过程为什么需要三次握手，主要有以下几个原因：确认双方的接收与发送能力：三次握手确保了双方都有发送和接收数据的能力。当客户端发送 SYN 包给服务器时，这表明客户端有发送数据的能力；当服务器回应 SYN-ACK 包给客户端时，这表明服务器有接收和发送数据的能力；当客户端再回应 ACK 包给服务器时，这表明客户端有接收数据的能力。防止过期的连接请求到达服务器：如果只有一次握手，那么过期的连接请求可能会导致服务器错误地打开连接。例如，如果客户端发送了一个连接请求，但是因为网络延迟，这个请求晚到了，而在此期间，客户端已经关闭了连接，那么如果服务器接收到这个过期的请求，就会错误地打开一个已经不存在的连接。而三次握手可以防止这种情况，因为即使服务器接收到了过期的第一个 SYN 包，但是在没有收到最后一个 ACK 包之前，服务器是不会打开连接的。初始化序列号：每个 TCP 连接都有各自独立的序列号，这些序列号在连接过程中被初始化。客户端和服务器都在 SYN 包中发送自己的初始序列号，这样，双方都能知道对方的初始序列号，以便后续的数据传输。 four-way handshake Step 1: 客户发送 TCP FIN 控制报文段到服务器 Step 2: 服务器接收 FIN, 回复 ACK. 进入半关闭连接状态； Step 3: 服务器发送 FIN 到客户，客户接收 FIN, 回复 ACK，进入 “time wait”状态等待结束时释放连接资源 Step 4: 服务器接收 ACK. 连接关闭. 为什么需要四次挥手，而不是两次或者三次呢？这是因为 TCP 是一个全双工协议，也就是说，数据可以在两个方向上同时传输。因此，每个方向都需要一个 FIN 和一个 ACK。A 需要告诉 B 它已经没有数据要发送了（FIN-1），并且需要确认 B 已经知道这一点（ACK-2）。同样，B 也需要告诉 A 它已经没有数据要发送了（FIN-2），并且需要确认 A 已经知道这一点（ACK-1）。这就是为什么我们需要四次挥手来关闭一个 TCP 连接。 TCP State Principles of Congestion Control拥塞 Congestion从信息角度看: “太多源主机发送太多的数据，速度太快以至于网络来不及处理”表现:丢失分组 (路由器的缓冲区溢出)长延迟 (在路由器的缓冲区排队) 流量控制主要目的是防止发送端发送过多的数据，从而溢出接收端的缓冲区。拥塞控制的目标是防止过多的数据填充网络，以避免网络拥塞。当网络中的数据包过多，超过了网络的承载能力，就会导致网络拥塞。网络拥塞可能导致数据包的丢失，进而引发发送端的超时重传，这反过来又会加剧网络拥塞，形成恶性循环。 The Causes and the Costs of Congestion 当分组的到达速率接近链路容量时，分组经历巨大的排队时延； 发送方在遇到大时延时所进行的不必要重传会引起路由器利用其链路带宽来转发不必要的分组副本； 当一个分组沿一条路径被丢弃时，每个上游路由器用于转发该分组到丢弃该分组而使用的传输容量最终被浪费掉； Approaches to Congestion Control端到端拥塞控制 End-to-end congestion control在端到端拥塞控制方法中，网络层没有为运输层拥塞控制显示支持。即使网络中存在拥塞，端系统也必须通过对网络行为的观察来判断；网络辅助的拥塞控制 Network-assisted congestion control网络辅助的拥塞控制中，路由器向发送方提供关于网络中拥塞状态的显示反馈信息； TCP Congestion ControlTCP 采取的方法是让每个发送者根据感知到的网络拥塞情况来限制其发送流量的速率。如果 TCP 发送者感知到自己和目的地之间的路径上几乎没有拥塞，那么 TCP 发送者会增加其发送速率；如果发送者感知到路径上存在拥塞，那么发送者会降低其发送速率。但是这种方法引出了三个问题。首先，TCP 发送者如何限制其向其连接发送流量的速率？其次，TCP 发送者如何感知到自己和目的地之间的路径上存在拥塞？第三，发送者应该使用什么算法来根据感知到的端到端拥塞来改变其发送速率？ 如何限制速率前文讲到每个 TCP 连接的两端都有一个接收缓冲区，一个发送缓冲区，以及几个变量（LastByteRead，rwnd 等）。实现拥塞控，，需要维护一个额外的变量，即拥塞窗口 congestion window,记为 cwnd，对 TCP 发送者可以向网络发送流量的速率施加了约束。 $$ LastByteSent-LastByteACKed\\le \\min\\{CongWin,RcvWindow\\} \\\\ 大体上有 rate = \\frac{CongWin}{RTT} Bytes/sec $$ 上面的约束限制了发送者处未确认的数据量，因此间接地限制了发送者的发送速率。 如何感知拥塞当存在过度拥塞时，路径上的一个（或多个）路由器缓冲区会溢出，导致一个数据报（包含一个 TCP 段）被丢弃。丢弃的数据报反过来导致发送者处出现一个丢失事件——要么超时，要么接收到三个重复 ACK——这被发送者视为发送者到接收者路径上存在拥塞的指示。 因为 TCP 使用确认来触发（或时钟）其拥塞窗口大小的增加，所以 TCP 被称为自计时(self-clocking)。TCP 基于本地信息设置它们的发送速率的指导性原则： 一个丢失的报文段表意味着拥塞，TCP 发送方在丢失事件发生后降低发送速率 (通过减少 CongWin) 一个确认报文段指示该网络正在向接收方交付发送方的报文段，因此，当对先前未确认报文段的确认到达时，能够增加发送方的速率； 探求带宽 Bandwidth probing. 拥塞控制算法实现 拥塞控制算法主要包括慢启动（slow-start）、拥塞避免（congestion avoidance）、快速恢复（fast recovery） 在慢启动（slow-start）状态，cwnd的初始值为 1 个 MSS， 每当传输的报文段首次被确认就增加 1 个 MSS。TCP 发送速率起始很慢，但在慢启动阶段以指数增长，尽快达到期待的速率，故将以 2 的指数方式增加速率，直到产生丢失事件，或者 cwnd 大于等于 ssthresd(进入 Congestion Avoidance 模式),cwnd 会由指数增长变为线性增长 MSS: Maximum Segment Size, 一个 TCP 报文段的最大长度ssthresh: slow start threshold, 慢启动阈值 如果存在一个由超时指示的丢包事件，TCP 发送方将 cwnd(Congestion Window)设置为 1 并重新开始慢启动过程。并将变量 ssthresh设置为 cwnd/2收到三个重复的确认时,将变量 ssthresh设置为 cwnd/2, cwnd设置为 ssthresh(更新后的) + 3MSS，并进入快速恢复状态 怎么理解不同的丢包事件？3 个重复的 ACKs 表明网络具有传输一些数据段的能力在三个重复的确认之前超时，表明网络不具备传输数据段的能力上述为 TCP Reno 版本的内容，在 TCP Tahoe 版本里，无论超时还是三个重复，都直接将 CongWin 置为 1 个 MSS 三个状态变换 FSM 如下图： TCP AIMD(Additive-increase,multiplicative-decrease)发送方增加传输速率（窗口大小），探测可用带宽，直到发生丢包事件乘性递减: 发生丢包事件后将拥塞窗口减半加性递增: 每个 RTT 内如果没有丢失事件发生，拥塞窗口增加一个 MSS Congestion Control例题 Q 主机甲和主机乙已建立了 TCP 连接，甲始终以 MSS=1KB 大小的段发送数据，并一直有数据发送；乙每收到一个数据段都会发出一个接收窗口为 10KB 的确认段。若甲在 t 时刻发生超时时拥塞窗口为 8KB，则从 t 时刻起，不再发生超时的情况下，经过 10 个 RTT 后，甲的发送窗口是A ssthresh 被设定为 8 的一半即 4，拥塞窗口被设为 1KB;拥塞窗口经 10 个 RTT 依次变化为 2、4（未超过 ssthresh 值之前以指数级增长，后面超过 ssthresh 之后以数量级增长）、5、6、7、8、9、10、11、12，最终达到 12KB;而流量控制的角度出发，接受窗口恒为 10KB,发送方的发送窗口=min(拥塞窗口，接收窗口),故最后答案是 10KB 总结 当 CongWin 低于阀值, 发送方处于慢启动阶段, 窗口指数增长. 当 CongWin 高于阀值, 发送方处于拥塞避免阶段, 窗口线性增长. 当三个重复的 ACK 出现时,阀值置为 CongWin/2 并且 CongWin 置为阀值加上 3 个 MSS 并进入快速恢复阶段，此时每收到一个重复的 ACK 拥塞窗口增加 1MSS，如果收到新的 ACK 则 cwnd = ssthresh 当超时发生时 ，阀值置为 CongWin/2 并且 CongWin 置为 1 MSS. TCP 平均吞吐量假设忽略慢启动假设在丢失发生时，设 W 是窗口大小如果窗口为 W, 吞吐量是 W/RTT丢失发生后, 窗口降为 W/2, 吞吐量为 W/2RTT.平均吞吐量为 0 .75 W/RTT TCP CUBICCUBIC 是一种 TCP 拥塞控制算法，它是 Linux 内核的默认拥塞控制算法。CUBIC 主要用于长距离、高带宽网络，它的目标是更充分地利用可用带宽，同时保持网络的稳定性。 CUBIC 的关键特性是它的拥塞窗口调整函数，这个函数是时间的三次立方函数。这与传统的 TCP 拥塞控制算法（如 TCP Reno 或 TCP NewReno）不同，后者使用线性或者二次函数来调整拥塞窗口。 CUBIC 的工作原理如下： 当网络出现拥塞（例如，丢失了一个数据包）时，CUBIC 会减小其拥塞窗口，就像其他 TCP 拥塞控制算法一样。 当网络没有拥塞时，CUBIC 不会像传统的 TCP 算法那样线性地增加其拥塞窗口。相反，它会根据时间的立方函数来增加拥塞窗口。这意味着在网络条件良好时，CUBIC 可以更快地增加其发送速率。 当网络再次出现拥塞时，CUBIC 会再次减小其拥塞窗口，但是减小的速度会比上次慢。这使得 CUBIC 能够更好地适应网络的变化，避免过度反应。 CUBIC 的这些特性使其在高带宽、长距离的网络环境中表现得非常出色，这也是为什么它被选为 Linux 内核的默认拥塞控制算法。","link":"/UESTC/ComputerNetworking/Ch5-2TransportLayer/"},{"title":"Glossary Of Networks","text":"OSI Model实体 任何可发送或接受信息的硬件或软件进程对等实体 收发双方层次相同中的实体协议 Protocol 控制两个对等实体进行逻辑通信的规则的集合协议三要素： 语法：定义所交换信息的格式 语义：定义收发双方所要完成的操作 同步：定义收发双发的时序关系服务 Service 在协议的控制下,两个对等实体间的逻辑通信使得本层能够向上层提供的功能;要实现本层的功能,又需要使用下层提供的服务服务访问点 在统一系统中相邻两层的实体交换信息的逻辑接口,用于区分不同的服务类型; 数据链路层的服务访问点为帧的类型字段 网络层的服务访问点为 IP 数据报首部中的协议字段 运输层的服务访问点为端口号协议数据单元 PDU 对等层次之间传送的数据包服务数据单元 SDU 同一系统内,层间交换的数据包多个 SDU 可以组成一个 PDU,也可以将一个 SDU 分成多个 PDU Physical Layer机械特性 Mechanical Characteristics 定义物理连接特性,包括 采用的规格,接口形状,引线数目,排列情况,引脚数量电气特性 Electrical Characteristics 传输二进制时,传输信号的电压范围,阻抗匹配,传输速率,距离限制功能特性 Functional Characteristics 描述电平的意义,接口部件,信号线用途等过程特性 Procedural Characteristics 规定 各个物理线路工作规程,时序关系 电气特性根据电压确定电平,功能特性则是根据电平确定信号的意义 信道 Channel,信道不等于电路，信道表示向某一方向传送信息的媒体，一条通信电路通常包含一条发送信道和一条接受信道。严格来说，传输媒体不能和信道划等号,对于单工传输，传输媒体只包含一个信道，要么是发送信道，要么是接收信道。对于半双工和全双工，传输媒体中要包含两个信道，一个发送信道，另一个是接收信道。如果使用信道复用技术，一条传输媒体还可以包含多个信道 数据 (data) —— 运送消息的实体 信号 (signal) —— 数据的电气的或电磁的表现 模拟信号 (analogous signal) —— 代表消息的参数的取值是连续的 数字信号 (digital signal) —— 代表消息的参数的取值是离散的 码元 (code) —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形 基带信号（即基本频带信号）—— 来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行调制 (modulation) 编码Encoding 是将信息转化为特定格式以便传输和存储的过程。在数字通信中，信息通常以二进制形式表示，即由一串 0 和 1 组成。常见的编码方式包括不归零编码（NRZ）、非归零编码（RZ）、曼切斯特编码等。不归零编码将每个二进制位表示为一定的电平，低电平表示 0，高电平表示 1；非归零编码在每个二进制位的中间还添加了一个中间电平，以表示 0 或 1 的边界；曼切斯特编码将每个二进制位分成两个时间间隔，每个时间间隔表示 0 或 1。 调制Modulation 是将数字信号转化为模拟信号的过程，使得信号能够在传输介质中传播。模拟信号通常使用连续的变化来表示信息，如正弦波或方波。调制技术可以将数字信号转化为特定频率范围内的模拟信号，以方便传输和接收。常见的调制技术包括振幅调制（AM）、频率调制（FM）和相位调制（PM）等。振幅调制通过改变模拟信号的幅度来表示数字信号的 0 和 1；频率调制通过改变模拟信号的频率来表示数字信号的 0 和 1；相位调制通过改变模拟信号的相位来表示数字信号的 0 和 1。Ref: 编码和调制 Data Link Layer链路 Link 指从一个结点到相邻结点的一段物理线路，中间没有其他的交换结点数据链路 Data Link 把实现通信协议的硬件和软件加到链路上，就构成了数据链路Frame,帧,数据链路层的传输单位,由数据部分和控制部分组成ACK,确认帧,接收方收到帧后,返回一个确认帧,表示已经收到帧NAK,否定确认帧,接收方收到帧后,返回一个否定确认帧,表示帧出错,要求重发 OthersURL,Uniform Resource Locator,统一资源定位符,互联网上用来标识资源的地址。网络上的所有资源都靠 URL 来定位，每一个文件就对应着一个 URL，就像是路径地址。理论上，文件资源和 URL 一一对应。实际上也有例外，比如某些 URL 指向的文件已经被重定位到另一个位置，这样就有多个 URL 指向同一个文件。","link":"/UESTC/ComputerNetworking/GlossaryOfNetwork/"},{"title":"操作系统概论","text":"OS 的定义当前对于 OS 还没有一个统一的、适用的定义定义 1:操作系统是一组控制和管理计算机软硬件资源、合理地对各类作业进行调度以及方便用户使用的程序集合定义 2:操作系统是位于硬件层(HAL)之上，所有其它系统软件层之下的一个系统软件，使得管理系统中的各种软件和硬件资源得以充分利用，方便用户使用计算机系统 操作系统的目标和作用目标 方便性:操作系统使计算机更易于使用。 有效性:操作系统允许以更有效的方式使用计算机系统资源。 提高系统资源利用率 提高系统的吞吐量 可扩展性:在操作系统中,允许有效地开发，测试和引进新的系统功能。 开放性:实现应用程序的可移植性和互操作性,要求具有统一的开放的环境。 作用 OS 作为用户与计算机硬件系统之间的接口 计算机用户需要的用户命令 ：由 OS 实现的所有用户命令所构成的集合常被称为 OS 的 Interface(用户接口)；有时也称为命令接口。命令的表示形式： - 字符形式：较灵活但因繁琐而难记； - 菜单形式：试图在字符终端上提供友好的用户界面 - 图形形式：因直观而易记但不灵活。 应用软件需要的 System Call(系统调用)：由 OS 实现的所有系统调用所构成的集合被人们称为程序接口或应用编程接口(Application Programming Interface,API) 操作系统应隐藏复杂的、困难的、丑陋的、特殊的硬件细节，呈现给程序（程序员）良好、清晰、优雅、一致的抽象操作系统的任务就是创建好的抽象，并实现和管理它所创建的抽象 OS 作为计算机系统资源的管理者(软硬件资源) 处理机管理， 用于分配和控制处理机； 存储器管理，主要负责内存的分配与回收； I/O 设备管理，负责 I/O 设备的分配与操纵； 文件管理，负责文件的存取、共享和保护。 对于多用户系统，需要管理共享资源，避免发生冲突。 操作系统的任务是在相互竞争的程序之间有序地控制对硬件设备的分配资源管理包括用以下两种不同的方式实现多路复用（共享）资源 在时间上复用：当一种资源在时间上复用时，不同的程序“轮流”实用它；例如 CPU、打印机等 在空间上复用：每个客户都得到资源的一部分；例如内存、磁盘等 OS 用作扩充机器裸机：完全无软件的计算机系统。操作系统用来扩充机器功能，使其便于使用;在裸机上覆盖管理软件，实现对设备的操作，并向上提供一组操作命令;隐藏对设备操作的具体细节，实现对硬件操作的多个层次的抽象。通常把覆盖了软件的机器称为扩充机器或虚机器 操作系统的发展过程 无操作系统采用人工操作方式: 一台计算机的所有资源由用户独占，降低了计算机资源利用率，人操作慢，出现了严重的人机矛盾。缺点：用户独占全机,CPU 等待人工操作 单道批处理操作系统Single-programming System:系统对作业的处理都是成批进行的，且在内存中始终仅存一道作业运行，运行结束或出错，才自动调另一道作业运行，故称为单道批处理系统。单道批处理系统主要特征：自动性、顺序性、单道性。单道批处理系统主要优点：减少人工操作，解决了作业的自动接续。单道批处理系统主要缺点：平均周转时间长，没有交互能力。 多道批处理操作系统Multi-programming System: 在内存中存放多道作业运行，运行结束或出错，自动调度内存中的另一道作业运行。多道批处理系统主要特征：多道性、无序性、调度性（进程调度和作业调度）。多道批处理的主要优点：提高了资源利用率和吞吐能力。多道批处理的主要缺点：平均周转时间长，没有交互能力。多道批处理系统需要解决的 5 个问题 处理机管理：分配和控制 CPU。 存储器管理：内存分配与回收 I/O 设备管理：I/O 设备的分配与操纵。 文件管理：文件的存取、共享和保护。 作业管理：如何组织作业运行。 Multi-programming System vs Single-programing System单道系统是指一次只能运行一个程序的系统。在单道系统中，每个作业（Job）按顺序执行，直到完成后才能开始下一个作业。多道系统允许同时运行多个程序。在多道系统中，多个作业可以同时进入内存并并发执行。操作系统通过任务调度算法决定哪个作业获得处理器时间，以实现作业间的切换和共享资源。这样可以提高系统资源利用率和吞吐量。 分时操作系统(time-sharing OS):时间共享操作系统是一种允许多个用户同时共享系统资源的操作系统。在这种操作系统中，CPU 时间被分割成微小的片段，并依次分配给每个用户，使得每个用户都感觉到他们独占了整个系统。这种操作系统的主要目标是最大化 CPU 的利用率和响应时间。 特点 多路性：一个主机与多个终端相连； 独立性：彼此独立操作，互不干扰； 及时性：系统能在很短的时间得到回答； 交互性：能实现人机对话（区别于批处理系统）； 典型系统 Multics (MIT) UNIX 实时操作系统(real time OS):是计算机及时响应外部事件的请求，在规定的时间内完成对该事件的处理，并控制所有实时设备和实时任务协调一致的运行 特点 多路性：能对多个对象进行控制 独立性：独立运行，不混淆，不破坏 交互性：仅限于访问系统中某些特定的专用服务程序 可靠性：高可靠性，应具有多级容错防护能力 及时性：控制对象必须在截止时间内完成 分类 任务执行是否为周期性来划分周期性实时任务非周期性实时任务 按截止时间来划分硬实时任务软实时任务 操作系统的基本特征现代 OS 的四个基本特征： 并发性（最重要的特征） 共享性 虚拟性 异步性 并发是最重要的特征，其它特征都以并发为前提 并发 ConcurrencyKey: 区分并发 Concurrency&amp;并行 Parallelism 区分进程 Process&amp;线程 Thread&amp;程序 Program 共享 Sharing共享：是指系统中的资源可供内存中多个并发执行的进程共同使用。 互斥共享（Exclusive Sharing）：在这种方式下，一次只能有一个进程使用资源。当一个进程正在使用资源时，其他进程必须等待。这种方式通常用于那些不能同时被多个进程共享的资源，例如打印机、磁带驱动器等。 分时共享（Time-Sharing）：在这种方式下，资源在多个进程之间进行切换，每个进程在一段时间内独占资源。通过快速切换，可以使得用户感觉到他们似乎在同时使用资源。这种方式通常用于那些可以被多个进程共享的资源，例如 CPU、内存等。 同时共享（Concurrent Sharing）：在这种方式下，多个进程可以同时访问资源，而无需等待。这种方式通常用于那些可以被多个进程同时读取的资源，例如文件、数据库等。 虚拟共享（Virtual Sharing）：在这种方式下，每个进程都有一个资源的虚拟副本，使得每个进程都感觉到他们独占了资源。这种方式通常用于那些可以被复制的资源，例如虚拟内存、虚拟机等。 虚拟性 Virtualization虚拟：是指通过某种技术把一个物理实体变为（映射为）若干个逻辑上的对应物。时分复用技术虚拟处理机：分时实现虚拟设备：SPOOLING 技术空分复用技术虚拟磁盘技术：逻辑分区虚拟存储器：虚拟存储管理实现 异步性 Asynchrony异步 多道程序环境下程序（进程）以异步的方式执行，每道程序在何时执行、各自执行的顺序、完成时间都是不确定的，也是不可预知的。 操作系统的主要功能操作系统的主要任务是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。 操作系统应具有五方面的功能： 处理机管理（CPU） 存储器管理 设备管理 文件管理 方便用户使用的用户接口。 处理机管理功能按照一定的算法把处理机分配给进程（线程），并对其进行有效的管理和控制 进程控制主要功能：为作业创建进程、撤消（终止）已结束的进程，以及控制进程在运行过程中的状态转换。 进程同步和互斥主要任务是为多个进程(含线程)的运行进行协调。进程互斥方式：这是指诸进程在对临界资源进行访问时，应采用互斥方式。进程同步方式：指在相互合作去完成共同任务的诸进程间，由同步机构对它们的执行次序加以协调。（信号量机制） 进程通信 进程调度 存储器管理功能为多道程序的运行提供良好的环境，方便用户使用存储器，提高存储器的利用率以及能从逻辑上扩充内存。 内存分配内存分配的两种方式 ： 静态分配方式：每个作业的内存空间是在作业装入时确定。运行时不可再申请新的内存空间，也不允许作业在内存中“移动”。 动态分配方式：每个作业的内存空间是在作业装入时确定。但允许作业在运行过程中继续申请新的附加内存空间，以适应程序和数据的动态增长，也允许作业在内存中“移动”。 内存分配的主要任务是： 为每道程序分配内存空间，使它们“各得其所”。 提高存储器的利用率，尽量减少不可用的内存空间（碎片）。 允许正在运行的程序申请附加的内存空间，以适应程序和数据动态增长的需要。 内存保护确保每道用户程序都只在自己的内存空间内运行，彼此互不干扰。绝不允许用户程序访问操作系统的程序和数据，也不允许用户程序转移到非共享的其它用户程序中去执行。 地址映射为保证程序能正确运行，存储器管理必须提供地址映射功能，即能够将地址空间中的逻辑地址转换为内存空间中与之对应的物理地址。该功能应在硬件的支持下完成 内存扩充借助于虚拟存储技术，从逻辑上扩充内存容量 设备管理功能完成用户进程提出的 I/O 请求；为用户进程分配其所需的 I/O 设备；提高 CPU 和 I/O 设备的利用率；提高 I/O 速度；方便用户使用 I/O 设备。 缓冲管理：有效地缓和 CPU 和 I/O 设备速度不匹配的矛盾 ，提高 CPU 的利用率。 设备分配：根据 I/O 请求，分配其所需的设备。 设备处理：设备处理程序又称为设备驱动程序。 文件管理功能主要任务：对用户文件和系统文件进行管理，以方便用户使用，并保证文件的安全性。 文件存储空间的管理 目录管理 文件的读/写管理和保护 操作系统与用户之间的接口用户接口,由 OS 实现的所有用户命令所构成的集合常被人们称为 OS 的 Interface(用户接口)；有时也称为命令接口。该接口又进一步分为联机用户接口、脱机用户接口和图形用户接口三种。程序接口，由 OS 实现的所有系统调用所构成的集合被人们称为程序接口或应用编程接口(Application Programming Interface,API)。程序接口是为用户程序在执行中访问系统资源而设置的，是用户程序取得操作系统服务的唯一途径。 操作系统的结构设计操作系统是一个大型系统软件，其结构已经历了四代的变革： 第一代的 OS 是无结构的 第二代 OS 采用了模块式结构 第三代是层次式结构 现代 OS 结构是微内核结构 模块化结构（模块-接口法）使用分块结构的系统包含若干 module；其中，每个模块实现一组基本概念以及与其相关的基本属性。 块与块之间的相互关系 所有各块的实现均可以任意引用其它各块所提供的概念及属性。 优点提高了 OS 设计的正确性、可理解性和可维护性。增强了 OS 的可适应性。加速了 OS 的开发过程。 缺点对模块的划分及对接口的规定要精确描述很困难。从功能观点来划分模块时，未能将共享资源和独占资源加以区别。 层次结构使用分层系统结构包含若干 layer（层）；其中，每一层实现一组基本概念以及与其相关的基本属性。 层与层之间的相互关系 所有各层的实现不依赖其以上各层所提供的概念及其属性，只依赖其直接下层所提供的概念及属性； 每一层均对其上各层隐藏其下各层的存在。 层次的设置时应考虑的因素 程序嵌套 通常 OS 的每个功能的实现，并非是只用一个程序便能完成的，而是要经由若干个软件层才有可能完成，因此实现 OS 时，应考虑每个功能可能形成的程序嵌套。 运行频率 将那些经常活跃的模块放在最接近硬件的层 公用模块 把供多种资源管理程序调用的公用模块，设置在最低层，以便调用。 用户接口 命令接口、程序接口以及图形用户接口。这些接口应设置在 OS 的最高层，直接提供给用户使用。 微内核技术所谓微内核技术，是指精心设计的、能实现现代 OS 核心功能的小型内核，它与一般的 OS(程序)不同， 它更小更精炼，它不仅运行在核心态，而且开机后常驻内存， 它不会因内存紧张而被换出内存。当前比较流行的、能支持多处理机运行的 OS 几乎全部都采用了微内核结构，如 Mach OS，windows 2000 微内核所提供的功能，通常都是一些最基本的功能，如进程管理、低级存储器管理、中断和陷入处理、进程间通信、低级 I/O 功能 微内核特点 足够小的内核。 基于客户/服务器模式 应用“机制与策略分离”原理 采用面向对象技术","link":"/UESTC/OS/Ch1-1OSIntroduction/"},{"title":"进程的描述及控制","text":"前驱图和程序执行 Precedence Graph and Program Execution前驱图 Precedence Graph前趋图(Precedence Graph):一个有向无循环图 DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。图中的每个结点可用于表示一条语句、一个程序段等；结点间的有向边表示在两个结点之间存在的前趋关系。初始结点(InitialNode) 前趋图中没有前趋的结点终止结点(FinalNode) 前趋图中没有后继的结点 →={(Pi, Pj)|Pi must complete before Pj may start} (Pi, Pj)∈→ 或 Pi→Pj Pi是Pj的直接前趋，Pj是Pi的直接后继。 若一个程序由若干程序段（即操作）组成，而这些操作必须按照某种先后次序执行，这类执行过程就是程序的顺序执行。 程序执行 Program Execution程序执行方式 顺序执行—单道批处理系统 并发执行–多道批处理系统 应用级并发是指若干应用程序的并发执行。 系统级并发是指操作系统自身软件的并发执行。 顺序执行 若一个程序由若干程序段（即操作）组成，而这些操作必须按照某种先后次序执行，这类执行过程就是程序的顺序执行 顺序性：处理机的操作严格按照程序所规定的顺序执行。 封闭性：程序运行时独占全机资源，程序一旦开始执行，其执行结果不受外界因素影响。 可再现性：只要程序执行时的环境和初始条件相同，都将获得相同的结果。 并发执行的特征 间断性：由于它们共享系统资源，以及为完成同一项任务而相互合作，致使在这些并发执行的程序之间，形成了相互制约的关系，导致并发程序具有“执行——暂停——执行”这种间断性的活动规律。 失去封闭性：是多个程序共享系统中的各种资源，因而这些资源的状态将由多个程序来改变，致使程序的运行已失去了封闭性。 不可再现性：程序在并发执行时，由于失去了封闭性，导致不可再现性 。 进程的描述 ProcessDefinition,Features,Components,States为什么引入进程? 并发执行：进程使得多个任务可以在同一时间段内交替执行，这种并发执行使得 CPU 可以在等待一个任务的 IO 操作完成时执行另一个任务，从而提高了系统的效率和吞吐量。独立性：每个进程都有自己的私有地址空间，这意味着一个进程不能直接访问另一个进程的内存。这种内存保护机制有助于防止一个进程意外或恶意地干扰另一个进程。简化编程模型：在没有进程的情况下，程序员必须手动管理多任务执行和资源分配。有了进程，这些任务就由操作系统自动处理，程序员可以专注于应用程序的逻辑。资源管理：进程是资源分配和管理的基本单位。操作系统可以根据每个进程的需要和优先级分配资源，如 CPU 时间、内存空间等。 [ProcessvsThread#Process] 进程控制块 PCBPCB 是操作系统中用于描述进程的一种数据结构，它是操作系统中最重要的数据结构之一。PCB 中包含了进程的所有信息，是操作系统对进程进行控制和管理的数据结构。它包含以下主要信息： 进程标识符信息 处理机的状态信息 进程的调度信息 进程控制信息 PCB 的主要信息 进程标识符 PID 进程标识符用于唯一地标识一个进程。一个进程通常有两种标识符： 内部标识符。为每一个进程赋予一个唯一的数字标识符，通常是进程的序号。设置内部标识符主要是为了方便操作系统使用。 外部标识符。它由创建者提供，通常是由字母、数字组成，往往是由用户（进程）在访问该进程时使用。 处理机状态信息 Processor State Information 处理机状态信息主要是由处理机的各种寄存器的内容组成的。例如: 通用寄存器，又称为用户可视寄存器。 指令计数器 PC，其中存放了要访问的下一条指令的地址。 程序状态字 PSW，其中含有状态信息，如条件码、执行方式、中断屏蔽标志等 用户栈指针 SP，用于存放系统调用参数及调用地址。栈指针指向该栈的栈顶。 进程调度信息 Scheduling Information 在 PCB 中还存放一些与进程调度和进程对换有关的信息。 进程状态。指明进程的当前状态 进程优先级。 事件。是指进程由执行状态转变为阻塞状态所等待发生的事件，即阻塞原因。 其它信息。如：进程已等待 CPU 的时间总和、进程已执行的时间总和等；可参考linux kernel sched.h task_struct结构 进程控制信息 Process Control Information 程序和数据的地址 进程的程序和数据所在的内存或外存地址。 进程同步和通信机制 实现进程同步和进程通信时必需的机制，如消息队列指针、信号量等。 资源清单 进程所需的全部资源及已经分配到该进程的资源的清单； 链接指针 本队列下一个进程的 PCB 的首地址。 PCB 的组织方式 线性方式:把系统中所有的 PCB 都组织在一张线性表中。 链接方式:把具有同一状态的 PCB，用其中的链接指针链接成一个队列。(通常，可根据等待事件的不同，组织多个不同的阻塞队列,如等待打印机和等待内存等) 索引方式:相同状态的进程 PCB 组织在一张表格中，系统根据所有进程的状态建立几张索引表，系统分别记载各 PCB 表格的起始地址因为进程的主要操作就是插入和删除，因此，链接方式使用更多一些 PCB 的作用进程控制块的作用是使一个在多道程序环境下不能独立运行的程序（含数据），成为一个能独立运行的基本单位(进程)。在进程的整个生命期中，操作系统总是通过 PCB 对进程进行控制的。所以说，PCB 是进程存在的唯一标志。OS 是根据 PCB 来对并发执行的进程进行控制和管理的，如：进程创建：分配进程控制块进程调度：保存和读取进程控制块进程撤销：回收进程控制块 进程控制 Process Control定义进程控制 Process Control:操作系统的核心功能之一。包括进程的创建,终止,调度,状态转换,同步,通信等。进程控制一般是由 OS 内核中的一组原语来实现的。原语 Primitive:操作系统内核或微核提供核外调用的过程或函数称为原语,其由若干条指令构成，用于完成特定功能的一段程序。原语在执行过程不允许被中断。原子操作 Atom Operation：执行中不能被其它进程（线程）打断的操作就叫原子操作。当该次操作不能完成的时候，必须回到操作之前的状态，原子操作不可拆分。内核 Kernel:计算机硬件的第一层扩充软件，为系统对进程控制、存储器管理等提供有效的机制。内核常驻内存，紧靠硬件，运行效率较高。在不同操作系统中，内核所包含的功能不尽相同，但一般应包含以下功能：支撑功能:中断处理,时钟管理,原语操作资源管理功能:进程管理,存储器管理,设备管理 进程的创建与终止进程创建原语执行的操作: 申请空白 PCB。 为新进程分配资源。 初始化进程控制块。 初始化标识信息。 初始化处理机状态信息。使程序计数器指向程序的入口地址，使栈指针指向栈顶； 初始化处理机控制信息：进程的状态、优先级。 将新进程插入就绪队列，启动调度。 引起进程创建的主要事件 用户登录作业调度提供服务应用请求 引起进程终止的事件 正常结束。 异常结束： 越界错误。 保护错。 非法指令。 特权指令错。 运行超时。 等待超时。 算术运算错、被 0 除： I/O 故障。 外界干预:外界干预并非指在本进程运行中出现了异常事件，而是指进程应外界的请求而终止运行。 操作员或操作系统干预。由于某种原因，例如，发生了死锁，由操作员或操作系统终止该进程； 父进程请求终止该进程； 当父进程终止时，OS 也将他的所有子孙进程终止。 进程的终止过程 根据被终止进程的 PID 找到它的 PCB，从中读出该进程的状态。 若被终止进程正处于执行状态，应立即终止该进程的执行，重新进行调度。 若该进程还有子孙进程，立即将其所有子孙进程终止。 将被终止进程所拥有的全部资源，归还给其父进程，或者归还给系统。 将被终止进程的 PCB 从所在队列中移出 进程的阻塞与唤醒 Block and Wakeup引起进程阻塞的原因 请求系统服务。 启动某种操作：如 I/O 操作。 新数据尚未到达。 无新工作可做 进程阻塞的过程 处于运行状态的进程，在其运行过程中期待某一事件发生，如等待键盘输入、等待磁盘数据传输完成、等待其它进程发送消息，当被等待的事件未发生时，由进程自己执行阻塞原语 block，使自己由运行态变为阻塞态。可见，进程的阻塞是进程自身的一种主动行为。 正在执行的进程，当发现上述某事件时，由于无法继续执行，于是进程便通过调用阻塞原语block把自己阻塞；（阻塞是主动行为） 把进程控制块中的现行状态由running改为blocked，并将 PCB 插入阻塞队列； 转调度程序进行重新调度，将处理机分配给另一就绪进程，并进行切换。 进程的唤醒过程 当被阻塞进程所期待的事件出现时，例如，当进程提出 I/O 请求时，进程会进入到阻塞状态，但是不能让这个进程一直处于阻塞状态，等到其 I/O 操作完成时，那么系统就要采用唤醒原语 wakeup 唤醒这个处于阻塞的进程，以使它继续执行。 当被阻塞进程所期待的事件出现时，则由有关进程（比如，用完并释放了该 I/O 设备的进程）调用唤醒原语 wakeup()，将等待该事件的进程唤醒。（唤醒是一种被动行为） 唤醒原语的执行过程是：把被阻塞的进程从等待该事件的阻塞队列中移出将其 PCB 中的现行状态由阻塞改为就绪将该 PCB 插入到就绪队列中等待 CPU 调度 进程的挂起与激活 Suspend and Active当有引起进程挂起的事件，系统利用挂起原语suspend（）将指定进程或者处于阻塞状态的进程挂起。当有发生激活进程的事件发生，若该进程在外存中已有足够的空间时，可将在外存上处于静止就绪的进程从外存调入内存，系统利用激活原语active()将指定进程激活 进程的挂起当出现了引起进程挂起的事件时，系统将利用挂起原语suspend()将指定进程挂起或处于阻塞状态的进程挂起。（挂起是主动行为）调用挂起原语的进程只能挂起自己或其子孙进程;内核的 sleep()函数是在挂起原语的基础上利用定时器实现的。 挂起原语的执行过程 检查将要被挂起的进程的状态running：将该进程的 PCB 中的现行状态由running改为ready suspend,设置 CPU 调度标志为真；ready: PCB 中的现行状态由running改为ready suspend；blocked：将该进程的 PCB 中的现行状态由blocked改为blocked suspend； 将被挂起进程的 PCB 复制到指定的内存区域。 若处于运行状态，则转向调度程序重新调度 Ex:请判断下列说法哪些的正确的？ 进程可以由自己创建(❌,进程可以创建子进程,但不能自己创建自己) 进程可以由自己阻塞 进程可以由自己挂起 进程可以由自己激活 进程可以由自己唤醒 进程可以由自己撤消","link":"/UESTC/OS/Ch2-1ProcessContorl/"},{"title":"ProcessSync","text":"进程的同步定义 Definition每一个进程具有顺序性，但是在多道程序设计系统中，多个进程要竞争，轮流占用处理器。有两个进程 A 和 B，它们各自顺序执行时的操作序列如下：进程 A ： a1，a2，a3，…，am进程 B ： b1，b2，b3，…，bm在多道程序设计系统中，处理器可能执行的操作序列a1， b1 ，a2， b2 ，a3， b3 …a1， a2， b1 ，a3 ，b2 ，b3 … 进程的并发性:在一个进程的工作没有完成之前，另一个进程就可以开始工作，这些进程就称为可同时执行的。或者称它们具有并发性，并且把可同时执行的进程称为并发进程。 如果一个进程的执行不影响另一个进程的执行结果，也不依赖另一个进程的进展情况，即它们是各自独立的，则称这些进程相互之间是无关的。 如果一个进程的执行要依赖其他进程的进展状况，或者可能会影响其他进程的执行结果，则说这些进程是有交互的。 对于有交互的并发进程来说，并发会破坏“封闭性”和“可再现性” 进程互斥:多个进程不能同时使用同一个资源，某个进程使用该资源时，其他进程必须等待。进程同步:多个进程的调用存在时序关系，某些进程的执行必须先于另一些进程。进程通信:多个进程之间传递消息。 问题引入 Intro由于进程交替修改了共享变量造成结果可能不正确。 123456789101112131415 生产者 消费者 register1∶ = counter; register2∶= counter; register1∶= register1+1; register2∶ = register2-1; counter∶= register1; counter∶ = register2;假设：counter的当前值是5。无论生产者先执行，还是消费者先执行，结果都是5.但是，如果按下述顺序执行： register1 ∶ = counter; (register1 = 5) register1 ∶ = register1 + 1; (register1 =6) register2 ∶ = counter; (register2 = 5) register2 ∶ = register2 - 1; (register2=4) counter ∶ = register 1; (counter=6) counter ∶ = register2; (counter=4)Counter的值最终为4。两次结果不一致，程序执行失去了再现性 有交互的并发进程执行时出现与时间有关(time-dependent,即与进程调度的顺序有关)的错误，其根本原因是对共享资源（变量）的使用不受限，为了使并发进程能正确地执行，必须对共享变量的使用加以限制。 进程竞争资源首先必须解决“互斥”问题。某些资源必须互斥使用，如打印机、共享变量、表格、文件等。这类资源又称为临界资源 critical resource，访问临界资源的那段代码称为临界区 critical section。任何时刻，只允许一个进程进入临界区，以此实现进程对临界资源的互斥访问。 可把一个访问临界资源的循环进程描述如下： 12345678910111213repeat entry section critical section exit section remainder sectionuntil false&lt;entry section&gt;:判断是否可以进入临界区，如果可以进入，则必须设置临界区使用标志，阻止其它后来的进程进入临界区。&lt;critical section&gt;:进入临界区，使用临界资源。&lt;exit section&gt;:当临界区内的进程执行完毕并退出临界区时，在“退出区”修改临界区使用标志，并负责唤醒阻塞队列中的一个进程，让其进入临界区。&lt;remainder section&gt;:其它代码 阻塞队列 Blocking Queue:当一个进程试图进入临界区，而临界区已经被其它进程占用时，该进程必须等待，直到临界区空闲为止。这些等待进程的队列称为阻塞队列。死锁 Deadlock:当两个或多个进程互相等待对方释放资源，而导致它们都无法继续执行时，称为死锁。 临界区使用原则(互斥条件) 空闲让进Entry Allowed WHen Free:如果临界区空闲，则只要有进程申请就立即让其进入 忙则等待Bust Then Wait:每次仅允许一个进程处于临界区 有限等待Limited Waiting:进程只能在临界区内逗留有限时间，不得使其他进程在临界区外无限期等待 让权等待Yeilding While Waiting:当进程不能进入自己的临界区时，应立即释放处理机，以免进程处于“忙等”状态 信号量 Semaphore1965 年，荷兰的 E.W.Dijkstra 提出了信号量同步机制用于进程同步,现广泛应用于存在临界资源和临界区控制的场合信号量是一个一般的锁,信号量即信号的数量;开锁实际上就是发一个信号,等待锁打开就是等待一个信号锁: {0,1} 信号量: {-∞, … , -2, -1, 0, 1, 2, … , ∞} 信号量按照功能来分： 互斥信号量：用于申请或释放资源的使用权，常初始化为 1。 资源信号量：用于申请或归还资源，可以初始化为大于 1 的正整数，表示系统中某类资源的可用个数。按照信号量机制的发展分为： 整形信号量 记录型信号量 AND 型信号量 信号量集 In computer science, a semaphore is a variable or abstract data type used to control access to a common resource by multiple threads and avoid critical section problems in a concurrent system such as a multitasking operating system. Semaphores are a type of synchronization primitive. A trivial semaphore is a plain variable that is changed (for example, incremented or decremented, or toggled) depending on programmer-defined conditions.The semaphore concept was invented by Dutch computer scientist Edsger Dijkstra in 1962 or 1963, when Dijkstra and his team were developing an operating system for the Electrologica X8. That system eventually became known as the THE multiprogramming system. 两个或多个进程可以通过传递信号进行合作，可以迫使进程在某个位置暂时停止执行（阻塞等待），直到它收到一个可以“向前推进”的信号（被唤醒）。相应地，将实现信号灯作用的变量称为信号量。 整形信号量 Integer Semaphore定义为一个整形量, 用来表示空闲资源的数目;仅能通过两个标准的原子操作 wait(s),signal(s)来访问它,又称为P 操作和 V 操作 Proberen(荷兰语，意为“尝试”): wait(s) 操作用于申请资源（或使用权），进程执行 wait 原语时，可能会阻塞自己；while S &lt;= 0 do no-op; S--; // 申请资源 Verhogen(荷兰语，意为“增加”): signal(s)操作用于释放资源（或归还资源使用权），进程执行 signal 原语时，有责任唤醒一个阻塞进程。S++; // 释放资源 Note 必须成对使用 wait和 signal原语 wait、signal 原语不能出现次序错误、重复或遗漏 遗漏 wait 原语则不能保证互斥访问 遗漏 signal 原语则不能在使用临界资源之后将其释放 记录型信号量 Record Semaphore记录型信号量机制，是一种不存在忙等现象的进程同步机制。操作系统内核以系统调用形式提供 wait和 signal原语，应用程序通过该系统调用实现进程间的互斥。工程实践证明，利用信号量方法实现进程互斥是高效的，一直被广泛采用。 记录型信号量的数据结构 123456789101112131415#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;// 链表节点，用于表示等待队列中的进程typedef struct Node { int pid; // 进程ID struct Node* next; // 指向下一个节点的指针} Node;// 记录型信号量typedef struct { // value的初值表示系统中某类资源的数目， value的初始值&gt;1时，称为资源信号量， value的初始值=1时，称为互斥信号量 int value; Node* listOfProcess; // 信号量的阻塞队列} RecordSemaphore; “忙等”（Busy Waiting）是一种进程同步策略中的现象，也被称为”自旋等待”。当一个进程试图进入一个被其他进程占用的临界区时，如果使用了忙等策略，那么这个进程会在一个循环中不断检查临界区是否可用，直到它变为可用状态。换句话说，进程在等待期间保持活跃，并消耗 CPU 时间，而不是被挂起或转移到等待状态。虽然忙等可以在某些情况下（如等待时间预期非常短）提供很好的响应时间，但它通常被视为一种效率低下的策略，因为它浪费了 CPU 的计算能力，尤其是在等待时间较长的情况下。与此相反，记录型信号量机制（Blocking or Sleeping Semaphore Mechanism）允许进程在等待进入临界区时进入睡眠状态，从而不消耗 CPU 时间。当临界区可用时，进程会被唤醒。这种方法更有效，但可能导致上下文切换的开销，因为系统需要在运行和等待的进程之间切换。 记录型信号量的 P，V 操作 wait(s)和 signal(s) s.value&gt;=0 时，s.queue 为空；s.value&lt;0 时，s.value 的 绝对值为 s.queue 中等待进程的个数s.value 初始值为 1 时，称为互斥信号量；s.value 初始值&gt;1 时，称为资源信号量。当仅有两个并发进程共享临界资源时，互斥信号量仅能取值 1、0、－1。其中， s.value=1, 表示无进程进入临界区 s.value=0，表示已有一个进程进入临界区 s.value=-1,则表示已有一进程正在等待进入临界区当用 s 来实现 n 个进程的互斥时，s.value 的取值范围为 1 ～-(n-1) 123456789101112void wait(RecordSemaphore* s) { s-&gt;value--; if (s-&gt;value &lt; 0) { block(s-&gt;listOfProcess); //进程阻塞, 进入S.L队列； }}void singal(RecordSemaphore* s) { s-&gt;value++; if (s-&gt;value &lt;= 0) { // s-&gt;value=0时,则在s-&gt;value++之前value=-1,即有1个进程在等待 wakeup(s-&gt;listOfProcess); // 唤醒阻塞队列中的一个进程 }} AND 型信号量 AND Semaphore如果一个进程需要事先获得一个或多个共享资源后才能执行任务。例如： 123process A: process B:wait(Dmutex); wait(Emutex);wait(Emutex); wait(Dmutex); 最后，进程 A 和 B 就处于僵持状态，在无外力作用下，两个进程都无法从僵持状态中解脱出来，这此 A 和 B 进入死锁状态。 AND 同步机制的基本思想：将进程在整个运行过程中需要的所有资源，一次性全都地分配给进程，待进程使用完后再一起释放。只要尚有一个资源未能分配给进程，其它所有可能为之分配的资源，也不分配给他。原子操作：所有资源要么全部分配到进程，要么一个也不分配 .在 wait 操作中，增加了一个“AND”条件，故称为 AND同步，或称为 同时wait操作. 1234567891011121314151617181920212223242526272829void Swait(S1, S2, …, Sn) { //P原语； if (S1 ≥1 and S2 ≥ 1 … Sn ≥ 1) {//满足资源要求时的处理； for (i = 1; i &lt;= n; ++i){ // wait的处理是s先减1，再判断是否&lt;0，若是就进入阻塞队列。如果要不阻塞，则s的初始值需要&gt;=1 // Swait与wait的处理不同，这里是在确信可满足资源要求时，才进行减1操作 Si=Si-1; } } else { /*某些资源不够时的处理； 进程进入第一个小于1的信号量的阻塞队列 ; 恢复PC寄存器为Swait开始时的状态；*/ }}void Ssignal(S1, S2, …, Sn){ for (i = 1; i &lt;= n; i++){ Si++; //释放占用的资源； for (each process P waiting in Si.L){ //检查每种资源的阻塞队列中的所有进程； //从阻塞队列Si.queue中取出进程P; P = Si.queue.getHead(); if(判断P是否通过Swait中的测试){//注:与signal不同，需重新判断进程P进入就绪队列; break; }else{ //未通过检查（资源不够用）时的处理； 进程P进入某阻塞队列；//然后继续循环判断下一个进程 } } } } 信号量集 Semaphore Set在记录型信号量机制中，wait(S)或 signal(S)操作仅能对信号量施以加 1 或减 1 操作，意味着每次只能获得或释放一个单位的临界资源。在每次分配时，采用信号量集来控制，可以分配多个单位的资源。 1234567891011121314151617181920//Si—i 类资源现有数量；ti—i 类资源的分配下限值；di—申请i 类资源数量;void Swait ( S1, t1, d1; ... ; Sn, tn, dn ){ if (S1 ≥ t1 and S2 ≥ t2 … Sn ≥ tn) { for (i = 1; i &lt;= n; i++){ Si=Si-di; } } else { //假设首先发现 Sj &lt; tj，进程进入Sj.L队列； //进程投入与Sj相关的阻塞队列 //恢复PC寄存器为Swait开始时的状态； //启动进程调度程序，调度其它进程执行； }}//si—i 类资源现有数；di—i 类资源释放数量 ;void Ssignal ( S1, d1; ... ; Sn, dn ){ for (i = 1; i &lt;= n; i++){ Si=Si+di; } //把与Si有关队列中的进程移入就绪队列} “信号量集机制”可以用于各种情况的资源分配和释放，几种特殊情况： Swait(S, d, d)表示每次申请 d 个资源，当少于 d 个时，便不分配 Swait(S, 1, 1)表示一般的记录型互斥信号量（S=1 时）或资源信号量（S&gt;1 时） Swait(S, 1, 0)可作为一个可控开关（当 S1 时，允许多个进程进入临界区；当 S=0 时，禁止任何进程进入临界区） 信号量的应用利用信号量实现进程互斥为使多个进程能互斥地访问某临界资源，只须为该资源设置一互斥信号量 mutex，并设其初始值为 1，然后将各进程访问该资源的临界区 CS 置于 wait（mutex）和 signal（mutex）操作之间即可。利用信号量来描述前趋（合作）关系假设我们有两个任务 A 和 B，其中任务 B 依赖于任务 A 的完成。我们可以使用一个初始值为 0 的信号量来描述这种前驱关系。具体的操作步骤如下：任务 A 在完成后，执行一个信号量的 V 操作（signal），将信号量的值加 1。任务 B 在开始前，执行一个信号量的 P 操作（wait）。如果信号量的值大于 0，那么将信号量的值减 1 并继续执行。如果信号量的值等于 0，那么任务 B 将阻塞，直到信号量的值大于 0。 parbegin 和 parend 是并发编程中用来表示并行开始和并行结束的关键字 例：用 And 信号量来描述如下的前趋图 123456789Var a,b,c,d,e,f,g: semaphore: 0,0,0,0,0,0,0;Parbegin begin S1; Ssignal(a,b); end; begin wait(a); S2; Ssignal(c,d); end; begin wait(b); S3; signal(e); end; begin wait(c); S4; signal(f); end; begin wait(d); S5; signal(g); end; begin Swait(e,f,g); S6; end;Parend; 硬件同步机制 Hardware Synchronization Mechanism利用计算机硬件指令解决临界区问题对临界区管理将标识看做一个锁，“锁开”进入，“锁关”等待。初始打开，每个进入临界区的进程必须对锁进行测试。测试和关锁操作必须连续（原子操作） 虽然可以利用软件方法解决诸进程互斥进入临界区的问题，但有一定难度，并且存在很大的局限性，因而现在已很少采用。相应地，目前许多计算机已提供了一些特殊的硬件指令，允许对一个字中的内容进行检测和修正，或者是对两个字的内容进行交换等。可利用这些特殊的指令来解决临界区问题。 关中断 利用 Test-and-Set 指令实现互斥 利用 Swap 指令实现进程互斥 关中断实现互斥 Disable Interrupts中断是指计算机在执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得 CPU 暂时中断当前正在执行的程序而转去执行相应的事件处理程序，待处理完毕后又返回原来被中断处继续执行或调度新的进程执行的过程。中断处理是指 CPU 响应中断，转入中断处理程序，系统开始处理中断。中断响应是指 CPU 收到中断请求后转向相应的事件处理程序。开中断就是指系统可以在连续运行时中断，去运行中断服务函数关中断就是指关闭系统中断，系统不响应其他的中断，不允许系统打断连续的运行 关中断进入锁测试前关闭中断，完成锁测试并上锁后打开中断进程在临界区时计算机系统不响应中断，不会引发调度 Pros And Cons 关中断是实现互斥的最简单的方法之一。 滥用关中断权力可能导致严重后果； 关中断时间过长，会影响系统效率，限制了处理器交叉执行程序的能力； 关中断方法也不适用于多 CPU 系统，因为在一个处理器上关中断并不能防止进程在其它处理器上执行相同的临界段代码。 1234567891011121314151617181920212223extern bool are_interrupts_enabled();void atomic_operation(void (*operation)()) { start_atomic_operation(); operation(); end_atomic_operation(are_interrupts_enabled());}void start_atomic_operation() { // 如果中断是开启的，那么关闭中断 if (are_interrupts_enabled()) { disable_interrupts(); }}void end_atomic_operation(bool were_interrupts_enabled) { // 如果在原子操作开始之前中断是开启的，那么重新开启中断 if (were_interrupts_enabled) { enable_interrupts(); return; } enable_interrupts();} Test And Set 指令实现互斥这是一种借助 TS(Test-and-Set)硬件指令以实现互斥的方法。在许多计算机中都提供了这种指令。 lock=false表示资源空闲，*lock=TURE表示资源正在被使用。当资源被使用时，TS 返回 ture，则 while TS（&amp;lock)；语句条件为真会一直循环等待。 这段代码是一个实现了简单的自旋锁（spinlock）的例子，使用了一个称为 Test-and-Set（TS）的原子操作。自旋锁是一种用于同步的低级别的原子操作，通常用于保护短期的临界区（critical section）。自旋锁可能会导致资源浪费，因为在等待获取锁的过程中，线程并不会释放 CPU，而是会一直忙等待。因此，自旋锁通常只用于保护非常短期的临界区。对于保护长期的临界区，通常会使用其他的同步机制，如互斥锁（mutex）。 123456789101112131415boolen TS(boolen *lock){ boolean old; old = *lock; *lock =TURE; return old;}do{ … while TS( &amp;lock); critical section; lock :=FALSE; remainder section;}while(TRUE); 利用 Swap 指令实现进程互斥该指令称为对换指令，在 Intel 80x86中又称为 XCHG指令，用于交换两个字的内容。 管程 Moniter虽然信号量机制是一种既方便、又有效的进程同步机制，但每个要访问临界资源的进程都必须自备同步操作 wait（S）和 signal（s）。这就使大量的同步操作分散在各个进程中。这不仅给系统的管理带来了麻烦，而且还会因同步操作的使用不当而导致系统死锁。这样，在解决上述问题的过程中，便产生了一种新的进程同步工具——管程 。 Monitors are a higher-level synchronization construct that simplifies process synchronization by providing a high-level abstraction for data access and synchronization. Monitors are implemented as programming language constructs, typically in object-oriented languages, and provide mutual exclusion, condition variables, and data encapsulation in a single construct.Moniter-Ref 经典同步问题 Classic Synchronization Problems 生产者/消费者问题 Producer-Consumer Problem 哲学家进餐问题 Dining Philosophers Problem 读者/写者问题 Readers-Writers Problem Producer-Consumer Problem生产者与消费者是一个广义的概念，可以代表一类具有相同属性的进程。生产者和消费者进程共享一个大小固定的缓冲池;一个或多个生产者生产数据，并将生产的数据存入缓冲池;一个或多个消费者从缓冲池中取数据。 必须使生产者和消费者互斥进入缓冲区。即，某时刻只允许一个实体（生产者或消费者）访问缓冲区，生产者互斥消费者和其它任何生产者。生产者不能向满缓冲池写数据，消费者也不能在空缓冲池中取数据，即生产者与消费者必须同步。 涉及两类进程：生产者进程和消费者进程需要保证以下同步关系： 多个进程互斥地访问公共缓冲池；互斥信号量 mutex 不能向满的缓冲池中添加产品；可用的空资源信号量 empty 不能从空的缓冲池中提取产品。可用的满资源信号量 fullfull + empty=N 每个进程中各个 wait 操作的次序是重要的：先检查资源数目，再检查是否互斥.否则可能死锁如：producer 先申请互斥，进入后，申请空资源，发现空资源不可用，必须等待 comsumer 先申请满资源，使用后释放出来。但此时，由于 producer 占用了互斥资源，因此 consumer 无法进入。故而陷入死锁状态 Dining Philosophers Problem五个哲学家五只筷子，哲学家循环做着思考和吃饭的动作，吃饭程序是：先取左边筷子，再取右边筷子，再吃饭，再放筷子。 至多只允许四个哲学家同时进餐,以保证至少有一个哲学家能够进餐,最终总会释放出他所使用过的两支筷子,从而可使更多的哲学家进餐。 在哲学家进餐问题中，要求每个哲学家先获得两个临界资源(筷子)后方能进餐，这在本质上就是前面所介绍的 AND 同步问题，故用 AND 信号量机制可获得最简洁的解法,且可避免死锁。 规定奇数号的哲学家先拿起他左边的筷子,然后再去拿他右边的筷子;而偶数号的哲学家则相反.按此规定,将是 2,3 号哲学家竞争 3 号筷子,4,5 号哲学家竞争 5 号筷子.即三个哲学家都 竞争奇数号筷子,获得后,再去竞争偶数号筷子,最后总会 1 个哲学家能获得两支筷子而进餐. Readers-Writers Problem该问题为多个进程访问一个共享数据区建立了一个通用模型，如数据库、文件、内存区及一组寄存器等数据。若干读进程只能读数据，若干写进程只能写数据。 例如，一个联网售票系统，数据的查询和更新非常频繁，不可避免会出现多个进程试图查询或修改（读/写）其中某一条数据的情形。多个进程同时读一条记录是可以的。如果一个进程正在更新数据库中的某条记录，则所有其他进程都不能访问（读或写）该记录，否则可能会将同一个座位销售多次。 读者/写者进程满足的条件 允许多个读者进程可以同时读数据； 不允许多个写者进程同时写数据，即只能互斥写数据； 若有写者进程正在写数据，则不允许读者进程读数据。 Sol利用记录型信号量解决读者-写者问题利用信号量集解决读者-写者问题 Exercies EX1三个进程 P1，P2，P3 协作解决文件打印问题，P1 将文件记录从磁盘读入内存的缓冲区 1，每执行一次读一个记录；P2 将缓冲区 1 的内容取出放到缓冲区 2 中；P3 将缓冲区 2 的内容打印出来，每执行一次打印一个记录。缓冲区的大小和一个记录大小一样。用 P、V 操作来保证文件的正确打印。引申有三个进程 A1、A2、A3，它们共享两个缓冲区 B1 和 B2。缓冲区 B1 中可以存放 n 件产品，缓冲区 B2 中可以存放 m 件产品。进程 A1 每次生产一件产品，并把产品存入缓冲区 B1。进程 A2 每次生产一件产品，并把产品存入缓冲区 B2。进程 A3 每次从缓冲区 B2 中取一件产品区消费。为了防止把产品存入已满的缓冲，或者从空缓冲中取产品，或重复取一产品，用 PV 操作实现它们的相互制约关系。 EX2某工厂有一个可以存放设备的仓库，总共可以存放 8 台设备。生产部门生产的每一台设备都必须入库，销售部门可以从仓库中提出设备供应客户。设备出/入库需要借助运输工具，现只有一套运输工具，每次只能运一台设备请设计生产部门和销售部门进程。 EX3桌上放一个盘子，每次只能放一个水果，爸爸像盘子里放苹果，妈妈向盘子里放橘子，女儿专吃苹果,儿子专吃橘子。盘子空的时候爸爸或妈妈才能向盘子里面放一个水果，仅当盘子里有自己需要的水果时才可取一个水果。把爸爸、妈妈、儿子、女儿看做四个进程，用 PV 操作进行管理，使这四个进程能正确地并发执行。引申如果盘子的容量改为 2，且任何时刻只允许爸爸、妈妈、女儿、儿子中的一个进程去访问盘子（放或者取）。 RefSemaphore-wikipediahttps://www.cnblogs.com/youxin/p/3586577.htmlMoniter","link":"/UESTC/OS/Ch2-2ProcessSync/"},{"title":"Thread","text":"线程概述Intro为使程序能并发执行，系统必须进行以下的一系列操作:创建进程 撤消进程 进程切换由于进程是一个资源的拥有者，因此在创建、撤销和切换中，系统必须为此付出较大的时间和空间的开销。如何使多个程序更好的并发执行，同时又能减少系统开销？ 进程的概念体现出两个特点： 资源所有权：一个进程包括一个保存进程映像的虚地址空间，并且随时分配对资源的控制或所有权，包括内存、I/O 通道、I/O 设备、文件等。 调度／执行：进程是被操作系统调度的实体。 调度和分派的部分通常称为线程或轻型进程（lightweight process），而资源所有权的部分通常称为进程 线程具有许多传统进程所具有的特征，所以又称为轻型进程(Light-Weight Process) ，相应地把传统进程称为重型进程(Heavy-Weight Process)，传统进程相当于只有一个线程的任务。在引入了线程的操作系统中，通常一个进程都拥有若干个线程，至少也有一个线程。 History 60 年代：提出进程(Process)概念，在 OS 中一直都是以进程作为能拥有资源和独立运行的基本单位的。 80 年代中期：提出线程（Thread）概念，线程是比进程更小的能独立运行的基本单位，目的是提高系统内程序并发执行的程度，进一步提高系统的吞吐量。 90 年代：多处理机系统得到迅速发展，线程能比进程更好地提高程序的并行执行程度，充分发挥多处理机的优越性。 线程的共享问题进程内的所有线程共享进程的很多资源,而这种共享又带来了同步问题 1234567线程间共享 线程私有进程指令 线程ID全局变量 寄存器集合（包括PC和栈指针）打开的文件 栈（用于存放局部变量）信号处理程序 信号掩码当前工作目录 优先级用户ID 线程的互斥问题对全局变量进行访问的基本步骤 将内存单元中的数据读入寄存器 对寄存器中的值进行运算 将寄存器中的值写回内存单元 线程的属性 轻型实体 线程自己基本不拥有系统资源，只拥有少量必不可少的资源：TCB，程序计数器、一组寄存器、栈。 独立调度和分派的基本单位 在多线程 OS 中,线程是独立运行的基本单位,因而也是独立调度和分派的基本单位。 可并发执行 同一进程中的多个线程之间可以并发执行，一个线程可以创建和撤消另一个线程。 共享进程资源 它可与同属一个进程的其它线程共享进程所拥有的全部资源。 线程与进程的比较Ref[Ch2-1ProcessContorl#进程的描述 Process][ProcessvsThread#Comparison] 线程的控制Create/Terminate Thread线程的创建： 在多线程 OS 环境下，应用程序在启动时，通常仅有一个“初始化线程”线程在执行。 在创建新线程时，需要利用一个线程创建函数(或系统调用)，并提供相应的参数。 如指向线程主程序的入口指针、堆栈的大小，以及用于调度的优先级等。 在线程创建函数执行完后，将返回一个线程标识符供以后使用。 线程的终止： 线程完成了自己的工作后自愿退出； 或线程在运行中出现错误或由于某种原因而被其它线程强行终止。 线程的三种终止方式 线程从启动例程函数中返回，函数返回值作为线程的退出码 线程被同一进程中的其他线程取消 线程在任意函数中调用 pthread_exit 函数终止执行 线程间的同步与通信互斥锁 Mutex互斥锁是一种比较简单的、用于实现进程间对资源互斥访问的机制。由于操作互斥锁的时间和空间开销都较低，因而较适合于高频度使用的关键共享数据和程序段。互斥锁可以有两种状态， 即开锁(unlock)和关锁(lock)状态。 上锁的两种方式 阻塞方式 12345//用来锁住互斥体变量。如果参数 mutex 所指的互斥体已经被锁住了，那么发出调用的线程将被阻塞直到其他线程对 mutex 解锁。lock(mutex)访问unlock(mutex) 非阻塞方式 123if（trylock） thenelse//如果互斥体已经被上锁，该调用不会阻塞等待，而会返回一个错误代码。 条件变量 Condition Variable在多线程编程中，条件变量是一种同步机制，用于在某个特定条件变为真时唤醒一个或多个线程。条件变量通常与互斥锁（mutex）一起使用，以确保线程在检查条件和对条件进行等待时不会发生竞争条件。 以下是条件变量在控制线程同步中的一般用法： 等待条件：当线程需要等待某个条件变为真时，它会首先获取与条件变量相关联的互斥锁。然后，它会检查条件是否已经满足。如果条件未满足，线程会调用条件变量的等待方法（例如在 Java 中的 Condition.await()）。这将释放互斥锁，并使线程进入睡眠状态，等待条件变为真。 改变条件：当线程改变可能会影响条件的状态的数据时，它会首先获取互斥锁，然后修改数据。修改完成后，它会调用条件变量的唤醒方法（例如在 Java 中的 Condition.signal()或 Condition.signalAll()），以唤醒正在等待该条件的所有线程。然后，它会释放互斥锁。 响应唤醒：当线程被唤醒时（即，它从等待方法返回时），它会重新获取互斥锁，并再次检查条件。这是必要的，因为在多线程环境中，条件可能在线程被唤醒和线程实际运行之间的时间内发生变化。 使用条件变量可以使线程在等待某个条件时不必进行忙等待（即，不断地检查条件是否已经满足）。这可以大大提高系统的效率，因为线程在等待时不会消耗 CPU 资源。 信号量机制 私用信号量(private semaphore)。当某线程需利用信号量来实现同一进程中各线程之间的同步时，可调用创建信号量的命令来创建一私用信号量，其数据结构存放在应用程序的地址空间中。私用信号量属于特定的进程所有，OS 并不知道私用信号量的存在，因此，一旦发生私用信号量的占用者异常结束或正常结束，但并未释放该信号量所占有空间的情况时，系统将无法使它恢复为 0(空)，也不能将它传送给下一个请求它的线程。 公用信号量(public semaphore)。公用信号量是为实现不同进程间或不同进程中各线程之间的同步而设置的。有着一个公开的名字供所有的进程使用，故称为公用信号量。其数据结构是存放在受保护的系统存储区中，由 OS 为它分配空间并进行管理，故也称为系统信号量如果信号量的占有者在结束时未释放该公用信号量，则 OS 会自动将该信号量空间回收，并通知下一进程。因此公用信号量是一种比较安全的同步机制 线程的实现方式各类线程的实现细节，其中上下文切换是核心 用户级线程 User-Level Threads 用户级线程仅存在于用户空间中。对于这种线程的创建、撤消、线程之间的同步与通信等功能，都无须内核来实现。 对于用户级线程的切换，通常是发生在一个应用进程的诸多线程之间，这时，也同样无须内核的支持。由于切换的规则远比进程调度和管理的规则简单，因而使线程的切换速度特别快。可见，这种线程是与内核无关的 由应用程序完成所有线程的管理线程库(用户空间)：通过一组管理线程的函数库来提供一个线程运行管理系统（运行系统） 内核不知道线程的存在 线程切换不需要核心态特权 调度算法可以是进程专用的 Pros And Cons: 线程切换不调用内核 调度是应用程序特定的：可以选择最好的算法 可运行在任何操作系统上（只需要线程库），可以在一个不支持线程的 OS 上实现 当线程执行一个系统调用时，该线程及其所属进程内的所有线程都会被阻塞。 多线程应用不能利用多处理机进行多重处理。 用户级线程实现 用户级线程是在用户空间实现的。所有用户级线程都具有相同的数据结构，它们都运行在一个中间系统上。 当前有两种方式实现的中间系统： 运行时系统（又称为线程库）用于管理和控制线程的函数的集合，包括创建、撤消线程函数、线程同步和通信函数、线程调度函数等。用户级线程不能直接利用系统调用，必须通过运行时系统间接利用系统调用。 内核控制线程这种线程又称为轻型进程 LWP（Light Weight Process）每个进程都可拥有多个 LWP，每个 LWP 都有自己的 TCB，其中包括线程标识符、优先级、状态、栈和局部存储区等LWP 可通过系统调用来获得内核提供的服务，当一个用户级线程运行时，只要将它连接到一个 LWP 上，它便具有了内核支持线程的所有属性 内核支持线程 Kernel Supported Threads 内核支持线程，是在内核的支持下运行的，即无论是用户进程中的线程，还是系统进程中的线程，他们的创建、撤消和切换等，是依靠内核实现的。 在内核空间中为每一个内核支持线程设置了一个线程控制块 TCB， 内核是根据该控制块而感知某线程的存在的，并对其加以控制。 Pros and Cons 在多处理器系统中，内核能够同时调度同一进程中多个线程并行执行； 如果进程中的一个线程被阻塞了，内核可以调度该进程中的其它线程占有处理器运行，也可以运行其它进程中的线程； 内核支持线程具有很小的数据结构和堆栈，线程的切换比较快，切换开销小； 内核本身也可以采用多线程技术，可以提高系统的执行速度和效率。 对于线程切换而言，其模式切换的开销较大在同一个进程中，从一个线程切换到另一个线程时，需要从用户态转到内核态再转到用户态进行，这是因为用户进程的线程在用户态运行，而线程调度和管理是在内核实现的，系统开销较大。 和用户级相比，内核支持线程有什么不同?由内核完成线程的创建、调度等主要工作仍是保存现场,但保存位置为内核栈每个执行序列需有两个栈: 用户栈+内核栈用户栈：普通的函数调用内核栈：系统调用、中断处理 内核支持线程的实现 在仅设置了内核支持线程的 OS 中，一种可能的线程控制方法是，系统在创建一个新进程时，便为它分配一个任务数据区 PTDA(Per Task Data Area),其中包括若干个线程控制块 TCB 空间。TCB 包含了线程的各种信息，如线程的状态（运行、就绪、阻塞等）、寄存器的值、栈指针、优先级、线程 ID 等。每个线程都有一个与之对应的 TCB。 在创建新进程时，系统会为该进程的 PTDA 预分配若干个 TCB 空间,用来存放该进程将要创建的线程的 TCB。当进程创建新线程时，一个空闲的 TCB 会被取出并填充该线程的信息。当线程结束时，其 TCB 会被回收并放回到空闲的 TCB 池中。 通过这种方式，系统可以有效地管理和调度线程。每次线程切换时，系统只需要保存当前线程的状态到其 TCB 中，然后从下一个线程的 TCB 中恢复其状态，就可以实现线程的切换。 Exercises EX1进程 A 包含了 1 个用户级线程$t_{1}$，进程 B 包含了 100 个用户级线程$t_{i},i \\in (1,100)$，$t_1$运行的时间和$t_i$的运行时间是否一样？不一样，$t_1$运行的时间是$t_{i}$的 100 倍,进程 B 获得 CPU 的时间与进程 A 的相等EX2若进程 A 和进程 B 中的线程都是内核支持线程，两者的运行时间是否一样？$t_1=t_i$,进程 B 获得 CPU 的时间是进程 A 的 100 倍Explanation当一个系统设置了用户级线程时，虽然每个进程可能有多个线程，但对于操作系统内核来说，它只看到进程，而看不到进程内部的线程。因此，内核的调度仍然是以进程为单位进行的。在采用时间片轮转调度算法时，操作系统会公平地将处理器时间分配给每个进程。也就是说，每个进程都会轮流获得一定的处理器时间（时间片）来执行。这确保了各个进程之间的公平性。而运行内核支持线程时,操作系统内核是可以看到进程内部的线程的。因此，内核的调度是以线程为单位进行的。也就是说，每个线程都会轮流获得一定的处理器时间（时间片）来执行。这确保了各个线程之间的公平性。","link":"/UESTC/OS/Ch2-4Thread/"},{"title":"Interprocess Communication","text":"进程通信的类型 Types Of IPCOverview低级通信：进程之间的互斥和同步，由于其所交换的信息量少而被归结为低级通信。信号量机制作为同步工具是卓有成效的，但作为通信工具，则不够理想，主要表现在下述两方面： 效率低，生产者每次只能向缓冲池投放一个产品(消息)，消费者每次只能从缓冲区中取得一个消息； 通信对用户不透明。 高级通信：是指用户可直接利用操作系统所提供的一组通信命令高效地传送大量数据的一种通信方式。常用的高级通信方式有 : 共享存储器系统：在内存中分配一片空间作为共享存储区 管道通信：写者向管道文件中写入数据；读者从该文件中读出数据 消息传递系统：以消息（Message）为单位在进程间进行数据交换 直接通信方式 间接通信方式 客户机-服务器系统 共享存储器系统 Shared-Memory System 基于共享数据结构的通信方式诸进程共用某些数据结构，借以实现诸进程间的信息交换。如在生产者—消费者问题中，就是用有界缓冲区这种数据结构来实现通信的。这种通信方式是低效的，只适于传递相对少量的数据。 基于共享存储区的通信方式由操作系统在内存中划分出一块区域作为共享存储区。进程在通信前向操作系统申请共享存储区中的一个分区。然后，申请进程把获得的共享存储分区连接到本进程上，此后便可象读/写普通存储器一样地读/写共享存储分区。该方式下，通信进程之间的同步与互斥访问共享存储区由进程负责。 管道通信 Pipe Communication所谓“管道”，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又名 pipe 文件。向管道(共享文件)提供输入的发送进程 Writer， 以字符流 Character Stream形式将大量的数据写入管道；接受管道输出的接收进程 Reader，则从管道中读数据。由于发送进程和接收进程是利用管道进行通信的，故又称为管道通信。这种方式首创于 UNIX 系统，由于它能有效地传送大量数据，因而又被引入到许多其它操作系统中。 为了协调双方的通信，管道机制必须提供以下三方面的协调能力： 互斥，即当一个进程正在对 pipe 执行读/写操作时，其它(另一)进程必须等待。 同步，指当写(输入)进程把一定数量(如 4KB)的数据写入 pipe，便去睡眠等待， 直到读(输出)进程取走数据后，再把他唤醒。当读进程读空 pipe 时，也应睡眠等待，直至写进程将数据写入管道后，才将之唤醒。 确定对方是否存在，只有确定了对方已存在时，才能进行通信。 Linux 命名管道非常适合同一机器上两个进程之间传递数据，其形式也是一个文件，但是读取与写入时遵循 FIFO 的原则。 123#define FIFO_NAME &quot;/tmp/my_fifo&quot;#define BUFFER_SIZE PIPE_BUFmkfifo(FIFO_NAME,0777); 消息传递系统 Message-Passing System应用最广泛的进程通信机制,进程间数据交换以格式化的信息 Message 为单位程序员使用通信原语完成通信，其实现细节被隐藏，简化了通信程序的编写复杂性微内核与服务器程序的通信采用本机制，可满足多处理机 OS、分布式 OS、计算机网络的通信要求 消息传递通信的实现方法 直接通信方式 send(),receive() 间接通信方式 信箱 直接通信方式指发送进程利用 OS 提供的发送命令,直接把消息发送给目标进程。通常，系统提供下述两种类型的通信命令(原语)： 对称寻址方式 Symmetric AddressingSend(Receiver, Message);Receive(Sender, Message);例如，原语Send(P2, m1)表示将消息 m1 发送给接收进程 P2; 而原语Receive(P1，m1)则表示接收由 P1 发来的消息 m1 非对称寻址方式 Asymmetric AddressingSend(P, Message);发送一个消息给接收进程 P；Receive(id,Message);接收来自任何进程的消息，进程 id 不固定 利用直接通信原语，来解决生产者-消费者问题：当生产者生产出一个产品(消息)后，便用 Send 原语将消息发送给消费者进程；而消费者进程则利用 Receive 原语来得到一个消息。如果消息尚未生产出来，消费者必须等待，直至生产者进程将消息发送过来 123456789101112repeat … produce an item in nextp; … send(consumer, nextp); until false;repeat receive(producer, nextc); … consume the item in nextc; until false; 消息缓冲队列通信机制 发送进程利用 send 原语将消息直接发送给接收进程的消息缓冲队列；接收进程利用 receive 原语接收消息；用于本地进程通信。 Send 发送进程在利用发送原语发送消息之前，应先在自己的内存空间，设置一发送区a，把待发送的消息正文、发送进程标识符、消息长度等信息填入其中，然后调用发送原语，把消息发送给目标(接收)进程。 发送原语首先根据发送区a中所设置的消息长度a.size来申请一缓冲区i，接着，把发送区a中的信息复制到缓冲区i中。为了能将i挂在接收进程的消息队列mq上，应先获得接收进程的内部标识符j，然后将i挂在j.mq上。 由于该队列属于临界资源, 故在执行insert操作的前后，需要执行wait和signal操作 Receive 接收进程调用接收原语receive(b)，从自己的消息队列mq中,摘下第一个消息缓冲区 i,并将其中的数据复制到以 b 为首址的指定消息接收区内 完成消息的接收后接收进程返回到用户态继续进行 消息传递系统实现中的若干问题 通信链路(communication link)为使在发送进程和接收进程之间能进行通信，必须在两者之间建立一条通信链路。有两种方式建立通信链路。 第一种方式：由发送进程在通信之前，用显式的“建立连接”命令(原语)请求系统为之建立一条通信链路；在链路使用完后，也用显式方式拆除链路。这种方式主要用于计算机网络中 第二种方式: 发送进程无须明确提出建立链路的请求，只须利用系统提供的发送命令(原语)，系统会自动地为之建立一条链路。这种方式主要用于单机系统中。 根据通信链路的连接方法，又可把通信链路分为两类： 点对点连接通信链路，这时的一条链路只连接两个结点(进程)； 多点连接链路，指用一条链路连接多个(n ＞ 2)结点(进程)。而根据通信方式的不同，则又可把链路分成两种： 单向通信链路，只允许发送进程向接收进程发送消息； 双向链路，既允许由进程 A 向进程 B 发送消息，也允许进程 B 同时向进程 A 发送消息。 消息的格式 定长消息在某些 OS 中，消息是采用比较短的定长消息格式，这减少了对消息的处理和存储开销。 变长消息在有的 OS 中，采用另一种变长的消息格式，即进程所发送消息的长度是可变的。系统在处理和存储变长消息时，须付出更多的开销，但方便了用户。注意：这两种消息格式各有其优缺点，故在很多系统(包括计算机网络)中，是同时都用的。 进程同步方式进程间通过消息队列通信，则进程之间需同步，其同步方式有三种： 发送进程阻塞,接收进程阻塞：进程间汇合同步，有消息时传递，无消息时同时阻塞。 发送进程不阻塞,接收进程阻塞：发送者尽快发送消息，接收者平时阻塞收到消息才唤醒，例如多个用户共享一个打印服务。 发送进程和接收进程均不阻塞：发送者和接收者均忙于自身事务，直到无法继续才阻塞。例如发送进程和接收进程间关联一个长度为 n 的消息队列。 间接通信方式信箱是间接通信方式的一种实现，是一种特殊的消息队列，用于进程间通信。 信箱的创建和撤消:进程可利用信箱创建原语来建立一个新信箱。创建者进程应给出信箱名字、信箱属性(公用、私用或共享)；对于共享信箱，还应给出共享者的名字。当进程不再需要读信箱时，可用信箱撤消原语将之撤消。消息的发送和接收:当进程之间要利用信箱进行通信时，必须使用共享信箱，并利用系统提供的下述通信原语进行通信。Send(mailbox, message); 将一个消息发送到指定信箱；Receive(mailbox, message); 从指定信箱中接收一个消息； 信箱定义为一种数据结构。在逻辑上，可以将其分为信箱头 MailboxHeader 和信箱体 MailboxBody 两部分 信箱可由操作系统创建，也可由用户进程创建，创建者是信箱的拥有者。据此，可把信箱分为以下三类： 私用信箱 用户进程可为自己建立一个新信箱，并作为该进程的一部分。信箱的拥有者有权从信箱中读取消息，其他用户则只能将自己构成的消息发送到该信箱中。这种私用信箱可采用单向通信链路的信箱来实现。当拥有该信箱的进程结束时，信箱也随之消失。 公用信箱 由操作系统创建，并提供给系统中的所有核准进程使用。进程既可把消息发送到该信箱中，也可从信箱中读取发送给自己的消息。显然，公用信箱应采用双向通信链路的信箱来实现。通常，公用信箱在系统运行期间始终存在。 共享信箱 由某进程创建，在创建时或创建后，指明它是可共享的，同时须指出共享进程(用户)的名字。信箱的拥有者和共享者，都有权从信箱中取走发送给自己的消息。 在利用信箱通信时，在发送进程和接收进程之间，存在以下四种关系： 一对一关系 这时可为发送进程和接收进程建立一条两者专用的通信链路，使两者之间的交互不受其他进程的干扰 多对一关系 允许提供服务的进程与多个用户进程之间进行交互，也称为客户/服务器交互(client/server interaction) 一对多关系 允许一个发送进程与多个接收进程进行交互，使发送进程可用广播方式，向接收者(多个)发送消息 多对多关系。允许建立一个公用信箱，让多个进程都能向信箱中投递消息；也可从信箱中取走属于自己的消息 客户机-服务器系统 Client-Server System套接字 SocketSocket 定义Windows Sockets 是为上层应用程序提供的一种标准网络接口，主要用于网络中的数据通信。上层应用程序不用关心 Winsock 的实现细节，它为上层应用程序提供透明的服务。Windows Sockets 规范以 U.C. Berkeley 大学 BSD UNIX 中流行的 Socket 接口为范例定义了一套 microsoft Windows 下网络编程接口。它不仅包含了人们所熟悉的 Berkeley Socket 风格的库函数；也包含了一组针对 Windows 的扩展库函数，以使程序员能充分地利用 Windows 消息驱动机制进行编程。 TCP/IP TCP/IP 协议的核心部分是传输层协议(TCP、UDP)，网络层协议(IP)和物理接口层，这三层通常是在操作系统内核中实现。因此用户一般不涉及。编程时，编程界面有两种形式：由内核直接提供的系统调用；使用以库函数方式提供的各种函数。前者为核内实现，后者为核外实现。用户服务要通过核外的应用程序才能实现，所以要使用套接字(socket)来实现。 TCP/IP 协议与 WinSock 的关系 WinSock 不是一种网络协议，它只是一个网络编程接口，可以把它当作一些协议的封装。WinSock 就是 TCP/IP 协议的一种封装，可以通过调用 WinSock 的接口函数来调用 TCP/IP 的各种功能.例如想用 TCP/IP 协议发送数据，就可以使用 WinSock 的接口函数 Send()来调用 TCP/IP 的发送数据功能，至于具体怎么发送数据，WinSock 已经帮用户封装好了这种功能。 远程过程调用 RPC远程过程调用 RPC(Remote Procedure Call)，是一个通信协议，用于通过网络连接的系统。该协议允许运行于一台主机(本地)系统上的进程调用另一台主机(远程)系统上的进程，而对程序员表现为常规的过程调用，无需额外地为此编程。如果涉及的软件采用面向对象编程，那么远程过程调用亦可称做远程方法调用。RPC 主要是为了解决的两个问题： 解决分布式系统中，服务之间的调用问题。 远程调用时，要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑 Steps 调用客户端存根；执行传送参数 调用本地系统内核发送网络消息 消息传送到远程主机 服务器存根得到消息并取出参数 执行远程过程 执行的过程将结果返回服务器存根 服务器存根封装结果，调用远程系统内核 消息传回本地主机 客户存根从内核接收消息 客户接收存根返回的数据","link":"/UESTC/OS/Ch2-3InterprocessCommunication/"},{"title":"Storage Management Part Ⅰ","text":"存储器的层次结构存储器层次结构概述为能更多的存放并更快地处理用户信息，目前许多计算机把存储器分为三级。 高速缓存 Cache：K 字节、高速、昂贵、易变的 内存 RAM： M 或 G 字节、中速、中等价格、易变的 磁盘：G 或 T 字节、低速、价廉、不易变的 寄存器、高速缓存、主存储器和磁盘缓存均属于操作系统存储管理的管辖范畴，掉电后它们存储的信息不再存在。磁盘和可移动存储介质属于设备管理的管辖范畴，它们存储的信息将被长期保存。 主存储器与寄存器 主存储器（内存，主存，可执行存储器）用于保存进程运行时的程序和数据。CPU 的控制部件只能从主存中取得指令和数据到 CPU 寄存器，同样，CPU 寄存器中的数据可存入主存。CPU 与外设交换数据必须依托于主存。 寄存器寄存器访问速度最快，与 CPU 协调工作。高速缓存与磁盘缓存CPU 对高速缓存的访问，其速度比访问主存快，比访问寄存器慢。根据程序执行的局部性原理，将主存中一些经常访问的数据存放在高速缓存中，减少访问主存的次数，提高程序的执行速度。有些计算机系统设置了两级高速缓存，即，一级高速缓存与二级高速缓存。 局部性原理（Locality Principle）指在程序执行过程中，数据和指令的访问存在一定的空间和时间上的局部性特点。其中，时间局部性是指一个数据项或指令在一段时间内被反复使用的特点，空间局部性是指一个数据项或指令在一段时间内与其相邻的数据项或指令被反复使用的特点。在分页机制中，页表的作用是将虚拟地址转换为物理地址，从而完成内存访问。在这个过程中，局部性原理的作用体现在两个方面：时间局部性：由于程序中存在一定的循环或者重复操作，因此会反复访问同一个页或一些特定的页，这就体现了时间局部性的特点。为了利用时间局部性，分页机制中通常采用缓存机制来提高页面的命中率，即将最近访问过的一些页放入缓存中，如果下一次访问的页已经在缓存中，就不需要再次访问内存，而是直接从缓存中读取。空间局部性：由于程序中数据和指令的访问通常是具有一定的空间连续性的，因此当访问某个页时，往往会顺带访问其相邻的一些页。为了利用空间局部性，分页机制中通常采用预取技术来预先将相邻的一些页读入内存缓存中，以便在未来访问时能够直接使用，从而提高访问速度。总之，局部性原理是计算机体系结构设计的重要原则之一，也是许多优化算法的基础。在分页机制中，利用时间局部性和空间局部性，采用缓存和预取技术，可以提高页面的命中率，从而提高内存访问效率 高速缓存与磁盘缓存 高速缓存CPU 对高速缓存的访问，其速度比访问主存快，比访问寄存器慢。根据程序执行的局部性原理，将主存中一些经常访问的数据存放在高速缓存中，减少访问主存的次数，提高程序的执行速度。有些计算机系统设置了两级高速缓存，即，一级高速缓存与二级高速缓存。 磁盘缓存内存中一块存储区，对应于某固定磁盘，临时存储磁盘数据（如，数据预取） 存储器管理的目的和功能操作系统负责协调这些存储器的使用三级存储器，从缓存到内存到外存，其容量愈来愈大，而访问数据的速度则愈来愈慢，价格也愈来愈便宜。用户的程序在运行时应存放在主存中，以便处理机访问。为尽可能利用 CPU，要求直接存取内存的速度尽量快到与 CPU 取指速度相匹配，容量大到能装下当前运行的程序与数据由于主存容量和速度有限。所以把那些不马上使用的程序、数据放在外部存储器(又称辅存)中。当用到时再把它们读入主存。 主存储器的分配和管理：按用户要求把适当的存储空间分配给相应的作业。一个有效的存储分配机制，应在用户请求时能作出快速的响应，分配相应的存储空间；在用户不再使用它时，应立即回收，以供其他用户使用。为此，这个存储分配机制应具有如下功能：(1)记住每个存储区域的状态：哪些是已分配的，哪些是可以用作分配的。(2)实施分配：在系统程序或用户提出申请时，按所需的量给予分配；修改相应的分配记录表。(3)接受系统或用户释放的存储区域：并相应地修改分配记录表。 提高主存储器的利用率：使多道程序能动态地共享主存，最好能共享主存中的信息 “扩充”主存容量：这是借助于提供虚拟存储器或其它自动覆盖技术来达到的。即为用户提供比主存的存储空间还大的地址空间 存储保护：确保各道用户作业都在所分配的存储区内操作，互不干扰。即要防止一道作业由于发生错误而损害其它作业，特别需要防止破坏其中的系统程序。这个问题不能用特权指令来加以解决，而必须由硬件提供保护功能，并由软件配合实现 存储分配的三种方式存储分配，解决多道作业之间共享主存的问题。确定什么时候，以什么方式，把一个作业的全部信息或作业运行时首先需要的信息分配到主存中，并使这些问题对用户来说尽可能是透明的。 “对用户透明”（User Transparency）是一种计算术语，它指的是用户在使用系统或服务时，不需要关心或理解其背后的复杂实现细节。换句话说，系统或服务的复杂性对用户是”透明”的。 解决存储分配问题的三种方式： 目前，绝大多数计算机系统都采用静态或动态存储分配方式 直接指定方式：程序员在编程序时，或编译程序(汇编程序)对源程序进行编译(汇编)时，使用实际存储地址。 在多道程序环境下，应保证各作业所用的地址互不重叠。在多道程序发展的初期，通常把存储空间划分成若干个固定的不同大小分区，并对不同的作业指定相应的分区。因此，对编程人员或对编译程序而言，存储器的可用空间是可知的 采用直接指定方式分配的前提是：存储器的可用容量(空间)已经给定或者可以指定，这对单用户计算机系统是不成问题的 这种分配方式的实质是：由编程人员在编写程序时，或由编译程序编译源程序时，对一个作业的所有信息确定在主存存储空间中的位置。因此，这种直接指定方式的存储分配方案，不仅用户感到不便，而且存储空间的利用也不那么有效 静态分配方式(Static Allocation)用户在编程时，或由编译程序产生的目的程序，均可从其地址空间的零地址开始；当装配程序对其进行连接装入时才确定它们在主存中的相应位置，从而生成可执行程序。也就是说，存储分配是在装入时实现的。静态分配策略的存储管理很简单，但在多道程序系统中不能有效地共享存储器资源这种静态存储分配方式的特点是： 在一个作业装入时必须分配其要求的全部存储量； 如果没有足够的存储空间，就不能装入该作业； 一旦一个作业进入内存后，在其退出系统之前，它一直占用着分配给它的全部存储空间； 作业在整个运行过程中不能在内存中“搬家”、也不能再申请存储量。 动态分配方式(Dynamic Allocation)：动态分配是一种更加有效的使用主存储器的方法。这种动态存储分配方式的特点是： 作业在存储空间中的位置，也是在其装入时确定的； 在其执行过程中可根据需要申请附加的存储空间； 一个作业已占用的部分存储区域不再需要时，可以要求归还给系统。即：这种存储分配机制能接受不可预测的分配和释放存储区域的请求，实现个别存储区域的分配和回收； 存储区域的大小是可变的； 允许作业在内存中“搬家”。 基本概念逻辑地址（相对地址，虚地址） Logical Address用户的程序经过汇编或编译后形成目标代码，目标代码通常采用相对地址的形式，其首地址为 0，其余指令中的地址都相对于首地址而编址。不能用逻辑地址在内存中读取信息物理地址（绝对地址，实地址）Physical Address内存中存储单元的地址，可直接寻址名空间 namespace是一种封装或组织代码的方式，它可以将一组标识符（如变量、函数、类、模块等）包含在一个名为命名空间的范围内地址空间 Address Space程序用来访问信息所用地址单元的集合，是逻辑（相对）地址的集合，由编译程序生成。存储空间 Storage Space主存中物理单元的集合。这些单元的编号称物理地址或绝对地址。存储空间的大小是由主存的实际容量决定的。 地址空间是逻辑地址的集合；存储空间是物理地址的集合。一个是“虚”的概念，一个是“实”的物体。一个编译好的目标程序存在于它自己的地址空间中，当要它在计算机上运行时，才把它装入存储空间。一个作业在编译、装入前后存在于不同的空间。 程序的装入和链接将一个用户源程序变为一个可在内存中执行的程序，通常要经过下列几步： 预处理（Preprocessing）：这是编译过程的第一步，主要处理源代码中的预处理器指令。例如，C 和 C++语言中的#include和#define等。预处理器将处理这些指令，如扩展包含文件，替换宏定义等，生成一个预处理后的源代码文件。 编译（Compilation）：在这个阶段，编译器将预处理后的源代码转换为汇编语言。编译器在这个过程中会进行词法分析、语法分析、语义分析和优化等操作。编译器还会检查源代码中的错误，并生成对应的错误和警告信息。 汇编（Assembly）：汇编阶段将编译阶段生成的汇编代码转换为机器语言代码，也就是目标代码。这个过程是由汇编器完成的。每一条汇编语言指令通常会被转换为一条机器语言指令。 链接（Linking）：链接阶段是将所有的目标代码和必要的库函数链接在一起，生成一个可执行文件。链接器会处理源代码中的外部符号引用，将它们与正确的地址或者符号绑定在一起。 装入（Loading）：当程序运行时，加载器（Loader）的任务是将可执行文件从硬盘加载到内存中，然后开始执行。加载器还负责解析程序对动态库的依赖，并将这些库加载到内存中。 程序的装入根据存储空间的分配方式，将一个装入模块装入内存时，可采用三种方式： 绝对装入方式Absolute Loading Mode：在编译时，如果知道程序将驻留在内存的具体位置，那么编译程序将产生**实际存储地址(绝对地址)**的目标代码。装入程序按照装入模块中的地址，将程序和数据装入内存。 装入模块被装入内存后，由于程序中的逻辑地址与实际内存地址完全相同，故不需对程序和数据的地址进行修改。 通常在程序中采用符号地址，然后在编译或汇编时，再将这些符号地址转换为绝对地址。 静态重定位装入方式Static Relocation Loading Mode：地址变换是在装入内存时一次完成的，且以后不能移动。一般情况下,物理地址=相对地址+内存中的起始地址适用于多道程序环境，可以将装入模块装入到内存中任何允许的位置。 优点：不需硬件支持，可以装入有限多道程序。 缺点：一个程序通常需要占用连续的内存空间，程序装入内存后不能移动，不易实现共享。 动态重定位装入方式/动态运行时装入方式Dynamic Run-time Loading装入程序将装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把地址转换推迟到程序执行时进行。在硬件地址变换机构的支持下，随着对每条指令或数据的访问自动进行地址变换，故称为动态重定位最简单的办法是利用一个重定位寄存器(RR)。该寄存器的值是由进程调度程序根据作业分配到的存储空间起始地址来设定的。在具有这种地址变换机构的计算机系统中，当执行作业时，不是根据 CPU 给出的有效地址去访问主存，而是将有效地址与重定位寄存器中的内容相加后得到的地址作为访问主存的地址采用动态重定位技术后，程序中所有指令和数据的实际地址是在运行过程中最后访问的时刻确定的。也就是说，在作业运行过程中临时申请分配附加的存储区域或释放已占用的部分存储空间是允许的。 主要优点① 主存的使用更加灵活有效。这里，一个用户的作业不一定要分配在一个连续的存储区，因而可以使用较小的分配单位。而且，在作业开始之前也不一定把它的地址空间全部装入主存，而可以在作业执行期间响应请求动态地进行分配。② 几个作业共享一程序段的单个副本比较容易。③ 有可能向用户提供一个比主存的存储空间大得多的地址空间。因而无需用户来考虑覆盖结构，而由系统来负责全部的存储管理。 主要缺点① 需要附加硬件支持；② 实现存储器管理的软件比较复杂。 程序的链接链接程序的功能，是将经过编译后所得到的一组目标模块以及它们所需要的库函数，装配成一个完整的装入模块。连接程序按各个模块的相对地址依次构成统一的从0号单元开始编址的逻辑地址空间根据链接时间的不同，可把链接分成如下三种： 静态链接 Static Linking在程序运行之前，先将各目标模块及它们所需的库函数，链接成一个完整的装入模块（又称执行模块），以后不再拆开。将几个目标链接装配成一个装入模块时，需解决以下两个问题： 将相对地址进行修改。即将除第一个模块外的相对地址修改成装入模块中的相应的相对地址 变换外部调用符号。即将每个模块中所用的外部调用符号，都变换为相对地址。这种先进行链接所形成的一个完整的装入模块，又称为可执行文件Pros：适用范围广，不必担心用户机器缺少某个库函数Cons：修改或更新某个目标模块时，需要重新打开装入模块，效率低且很多时候不可行；静态链接的每个模块都要有目标模块的副本，无法实现共享，浪费空间 装入时动态链接Load-Time Dynamic Linking用户源程序经编译后所得到的目标模块，是在装入内存时，边装入边链接的。即在装入一个目标模块时，若发生一个外部模块调用，将引起装入程序去找出相应的外部目标模块，并将其装入内存。 Pros：便于软件版本的修改和更新,只需修改各个目标模块，不必将装入模块拆开，非常方便;便于实现目标模块共享。即可以将一个目标模块链接到几个应用模块中，从而实现多个应用程序对该模块的共享。 运行时动态链接(Run-Time Dynamic Linking)目前最常使用的链接方式,采用装入时动态链接方式，虽然可将一个装入模块装入到内存的任何地方，但装入模块的结构是静态的，表现在： 进程（程序）在整个执行期间，装入模块是不改变的； 每次运行时的装入模块是相同的。并且事先无法知道本次要运行哪些模块，只能将所有可能要运行的模块在装入时全部链接在一起，而实际上往往有些目标模块根本不会运行。采用运行时动态链接可将某些目标模块的链接推迟到执行时才进行，即在执行过程中，若发现一个被调用模块尚未装入内存时，由 OS 去找到该模块，将它装入内存，并链接到调用模块上。 运行时动态链接的工作原理如下： 加载阶段：当程序启动时，动态链接器（在 Unix-like 系统中通常是 ld.so 或 ld-linux.so，在 Windows 系统中是 kernel32.dll）会加载程序需要的动态链接库（DLL）或共享对象（SO）文件。这些库文件包含程序需要的函数和数据。 链接阶段：在程序运行时，当程序第一次调用某个库函数时，动态链接器会查找这个函数在内存中的实际地址，并将这个地址写入程序的全局偏移表（GOT）或程序查找表（PLT）。这个过程被称为“解析”。 运行阶段：一旦函数地址被解析，程序就可以直接调用这个函数，而不需要再次通过动态链接器。如果程序再次调用这个函数，它会直接从 GOT 或 PLT 中获取函数的地址。 运行时动态链接的优点包括： 主要优点:凡在执行过程中未被用到的目标模块，都不会被调入内存和被链接到装入模块上，这样不仅可加快程序的装入过程，而且可节省大量的内存空间。 节省内存：因为多个程序可以共享同一个库的单个副本。 模块化：程序可以在运行时加载和卸载模块，这使得程序更加灵活和可扩展。 版本控制：可以在不重新编译程序的情况下更新库。 运行时动态链接的缺点包括： 性能开销：动态链接和解析需要时间，尤其是在程序第一次调用库函数时。 兼容性问题：如果库的新版本和旧版本不兼容，那么使用这个库的程序可能会出错。 连续分配存储管理方式连续分配指为用户程序分配一个连续的内存空间。程序空间本来就是连续的,用连续的内存装入连续的程序，减少管理工作的难度连续分配有三种方式： 单一连续分配方式单用户系统在一段时间内，只有一个进程在内存，故内存分配管理十分简单，内存利用率低。内存分为两个区域，一个供操作系统使用，一个供用户使用. 分区式分配方式系统把内存用户区划分为若干分区，分区大小可以相等，也可以不等。一个进程占据一个分区。这是早期用于多道程序的一种较简单的存储管理方式。它又可以分为： 固定分区 动态（可变）分区 可重定位分区分配(汤子瀛) 单一连续分配内存中仅驻留一道用户程序，整个用户区为一个用户独占。内存分为两个区域：系统区，用户区。应用程序装入到用户区，可使用用户区全部空间。最简单，适用于单用户、单任务的 OS。 优点：易于管理。 缺点：对要求内存空间少的程序，造成内存浪费；程序全部装入，很少使用的程序部分也占用内存。例如：DOS 2.0 以下的 DOS 操作系统采用单一连续区域主存管理方法。 🌟 内存碎片内部碎片 Internal Fragment：分配给用户但用户没有使用的空间，即多分配的空间。分配给进程的内存空间比进程所需的内存空间大，但未使用的部分不能再分配给其他进程，造成内部碎片。外部碎片 External Fragment：没有分配但无法分配的空间，即太小而无法分配的空间。相邻已分配内存空间的空闲区域太小，不能分配给需要的进程，造成外部碎片。 固定分区分配固定分区分配思想：将内存用户空间划分为若干个固定大小的区域，每个区域称为一个分区（region），在每个分区中只装入一道作业 ，从而支持多道程序并发设计。由于这些存储区域是在系统启动时划定的，在用户作业装入及运行过程中，其区域的大小和边界是不能改变的。固定式分区的划分方法有两种：(1)分区大小相等(2)分区大小不等为了实现这种固定分区的分配，系统需要建立一张分区说明表。这个分区说明表指出可用于分配的分区数以及每个区的大小、起始地址及状态(是否已被分配)内存分配过程当有作业要装入内存时，内存分配程序检索分区说明表，从中找出一个尚未使用的满足大小要求的分区分配给该作业，然后修改分区的状态；如果找不到合适的分区就拒绝为该作业分配内存。 内存中已分配给用户但未被利用的区域称为 “内零头”（内部碎片，内碎片）;固定分区分配有内零头产生 优点：易于实现，开销小 缺点：内碎片造成浪费；分区总数固定，限制了并发执行的程序数目；存储空间的利用率太低。现在的操作系统几乎不用它了。 动态分区分配动态分区分配是指根据进程的实际需要，动态地为之分配连续的内存空间。即分区的边界可以移动，分区的大小是可变的。动态分区又有两种不同选择，一种是分区的数目固定大小可变，而另一种则允许分区的数目和大小都可变。 为了说明它们之间的重要差异，我们考虑一个具有 256K 字节存储器的系统。 第一种方案(分区数目固定)：假定系统初始化时规定把存储空间划分为 8 个分区;在下图(a)中用问号(?)来表示它们。在系统运行一段时间后，已有 192K 存储空间分配给 7 个作业，剩下 64K 还未分配，如下图(b)所示。现在，又有两个作业 P 和 Q 准备调入，它们每个需要 32K 存储空间。显然，我们有足够的存储空间。却没有足够数的存储区域(目前只有一个可用)。因此，只能允许一个作业(如 P)被调入，如下图(c)所示。第二种方案(分区数目可变)：最初，没有建立任何分区，整个可用的存储空间用一个问号来表示；之后，发生上述所说在系统运行一段时间后，已有 192K 存储空间分配给 7 个作业，剩下 64K 还未分配的情况，如图(b)；现在，我们在剩下的 64K 存储空间中，可以创建两个分区，分别装入作业 P 和 Q，如图(c)。显然，此方案比第一个方案更灵活，内存利用率更高。 动态分区分配算法实现动态分区分配，通常有两种数据结构：空闲分区表和空闲分区链。 算法 系统运行一段时间后，在整个存储空间内将出现许多大小不等的区域，有的仍被作业进程占用，有的则因作业已退出系统而成为可用于再分配的区域。现在假设有一个新的作业需调入主存，如何为其选择一个合适的区域？ 基于顺序搜索 最佳适应算法(Best Fit) 最坏适应算法(Worst Fit) 首次适应算法(First Fit) 循环首次适应算法(Next Fit) 基于索引搜索 快速适应算法(Quick Fit) 伙伴系统 最佳适应算法 Best fit: BF就是为一作业选择分区时总是寻找其大小最接近作业所要求的存储区域。即：把作业放入这样的分区后剩下的内部碎片最小。为了加快查找速度，应将存储空间中所有的空白区按其大小递增的顺序链接起来，组成一空白区链(Free List)。优点： 如果存储空间中具有正好是所要求大小的存储空白区，则必然被选中； 如果不存在这样的空白区，也只对比要求稍大的空白区进行划分，而绝不会去划分一个更大的空白区。因此，其后遇到大作业到来时，作业要求的存储区域就比较容易得到满足。 缺点： 采用最佳适应算法，在每次分配时，总是产生最小的空白区。因此，经过一段时期后，存储空间中可能留许多这样的空白区，由于其太小而无法使用。为了改善这种情况，在该算法中设置一参数 G，用它来确定最小分区的大小。当选择一个分区时，如果选中的空白区与要求的大小之差小于 G，则不再对它划分，而把整个这个空白区分配给申请的作业。 在回收一个分区时，为了把它插入到空白区链中合适的位置上也颇为费时。所以，这种算法乍看起来是最佳的，其实则不然。 最坏适应算法 Worst fit: WF与最佳适应算法相反，它在为作业选择存储区域时，总是寻找最大的空白区。在划分后剩下的空白区也是最大的，因而对以后的分配很可能仍然是有用的，这是该算法的一个优点。但是，由于最大的空白块总是首先被分配而进行划分，当有大的作业时，其存储空间的申请往往得不到满足，这是该算法的一个缺点。为了支持这个算法的实现，空白块应以大小递减的顺序链接起来。 首次适应算法 First fit: FFBF 和 WF 各有其利弊。首次适应算法是对它们进行折衷考虑后设计出来的。每个空白区按其在存储空间中地址递增的顺序链在一起，即每个后继空白区的起始地址总是比前者的大。在为作业分配存储区域时，从这个空白区链的始端开始查找，选择第一个足以满足请求的空白块，而不管它究竟有多大。和上述算法一样，这个选择的空白区被分成两部分。一部分与请求的大小相等，分配给作业；剩下的部分留在空白区链中。显然，这个算法倾向于优先利用存储空间中低址部分的空白区。 主要优点算法简单，查找速度快；留在高址部分的大的空白区被划分的机会较少，因而在大作业到来时也比较容易得到满足。主要缺点：这种算法常常利用一个大的空白区适应小作业的请求，从而留下一些较小的无法用的空白区(外部碎片)，存储空间利用率不高；而且，由于所有的请求都是从空白区链的始端开始查找，因而这些小而无用的空白区集中在这个链的前端，相应地，一些较大空白区在链的尾端才能发现，这种情况将使找到合适空白区的速度降低。 下次(循环首次)适应算法 Next fit: NF为了克服上述缺点，又设计了一种称为“下次”适应的算法，它实际上是首次适应算法的一种变形，故也被称为带旋转指针的首次适应算法(Next Fit with Roving Pointer)为此，我们把存储空间中空白区构成一个循环链。每次为存储请求查找合适的分区时，总是从上次查找结束的地方开始，只要找到一个足够大的空白区，就将它划分后分配出去。显然，采用这一策略后，存储空间的利用更加均衡，而不至于使小的空白区集中于存储器的一端。但是，在存储器的另一端也不可能保留大的空白块，因此，当需要获得相当大的空白区时，能满足的可能性减少了。 快速适应算法 Quik fit:QF将空闲分区根据其容量大小进行分类，对于每一类具有相同容量的所有空闲分区，单独设立一个空闲分区链表。这样，系统中存在多个空闲分区链表；同时，在内存中设立一张管理分区类型，并记录了该类型空闲分区链表表头的索引表，该表的每一个表项记录了对应类型空闲分区链表表头的指针。分配过程：根据进程的长度，寻找到能容纳它的最小空闲分区链表，并取下第一块进行分配即可优点 查找效率高。 该算法在进行空闲分区分配时，不会对任何分区产生分割，所以能保留大的分区，满足对大空间的需求，也不会产生内存碎片。 缺点 在分区归还主存时算法复杂，系统开销较大。 该算法在分配空闲分区时是以进程为单位，一个分区只属于一个进程，因此在为进程所分配的一个分区中，或多或少地存在一定的浪费。空闲分区划分越细，浪费则越严重， 例题 分区分配操作涉及动态分区的主要操作有分配内存和回收内存。这些操作是在程序接口中通过系统调用发出的。 分配内存：向操作系统提出一特定存储量的请求。通常，它并不要求这个分配的存储区域限于特定的位置，但是，这个区域必须是连续的。OS 利用某种分配算法，从空闲分区链(表)中找到所需大小的分区。 请求的分区大小为 u.size 表中每个空闲分区的大小为 m.size size 是事先规定的不再切割的剩余分区的大小 回收内存进程用于归还一个不再需用的存储区域。 当进程运行完毕释放内存时，系统根据回收区的首址，从空闲区链(表)中找到相应的插入点。 在回收一个分区时，一个回收的分区与空白区邻接的情况有四种，对这四种情况分别作如下处理： 回收区与插入点的前一个空闲分区 F1 相邻接。此时应将回收区与插入点的前一分区合并(通过修改其前一分区 F1 的大小，不必为回收区分配新表现) 回收区仅与下面的空白区邻接，合并后仍为空白区 F2，但其起始地址和大小均需改变。用回收区的首址作为新空闲区的首址，大小为两者之和 回收区与上、下面的空白区邻接此时将三个分区合并，使用 F1 的表项和 F1 的首址，取消 F2 的表项，大小为三者之和。 回收区与上、下面的空白区均不邻接，在这种情况下，应为回收区单独建立一新表项，填写回收区的首址和大小，并根据首地址插入到空闲链中的适当位置。 伙伴系统 Buddy System固定分区和动态分区都存在内部碎片和外部碎片的问题。伙伴系统是一种解决内部碎片问题的方法。 在伙伴系统中，可用内存块的大小为$2^k (1\\le k\\le m)$其中$2^1$表示分配的最小块尺寸，$2^m$表示分配的最大块尺寸，通常是可供分配的整个内存空间大小。对空闲区按照大小分类，相同大小的分区链接为一个双向空闲链表；最多可形成 k 个链表。 进程请求大小为 n 的存储空间： 找到 i，使得$2^{i-1}\\lq n &lt; 2^i$ 在空闲分区大小为$2^i$的链表中查找，若找到，则分配； 如果没找到，从$2^{i+1}$的链表中查找，找到后，将其分裂为两个大小相等的伙伴，其中一个分配给进程，另一个插入到$2^i$相应的链表中。 如果仍然没找到，则继续查找更大的链表，直到找到或者查找完所有链表。 > 分割及回收合并分区需要时间开销，多用于多处理机系统中。 哈希算法利用哈希快速查找的优点，以及空闲分区在可利用空间表中的分布规律，建立哈希函数，构造一张哈希表，以空闲分区大小为关键字，每一个表项记录了一个对应的空闲分区链表表头指针。当进行空闲分区分配时，根据所需空闲分区大小，通过哈希函数计算，即得到在哈希表中的位置，从中得到相应的空闲分区链表，实现最佳分配策略。 可重定位分区分配紧凑 Compaction可变式分区分配策略是在装入作业时根据其要求量为其划定相应的区域。这种分配策略，消除了固定式分区分配造成的“内零头”，但不可避免地在存储空间中造成“外零头”，为了进一步提高存储器的利用率，必须设法减少由于外零头造成的浪费。 一个最简单而直观的解决零头问题的办法是，定时地或者在内存紧张时，把存储空间中的空白区合并为一个大的连续区。实现方法将内存中的所有作业进行移动，使它们全都相邻接，这样，可把原来分散的多个小分区合成一个大分区。这种技术称为存储器的紧凑Compaction。把一个作业从一个存储区域移动到另一个存储区域，需要对作业中的某些地址部分和地址常数等进行调整。一个较实用且可行的办法是采用动态重定位技术。一个作业在主存中移动后，只要改变重定位寄存器中的内容即可。 动态重定位 Dynamic Relocation在动态运行时装入的方式中，作业装入内存后的所有地址都仍然是相对地址，将相对地址转换为物理地址的工作，被推迟到程序指令要真正执行时进行。程序在执行时，真正访问的内存地址是相对地址与重定位寄存器中的地址相加而形成的。 Refdata-flair memory-management-in-computer","link":"/UESTC/OS/Ch4-1StorageManagement/"},{"title":"The Dead Lock","text":"产生死锁的原因和必要条件死锁相关定义永久（可重用）性资源 可抢占性资源: 是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺 不可抢占性资源: 当系统把这类资源分配给某进程后，就不能强行收回，只能在进程用完后自行释放。临时性（消耗性）资源 只可使用一次的资源 死锁 Dead Lock：如果一组进程中的每一个进程都在等待仅由该组进程中的其它进程才能引发的事件，那么该组进程是死锁的。 死锁会造成进程无法执行 死锁会造成系统资源的极大浪费(资源没法释放) 产生死锁的原因 竞争资源 进程间推进顺序不当 产生死锁的必要条件 互斥条件:进程对分配到的资源进行排它性使用 请求和保持条件:进程已经保持了至少一个资源，但又提出了新的资源要求，而该资源又被其他进程占有，请求进程阻塞，但对已经获得的资源不释放 不剥夺条件:进程已获得的资源在未使用完之前，不能被剥夺，只能在使用完时自己释放 环路等待条件:发生死锁时，必然存在进程—资源的环形链 资源分配图资源分配图 Resource Allocation Graph(RAG)：用来描述进程和资源之间的关系，以及资源之间的竞争关系。它是有向图，说明了系统资源、进程状态，其中每个资源、进程用节点表示，圆点表示资源的一个示例，一个资源可拥有多个实例 1.竞争不可抢占性资源引起死锁 2.竞争临时性资源引起进行死锁临时性资源，可以创造（生产）和撤消（消耗）的资源，也称之为消耗性资源，如信号量、消息、buffer 中的数据等资源例如：S1、S2 和 S3 是临时性资源，是由进程 P1、P2 和 P3 产生的消息。如果消息通信处理顺序不当也会发生死锁。 3. 进程推进顺序不当引起死锁联合进程图(Joint Progress Diagram)记录共享资源的多个进程的执行进展 竞争资源，未必产生死锁。是否产生死锁，还取决于动态执行和应用程序细节 12P: 申请A，申请B，释放A，释放BQ: 申请B，申请A，释放B，释放A 预防死锁的方法 预防死锁 Deadlock Prevention：设置某些限制条件，破坏四个必要条件中的一个或几个。优点：容易实现缺点:系统资源利用率和吞吐量降低 避免死锁 Deadlock Avoidance：在资源的动态分配过程用某种方法防止系统进入不安全状态。优点：较弱限制条件可获得较高系统资源利用率和吞吐量。缺点：有一定实现难度。死锁避免的两种方法： 若一个进程的请求会导致死锁，则不启动进程 若一个进程增加的资源请求会导致死锁，则不允许这一资源分配 检测死锁 Deadlock Detection：预先不采取任何限制，也不检查系统是否已进入不安全区，通过设置检测机构，检测出死锁后解除。 解除死锁 Unlocking deadlock：常用撤消或挂起一些进程，回收一些资源。 预防死锁和避免死锁是两种不同的概念，两者都是事先防范死锁的发生，但是方法不同。预防死锁是在系统设计时就考虑到死锁的可能性，采取措施避免死锁的发生，而避免死锁是在系统运行时，根据系统的状态，采取措施避免死锁的发生。 预防死锁：破坏死锁的必要条件，施加的条件比较严格，可能会影响到进程的并发执行。避免死锁：资源动态分配，施加的限制条件较弱一些，有利于进程的并发执行。 摒弃请求和保持条件第一种协议：系统要求所有进程一次性申请所需的全部资源，只要有一种资源要求不能满足，即使是已有的其它各资源，也全部不分配给该进程，而让其等待 优点：简单、易于实现且很安全。 缺点：资源严重浪费；进程延迟运行。 第二种协议：允许一个进程只获得运行初期所需的资源后便开始运行。进程运行过程中再逐步释放已分配给自己的、且已使用完毕的全部资源，然后再请求新的所需资源优点：使进程更快地完成任务，提高设备的利用率，减少进程发生饥饿的概率 摒弃不剥夺条件进程在需要资源时才提出请求，一个已经保持了某些资源的进程，再提出新的资源要求而不能立即得到满足时，必须释放已经保持的所有资源，待以后需要时再重新申请。Cons:实现复杂，代价大；延长了进程的周转时间，增加系统开销，降低系统吞吐量。 摒弃环路等待条件系统将所有资源按类型进行线性排队（常用-不常用），并赋予不同的序号。所有进程对资源的请求必须严格按资源序号递增的次序提出，按序号递减的次序释放 假设我们的系统有三种资源：A、B、C，我们将它们按照使用频率进行排序，得到的序列是 A（最常用）-&gt; B -&gt; C（最不常用）。然后，我们给每种资源分配一个序号：A=1，B=2，C=3。在这种策略下，所有的进程必须按照资源序号递增的顺序请求资源,按照资源序号递减的顺序释放资源。 避免死锁的方法安全状态:是指系统能按某种进程顺序 〈P1, P2, …, Pn〉，来为每个进程 Pi 分配其所需资源，直至满足每个进程对资源的最大需求，使每个进程都可顺利地完成,则称这是一个安全序列。安全序列的实质是:序列中的每一个进程 Pi 到运行完成尚需的资源量不超过系统当前剩余的资源量与所有在它之前的进程 P1, P2, …, Pi-1 所占用的资源量之和。如果系统无法找到这样一个安全序列，则称系统处于不安全状态。 并非所有不安全状态都是死锁状态，但当系统进入不安全状态后，便可能有进入死锁状态。 系统处于安全状态时，不会进入死锁状态。 死锁避免策略并不能确切的预测死锁，仅仅是预料死锁的可能性并确保永远不会出现这种可能性。死锁避免比死锁预防限制少，但使用中也有许多限制： 必须事先声明每个进程请求的最大资源。 考虑的进程必须是无关的，执行的顺序必须没有任何同步的要求。 分配的资源数目必须是固定的。 在占有资源时，进程不能退出。 🌟 银行家算法思想 死锁避免策略Banker’s Alogorithm 银行家算法的基本思想避免死锁的关键在于如何准确的预测是否会出现死锁，从而避免死锁。最有代表性的避免死锁的算法是 Dijkstra 在 1965 年提出的银行家算法。该算法可用于银行发放一笔贷款前，预测该笔贷款是否会引起银行资金周转问题。银行的资金就类似于计算机系统的资源，贷款业务类似于计算机的资源分配。银行家算法能预测一笔贷款业务对银行是否是安全的，该算法也能预测一次资源分配对计算机系统是否是安全的。 当前状态下，某进程申请资源； 系统假设将资源分给该进程，满足它的需求； 检查分配后的系统状态是否是安全的，如果是安全，就确认本次分配；如果系统是不安全的，就取消本次分配并阻塞该进程(这一步也被称为安全性算法) 银行家算法的数据结构为实现银行家算法，系统中必须设置若干数据结构 可利用资源向量 Available这是一个含有 m 个元素的数组，其中的每一个元素代表一类可利用的资源数目，其初始值是系统中所配置的该类全部可用资源的数目，其数值随该类资源的分配和回收而动态地改变。如果 Available[j]= K，则表示系统中现有 Rj 类资源 K 个。 最大需求矩阵 Max这是一个 n×m 的矩阵，它定义了系统中 n 个进程中的每一个进程对 m 类资源的最大需求。如果 Max[i,j]=K，则表示进程 i 需要 Rj 类资源的最大数目为 K。 分配矩阵 Allocation这也是一个 n×m 的矩阵，它定义了系统中每一类资源当前已分配给每一进程的资源数。如果 Allocation[i,j]=K，则表示进程 i 当前已分得 Rj 类资源的数目为 K。 需求矩阵 Need这也是一个 n×m 的矩阵，用以表示每一个进程尚需的各类资源数。如果 Need[i,j]=K，则表示进程 i 还需要 Rj 类资源 K 个，方能完成其任务。 设 $Request_i$ 是进程 $P_i$ 的请求向量，如果 $Request_i[j] = K$，表示进程 $P_i$ 需要 K 个 $R_j$ 类型的资源。当 Pi 发出资源请求后，系统按下述步骤进行检查：(1) 如果 $Request_i[j] \\leq Need[i,j]$，便转向步骤 2；否则认为出错，因为它所申请的资源数已超过它所宣布的需要的资源数。(2) 如果 $Request_i[j] \\leq Available[j]$，便转向步骤(3)；否则， 表示尚无足够资源，Pi 须等待。(3) 系统试探着把资源分配给进程 Pi，并修改下面数据结构中的数值：$Available[j]=Available[j]-Requesti[j];$$Allocation[i,j]=Allocation[i,j]+Requesti[j];$$Need[i,j]=Need[i,j]-Requesti[j];$(4) 系统执行安全性算法，检查此次资源分配后，系统是否处于安全状态。若安全，才正式将资源分配给进程 Pi，以完成本次分配；否则， 将本次的试探分配作废，恢复原来的资源分配状态，让进程 Pi 等待。 安全性算法(1) 设置两个向量：工作向量 Work: 它表示系统可提供给进程继续运行所需的各类资源数目，它含有 m 个元素，在执行安全算法开始时，Work 初始化为 Available;Finish: 它表示系统是否有足够的资源分配给进程，使之运行完成。开始时先初始化 Finish[i]=false; 当有足够资源分配给进程时， 再令 Finish[i]=true。(2) 从进程集合中找到一个能满足下述条件的进程：$Finish[i] = false$$Need[i,j] \\leq Work[j]$若找到， 执行步骤(3)，否则，执行步骤(4)。(3) 当进程 Pi 获得资源后，可顺利执行，直至完成，并释放出分配给它的资源，故应执行：$Work[j]=Work[j]+Allocation[i,j];$$Finish[i]=true;$go to step 2;(4) 如果所有进程的$Finish[i]=true$都满足， 则表示系统处于安全状态；否则，系统处于不安全状态。 死锁的检测与解除如果系统不愿意附加太多约束条件预防死锁，也不希望系统额外开销预测并避免死锁，那么，只能允许死锁出现，然后，再解除它。因此，系统需要利用某种方法来检测死锁。 死锁检测化简资源分配图—检测死锁资源分配图(Resource Allocation Graph)该图是由一组结点 N 和一组边 E 所组成的一个对偶G＝（N,E），其中： 把 N 分为两个互斥的子集，即一组进程结点P={P1,P2，…，Pn}和一组资源结点R={R1, R2 ，…， Rn}，N＝PUR 凡属于 E 中的一个边 e∈E 都连接着 P 中的一个结点和 R 中的一个结点e={Pi,Rj}表示进程 Pi 请求一个单位的 Rj 资源e={Rj,Pi}表示把一个单位的资源 Rj 分配给进程 Pi Steps:第一步:先看系统还剩下多少资源没分配，再看有哪些进程是不阻塞的（即系统有足够的空闲资源分配给它）第二步:把不阻塞的进程的所有边都去掉，形成一个孤立的点，再把系统分配给这个进程的资源回收回来第三步:重复一二步第四步:最后，若所有的资源和进程都可以变成孤立的点。这样的图就叫做“可完全简化” **死锁定理**：S 为死锁状态当且仅当 S 状态的资源分配图是不可完全简化的。 死锁检测中的数据结构(1) 可利用资源向量 Available，它表示了 m 类资源中每一类资源的可用数目。(2) 把不再占用资源的进程(即向量 Allocation 和 Request 为 0 的进程)记入 L 表中， 即L = Li∪L(3) 从进程集合中找到一个 Requesti≤Work 的进程，做如下处理：① 将其资源分配图简化，释放出资源，增加工作向量 $Work=Work+Allocation_i$。 ② 将它记入 L 表中。(4) 若不能把所有进程都记入 L 表中， 便表明系统状态 S 的资源分配图是不可完全简化的。 因此，该系统状态将发生死锁。 12345678910Work = Available;L = {Li| Allocation_i = 0 ∩ Request_i = 0};for(i=1; Pi not in L; i++){ if Requesti≤Work{ Work=Work+Allocation_i; Li=Pi； L=Li∪L; }}deadlock= !(L={p1, p2, …, pn}); 例题p 个进程共享 m 个同类资源，每一资源在任一时刻只能供一个进程使用，每一进程对任一资源都只能使用一有限时间，使用完便立即释放，并且每个进程对该类资源的最大需求量小于该类资源的数目。设所有进程对资源的最大需要之和小于 p+m。试证：在系统中不会发生死锁。证明：假设系统发生死锁。设 Max(i)为进程 i 的最大资源需求量，Need(i)为进程 i 尚需资源量，Allocation(i)为已分配资源量，则系统在任意时刻有：$\\sum_{i=1}^{p}Max(i) = \\sum_{i=1}^{p} Need(i) + \\sum_{i=1}^{p}Allocation(i) \\lt p+ m①$系统发生死锁，则一方面说明所有 m 个资源都应该已经分配出去：$\\sum_{i=1}^{p} Allocation(i)=m②$另一方面，进程将处于无限等待状态之中。由 ① ② 可以得到：$\\sum_{i=1}^{p} Need(i) \\lt p③$即死锁后 p 个进程还需要的资源量之和少于 p，这就意味着此刻至少有一个进程譬如 j，已经获得了所需要的全部资源数，即$Need（j）=0$。但是系统发生死锁时，每个进程至少还需要一个资源单位，即$\\sum_{i=1}^{p} Need(i) \\geq p$，与等式 ③ 矛盾。此外，既然该进程已经获得了所需要的全部资源数，那么就能完成其任务并释放占有的资源，以保证系统能进一步前进，这与前面的假定死锁矛盾。 死锁的解除当发现有进程死锁时，常采用的两种方法是解除死锁： 剥夺资源。从其它进程剥夺足够数量的资源给死锁进程，以解除死锁状态。 撤消进程。最简单的撤消进程的方法，是使全部死锁进程都夭折掉；或者按照某种顺序逐个地撤消进程，直至有足够的资源可用，使死锁状态消除为止。 按照解除死锁复杂度递增的顺序列出解除死锁的方法： 撤消死锁进程 -该方法是目前操作系统中解除死锁的常用方法。 把死锁进程恢复到前一个检查点，重新执行每个进程。 按照某种原则逐个选择死锁进程进行撤消，直到解除系统死锁。 按照某种原则逐个剥夺进程资源，直到解除死锁。 第三种和第四种方法需要选择系统付出代价最小的进程，最小代价原则： 到目前为止，花费处理机的时间最少的进程； 到目前为止，产生输出最少的进程； 估计未执行部分最多的进程； 到目前为止，已获得资源量最少的进程； 优先级最低的进程。为把系统从死锁状态中解脱出来，所花费的代价(最小)可表示为： $R(S)_{min} = \\sum_{1\\lt i\\lt j\\lt n} min{C_{ij}}$ $R(S)_{min}$ 表示从死锁状态中解脱出来的最小代价。 $C_{ui}$, $C_{uj}$, $C_{uk}$, … 表示各个死锁参与者（例如线程、进程或事务）需要付出的代价。这些代价可能是不同的，因为每个参与者可能在不同的状态，需要执行的操作也可能不同。 $min{C_{ui}}$, $min{C_{uj}}$, $min{C_{uk}}$, … 表示选择每个死锁参与者需要付出的最小代价。这是因为在解决死锁时，通常会选择使得总代价最小的策略。","link":"/UESTC/OS/Ch3-2TheDeadLock/"},{"title":"The Processor Scheduling","text":"处理机调度的层次 Process Scheduling Levels概述 Overview处理机是计算机系统中的重要资源,在多道程序环境下[Ch1-1OSIntroduction#操作系统的发展过程]，进程数目通常多于处理机的数目,系统必须按一定方法动态地把处理机分配给就绪队列中的一个进程;处理机利用率和系统性能（吞吐量、响应时间）在很大程度上取决于处理机调度 WHAT：按什么原则分配 CPU 调度算法 WHEN：何时分配 CPU 调度的时机 HOW：如何分配 CPU 调度过程及进程的上下文切换 作业 JOB作业是用户在一次算题过程中或一次事务处理中，要求计算机系统所做的工作的集合作业是一个比程序更广泛的概念，可以包含多个程序和数据，还配有一份作业说明书，系统根据作业说明书来对作业中的程序进行控制。在批处理系统中，以作业为单位从外存调入内存用户为了让计算机完成某个特定任务，首先编写成源程序，然后提交给计算机通过编译或汇编、连接、装配、运行等步骤，最终由计算机输出用户所需要的运行结果。从计算机管理的角度看，上述一系列的由计算机执行的任务的集合就是作业。 Job and task are today vague, ambiguous terms, especially task. A “job” often means a set of processes, while a “task” may mean a process, a thread, a process or thread, or, distinctly, a unit of work done by a process or thread.job, task and process, what’s the difference 作业步 Job Step计算机完成作业是通过执行一系列有序的工作步骤进行的，每个步骤完成作业的一部分特定工作;把计算机系统完成一个作业所需的一系列有序的相对独立的工作步骤称为作业步作业的各个作业步虽然功能相对独立，但它们之间相互关联，往往是一个作业步的执行需要使用上一个作业步的执行结果。 从用户把源程序提交给计算机系统到得出运算结果要经过若干个工作步骤，首先计算机系统要对用户的源程序进行编辑工作来进行语法检查，再由编译或汇编工作生成目标代码。由连接工作形成装入模块，然后通过装入工作将装入模块装入内存。最后由运行工作得出运行结果。5 个步骤，每步都完成一项相对独立的工作 作业状态转换 Job State Transition JCB作业提交给系统进入后备状态后，系统将为每个作业建立一个作业控制块 JCB。JCB 在作业的整个运行过程中始终存在，并且其内容与作业的状态同步地动态变化。只有当作业完成并退出系统时，JCB 才被撤消。可以说，JCB 是一个作业在系统中存在的唯一标志，系统根据 JCB 才感知到作业的存在作业控制块 JCB 中包含了对作业进行管理的必要信息，JCB 中的信息一部分是从用户提供的作业控制卡或作业说明书中得到，另一部分是记录作业运行过程中的动态信息JCB 的具体内容因系统不同而异 作业名 资源要求 预估的运行时间 最迟完成时间 要求的内存量 要求外设类型、台数 要求的文件量和输出量 资源使用情况 进入系统时间 开始运行时间 已运行时间 内存地址 外设台号 类型级别 控制方式 作业类型 优先级 状态 用户账户…… 处理机调度的层次 在多道程序系统中，一个作业从提交到执行，通常都要经历多级调度,如高级调度、低级调度、中级调度以及 I/O 调度等 系统的运行性能在很大程度上取决于调度,如吞吐量的大小、周转时间的长短、响应的及时性等 调度是多道系统的关键 类型 运行频率 运行时间 算法复杂性 存储 OS 进程调度 高 短 低 内存中 批处理,实时,分时 中程调度 中 较短 中 内外存互换 批处理,实时,分时 作业调度 低 长 高 外存到内存 批处理 引起进程调度的事件： 正在执行的进程正常终止或异常终止 正在执行的进程因某事件而阻塞(如提出 IO 请求后阻塞,调用wait()后阻塞,在进程通信或同步过程中执行了某种原语操作，如 P、V 操作原语，Block 原语， Wakeup 原语等后阻塞) 在引入时间片的系统中，时间片用完，进程被抢占 在抢占式系统中，就绪队列中的某进程优先级高于当前进程,或有更高优先级的进程进入就绪队列 高级调度 High Scheduling高级调度 High Scheduling：又称作业调度、准入调度、长程调度或接纳调度，其主要功能是根据某种算法，把外存上处于后备队列中的那些作业调入内存;它发生在一批作业完成，重新调入一批作业到内存的时候，执行频率低。批处理系统需要有作业调度，分时和实时系统无需此调度。主要用于批处理系统。其设计目标是最大限度地发挥各种资源的利用率和保持系统内各种活动的充分并行; 例：对资源需求不同的作业进行合理搭配科学计算往往需要占用大量的 CPU 时间，属于 CPU 繁忙型作业，对于 I/O 设备的使用少；数据处理要求占用较少的 CPU 时间，但要求大量 I/O 时间，属于 I/O 繁忙型作业；有些递归计算，产生大量中间结果，需要很多内存单元存放它们，这属于内存繁忙型作业。如果能把它们搭配在一起，程序 A 在使用处理机，程序 B 在利用通道 l，而程序 C 恰好利用通道 2 等，这样一来，A、B 和 C 从来不在同一时间使用同一资源，每个程序就好像单独在一个机器上运行 在每次执行作业调度时，都须做出以下两个决定： 接纳多少个作业（取决于多道程序度） 作业太多 服务质量下降 作业太少 资源利用率低 接纳哪些作业 （取决于采用的调度算法） 调度评价指标 多道程序度 Degree Of Multiprogramming：即允许多少个作业同时在内存中运行。周转时间 Turnaround Time：指从作业被提交给系统开始，到作业完成为止的这段时间间隔,也称为作业周转时间带权周转时间 Weighted Turnaround Time：作业的周转时间 T 与系统为它提供服务的时间 TS 之比,称为带权周转世界,$WTT=\\frac{T_{周转时间}}{T_{预计运行时间}}$吞吐量 Throughput：是指在单位时间内系统所完成的作业数服务时间 Service Time：作业的预计运行时间响应比 Response Ratio：$RR=\\frac{T_{等待时间} + T_{预计运行时间}}{T_{预计运行时间}}=\\frac{T_{响应时间}}{T_{预计运行时间}}$,注意 RR&gt;=1 低级调度 Low Scheduling低级调度又称为进程调度或短程调度，它所调度的对象是进程。三种类型 OS 都必须配置这级调度(最基本调度);低级调度用于决定就绪队列中的哪个进程应获得处理机，然后由分派进程Dispatcher执行把分配处理机给相应进程的具体操作。其时间尺度通常是毫秒级的,且是系统中最频繁的调度,要求在实现时做到高效 低级调度基本机制 排队器为了提高进程调度的效率，应事先将系统中所有的就绪进程按照一定的方式排成一个或多个队列。 分派器(调度程序) 分派器把由进程调度程序所选定的进程从就绪队列中取出，然后进行上下文切换，将处理机分配给它。 上下文切换机制当对处理机进行切换时，会发生两对上下文切换操作。 低级调度功能 按某种算法选取进程（调度）。 保存处理机的现场信息（上下文切换第一步骤） 恢复新进程的 CPU 现场,从而把处理器分配给新进程（上下文切换第二步骤）。 进程调度方式 非抢占方式 Non-preemptive Mode：进程占用处理机直至自愿放弃或发生某事件被阻塞时，在把处理机分配给其他进程。 进程正在处理机上执行时，新就绪的进程进入就绪队列，该进程仍继续执行，直到其完成或发生某种事件而进入完成或阻塞状态时，才转让处理机。 优点：算法简单，系统开销小缺点：紧急任务不能及时响应；短进程到达要等待长进程运行结束 抢占方式 Preemptive Mode：允许暂停某个正在执行的进程，将处理机重新分配给另一个进程。 进程正在处理机上执行时，若有某个更为重要或紧迫的进程进入就绪队列，则立即暂停正在执行的进程，将处理机分配给这个更为重要或紧迫的进程 优点：可以防止一个长进程长时间占用处理机，能为大多数进程提供更公平的服务，特别是能满足对响应时间有着较严格要求的实时任务的需求。缺点：抢占方式比非抢占方式调度所需付出的开销较大，且调度算法复杂。 抢占方式 Preemptive Mode 时间片原则:适用于分时、大多数实时以及要求较高的批处理系统 优先权原则:重要紧急作业优先权高 短作业(进程)优先原则。 中级调度 Intermediate-Level Scheduling中级调度 Intermediate-Level Scheduling,又称中程调度(Medium-Term Scheduling);主要目的：为了提高内存利用率和系统吞吐量。具体实现： 使那些暂时不能运行的进程不再占用宝贵的内存资源，而将其调至外存的交换区(swap space)去等待，把此时的进程状态称为就绪驻外存状态或挂起状态。 当这些进程重又具备运行条件、且内存又稍有空闲时，由中级调度来决定把外存上的那些又具备运行条件的就绪进程，重新调入内存，并修改其状态为就绪状态，挂在就绪队列上等待进程调度。 调度队列模型和调度准则调度模型 Scheduling Model三级调度都涉及进程的队列。可以形成以下三种调度队列模型 仅有进程调度(低级调度) 具有高级和低级调度 具有三级调度 仅有进程调度在分时系统中，通常仅设有进程调度,系统把这些进程组织成一个就绪队列,每个进程在执行时，可能有以下几种情况 进程获得 CPU 正在执行； 任务在给定时间片内已完成，释放处理机后为完成状态； 任务在时间片内未完成，进入就绪队列末尾； 在执行期间因某事件而阻塞。 就绪队列时间片轮转，常采用 FCFS(FIFO)算法， FCFS(FIFO)队列。进程执行时三种情况：完成、时间片到、阻塞 具有高级和低级调度在批处理系统中，不仅需要进程调度，而且还要有作业调度就绪队列的形式:在批处理系统中，常用高优先权队列。进程进入就绪队列时，按优先权高低插入相应位置，调度程序总是把处理机分配给就绪队列首进程设置多个阻塞队列:根据事件的不同设置多个队列提高效率 常采用高优先权优先调度算法可采用优先队列，进程来时按优先权插队，从队首调度 （效率高）可采用无序列表，每次调度时，先比较优先权多个阻塞队列 同时具有三级调度的调度队列模型在 OS 中引入中级调度后，进程的就绪状态分为内存就绪(表示进程在内存中就绪)和外存就绪(进程在外存中就绪)。同样，阻塞状态进一步分成内存阻塞和外存阻塞两种状态。在调出操作的作用下，可使进程状态由内存就绪转为外存就绪，由内存阻塞转为外存阻塞；在中级调度的作用下，又可使外存就绪转为内存就绪。 选择调度方式和调度算法的若干准则在不同的系统中通常采用不同的调度方式和算法。 调度的目标 提高处理机的利用率 提高系统吞吐量 尽量减少进程的响应时间 防止进程长期得不到运行 系统选择调度方式和算法的准则调度评价指标术语 面向用户的准则 周转时间短:用来评价批处理系统的性能、选择作业调度方式与算法的重要准则之一 作业在外存后备队列上等待调度的时间。 进程在就绪队列等待调度的时间。 进程在 CPU 上的执行时间。 等待 I/O 操作完成的时间。 响应时间快:用来评价分时系统的性能、选择进程调度算法的重要准则之一这里的响应时间，是指从用户通过键盘提交一个请求开始，直至系统首次产生响应为止的时间。 从键盘输入的请求信息传送到处理机的时间。 处理机对请求信息进行处理的时间。 将所形成的响应回送到终端显示器的时间。 截止时间的保证:用来评价实时系统的性能、选择实时调度算法的重要准则之一截止时间，是指某任务必须开始执行的最迟时间，或必须完成的最迟时间。（也叫做时限，即 deadline） 开始截止时间。 终止/完成截止时间。 优先权准则:适合批处理、分时和实时系统 让某些紧急的作业能得到及时处理。 往往还需选择抢占式调度方式，才能保证紧急作业得到及时处理。 面向系统的准则 系统吞吐量高:评价批处理系统 吞吐量是指在单位时间内，系统所完成的作业数 与批处理作业的平均长度有关 处理机利用率高。主要对大、中型多用户系统，对单用户或实时系统不重要。$CPU利用率 = \\frac{CPU有效工作时间}{CPU有效工作时间+CPU空闲等待时间}$ 各类资源的平衡利用:如内存、外存、I/O 设备等;主要对大、中型系统，对微型机或实时系统不重要。 进程切换进程切换:当一个进程占用处理机执行完(或不能继续执行)，则切换另一个进程占用处理机执行，称为进程切换。进程调度:把处理机分配给不同的进程占用执行，称为进程调度。实现分配处理机的程序称为调度程序在进程切换时，要保护执行现场。执行现场称为进程的上下文 context 进程切换基本步骤 保存当前进程的上下文 更新当前运行进程的 PCB，将其状态改为就绪 Ready 或阻塞 Blocked 将 PCB 插入就绪队列或阻塞队列 改变需要投入运行的进程的 PCB，将其状态改为运行 Running 恢复新进程的上下文 调度算法 FCFS先到先服务调度算法(FCFS，First Come First Served) 按照作业/进程进入系统的先后次序进行调度，先进入系统者先调度；适合于作业调度和进程调度;用于批处理系统，不适于分时系统 优点： 有利于长作业（进程） 有利于 CPU 繁忙型作业（进程） 缺点： 不利用短作业（进程），特别是来的较晚的短作业（进程）。 不利于 I/O 繁忙型作业（进程） SJF短作业优先的调度算法(SJF，Shortest Job First) 以要求运行时间长短进行调度，即启动要求运行时间最短的作业;可以分别用于作业调度和进程调度 短作业优先(SJF)的调度算法，是从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行； 短进程优先(SPF)调度算法，则是从就绪队列中选出一个估计运行时间最短的进程，将处理机分配给它，使它立即执行并一直执行到完成，或发生某事件而被阻塞放弃处理机时，再重新调度。 优点 能有效降低作业/进程的平均等待时间 提高系统的吞吐量。 缺点 该算法对长作业不利，更严重的是可能将导致长作业(进程)长期不被调度 该算法完全未考虑作业的紧迫程度，因而不能保证紧迫性作业(进程)会被及时处理 由于作业(进程)的长短只是根据用户所提供的估计执行时间而定的，而用户又可能会有意或无意地缩短其作业的估计运行时间，致使该算法不一定能真正做到短作业优先调度 无法实现人机交互 SRT最短剩余时间优先调度算法(SRT,Shortest Remaining Time) 调度时选择预期剩余时间最短的进程。当一个新进程加入到就绪队列时，它可能比当前运行的进程具有更短的剩余时间。因此，只要新进程就绪，调度器可能抢占当前正在运行的进程。可能存在长进程被饿死的危险。 PSA优先权调度算法(PSA,Priority) 适合于作业调度和进程调度 优先权类型 静态优先权:静态优先权是在创建进程时确定的，且在进程的整个运行期间保持不变。优点是简单易行、系统开销小。缺点：不够精确，可能出现优先权低的作业或进程长期得不到调度的情况。 动态优先权:动态优先权随进程的推进或随其等待时间的增加而改变，以获得更好的调度性能 确定进程优先权的依据有 进程类型: 系统进程高，一般用户进程低。 进程对资源的需求:进程的估计执行时间、内存需求量等。要求少的进程赋予较高的优先权。 用户要求:紧迫程度、所付费用。 非抢占式优先权算法（用于批处理、要求不严的实时 OS）系统一旦把处理机分配给就绪队列中优先权最高的进程后，该进程便一直执行下去，直至完成；或因发生某事件使该进程放弃处理机时，系统方可再将处理机重新分配给另一优先权最高的进程。 抢占式优先权调度算法（用于要求严格的实时、性能要求较高的批处理和分时 OS）系统把处理机分配给优先权最高的进程，使之执行。但在其执行期间，只要又出现了另一个优先权更高的进程，进程调度程序就立即停止当前进程(原优先权最高的进程)的执行，重新将处理机分配给新到的优先权最高的进程。这种抢占式的优先权调度算法，能更好地满足紧迫作业的要求Note: 只要新的进程到达并加入到就绪队列中，就进行优先权比较 高响应比优先调度算法(HRRN,High Response Ratio Next),优先权的变化规律可描述为：$优先权 = \\frac{等待时间+预计运行时间}{预计运行时间}$ 由于等待时间与预计运行时间之和，就是系统对该作业的响应时间，故该优先权又相当于响应比 RP。据此，又可表示为$R_p = \\frac{等待时间+预计运行时间}{预计运行时间} = \\frac{响应时间}{预计运行时间}$ HRRN 是介于 FCFS 和 SJ(P)F 之间的一种折中算法,HRRN 调度算法的优点是能够较好地平衡服务时间短和等待时间长的进程，避免了“饥饿”现象。由于长作业也有机会投入运行，在同一时间内处理的作业数显然要少于 SJ(P)F 算法，从而采用 HRRN 方式时其吞吐量将小于采用 SJF 算法时的吞吐量。另外，由于每次调度前要计算响应比，系统开销也要相应增加。 Round-Robin时间片轮转调度算法(RR，Round-Robin):时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法,适合于进程调度。 基本原理系统将所有就绪进程按 FCFS 原则，排成一个队列，每次调度时，把 CPU 分配给队首进程，并令其执行一个时间片(Time Slice)。当时间片用完时，由一个计时器发出时钟中断请求，调度程序便根据此信号来停止该进程的执行，并将它送往就绪队列的末尾；然后，再把处理机分配给就绪队列中新的队首进程，同时也让它执行一个时间片。 Time Slice 大小确定需考虑系统对响应时间的要求,就绪队列中进程的数量,系统的处理能力(保证用户键入的命令能在一个时间片内处理完毕) 时间片太短，会增加进程切换的开销，降低系统吞吐量 时间片太长，退化成 FCFS 优缺点时间片的大小对计算机性能的影响。存在的问题：未有效利用系统资源。对于短的、计算密集型任务(CPU-bound)比较有利，因为该进程充分利用时间片，而 I/O 密集型(I/O-bound)任务却不利(虽然进程大部分时间都在等待 I/O，它仍然会被分配到 CPU 时间片。这可能导致 CPU 资源的浪费)常用于分时系统及事务处理系统。 MQ多级队列调度算法 (MQ,Multilevel Queue):就绪队列被分解为多个独立的队列，每个队列具有自己的调度算法。前台的就绪队列是交互性作业(Interactive Job)的进程，采用时间片轮转。后台的就绪队列是批处理作业(Batch Job)的进程，采用优先权或短作业优先算法。调度方式有两种：① 优先调度前台，若前台无可运行进程，才调度后台 ② 分配占用 CPU 的时间比例，如：前台 80%，后台 20% 什么是交互性作业(Interactive Job)和批处理作业(Batch Job)？Interact Job: 与用户交互的作业,在执行这类作业时，用户可以输入命令，系统立即响应并返回结果;例如 UNIX shell 的lsBatch Job:批处理作业是在没有用户交互的情况下自动执行的一组命令或程序;些作业通常被组织成批次，一次性提交给系统，然后按照预定的顺序或优先级执行 MFQ多级反馈队列调度算法(MFQ，Multilevel Feedback Queue):最通用的调度算法，多数 OS 都使用该方法或其变形，如 UNIX、Windows 等。它可以看作是更成熟的多级队列调度,其任务可以在队列之间移动,从而更细致的区分任务 Note:MFQ 均为为抢占式;高优先级队列中有进程进入时，会抢占低优先级队列中进程的 CPU。被抢占的进程不降级，回到原级队列中，下次仍然执行该级队列的时间片。 MFQ 调度算法 设置多个就绪队列,记作 RQ0，RQ1 … RQn，并为各个队列赋予不同的优先级队列。 第一个队列的优先级最高，第二个次之，其余各队列的优先级逐个降低。规定高优先级队列时间片小 一个新进程进入内存后，首先将它放入第一队列的末尾，按 FCFS 原则排队等待调度。当轮到该进程执行时，如它能在该时间片内完成，便可撤离系统；进程一次时间片没执行完，就降至下一级队列，以此类推，降至最低优先级队列后，一直在此队列中不再下降。 系统优先调度高优先级队列中的进程，仅当 RQ0 空闲时才调度 RQ1 队列进程，以此类推 MFQ 性能 对于终端型作业用户，其所提交的作业大都属于较小的交互型作业，系统只要使这些作业在箫 1 队列规定的时间片内完成，终端型作业用户就会感到满足。 对于短批处理作业用户，如果其作业在第 1 队列中执行一个时间片即可完成，便可获得与终端作业一样的响应时间。对于稍长批处理作业用户，其作业通常只须在第 2 队列和第 3 队列各执行 1 个时间片即可完成，周转时间仍然较短。 对于长批处理作业用户，其将依次在第 1,2…n 个队列中运行，然后再按轮转方式运行，用户不必担心其作业长期得不到处理。因此，多级反馈队列调度算法能满足多用户需求。 基于公平原则的调度算法 保证调度算法保证的是绝对运行时间，即启动后在某个时间段内必须获得多少运行时间。例如 N 个进程平均分配时间。 公平分享调度算法按照用户数量平均分配时间，而不是进程间平均分配。 例：公平分享调度算法用户 1 有 4 个进程 ABCD用户 2 有 1 个进程 E 时间片轮转法:ABCDEABCDEABCDEABCDE…… 所有用户获得相同的处理机时间:AEBECEDEAEBECEDEAEBECEDE…… 用户 1 获得的处理机时间是用户 2 的两倍:ABECDEABECDEABECDEABECDE…… 实时调度基础概念实时任务：任务的结束时间有严格约束(Deadline),即任务执行必须在 Deadline 之前完成;具有紧迫性。前述算法不能很好地满足实时系统对调度的特殊要求，所以引入实时调度。实时操作系统 RTOS Real-Time Operating System 对外部输入的信息，实时操作系统能够在规定的时间内处理完毕并做出反应正确性:不仅要求计算逻辑的正确，而且要求在规定的时间内得到该结果通常给定一个开始时间或者结束时间的最后期限;多用于工业、军事等控制领域或实时信息处理方面硬实时系统有一个刚性的、不可改变的时间限制，它不允许任何超出时限的错误。超时错误会带来损害甚至导致系统失败、或者导致系统不能实现它的预期目标软实时系统的时限是柔性灵活的，它可以容忍偶然的超时错误。失败后造成的后果并不严重，例如在网络中仅仅轻微地降低了系统的吞吐量硬实时 HRT 与软实时 SRT之间最关键的差别在于：软实时只能提供统计意义上的实时。例如，有的应用要求系统在 95%的情况下都会确保在规定的时间内完成某个动作，而不一定要求 100%优先级倒置: 即高优先级进程(或线程)被低优先级进程(或线程)延迟或阻塞。 实现实时调度的基本条件 提供必要的调度信息 任务的到达时间,开始截止时间,执行时间,完成截止时间 资源要求 优先级(若错过开始截止时间则赋予“绝对”优先级) 系统处理能力强若处理机的处理能力不够强，则有可能因处理机忙不过来而使某些实时任务不能得到及时处理，从而导致发生难以预料的后果。假定系统中有 m 个周期性的硬实时任务，它们的处理时间可表示为 Ci ，周期时间表示为 Pi，则在单处理机情况下，必须满足$\\sum_{i=1}^{m} \\frac{C_i}{P_i} \\leq 1$;若为多处理机系统,假设有 n 个处理机，则需满足$\\sum_{i=1}^{m} \\frac{C_i}{P_i} \\leq n$ 采用抢占式调度机制:调度程序先调度开始截止时间即将到达的任务。 具有快速切换机制 具有快速响应外部中断的能力:及时响应紧迫的外部事件的中断请求 快速的任务分派能力:使系统中的每个运行功能单位适当的小，以减少任务切换的时间开销。 实时调度算法分类 非抢占式调度算法 非抢占式轮转调度算法（如工业生产群控系统）调度程序每次选择队列中的第一个任务投入运行。该任务完成后，便把它挂在轮转队列的末尾，等待下次调度运行，而调度程序再选择下一个(队首)任务运行。常用于要求不太严格的实时控制系统。 非抢占优先权调度算法如果在实时系统中存在着要求较为严格(响应时间为数百毫秒)的任务，则可采用非抢占式优先调度算法为这些任务赋予较高的优先级。当这些实时任务到达时，把它们安排在就绪队列的队首，等待当前任务自我终止或运行完成后才能被调度执行。常用于有一定要求的实时控制系统。 抢占式调度算法 基于时钟中断的抢占式优先权调度算法 立即抢占(Immediate Preemption)的优先权调度算法 常见的实时调度算法最早截止时间优先即 EDF(Earliest Deadline First) 算法优先级确定：根据任务的开始截止时间来确定任务的优先级。截止时间愈早，其优先级愈高。实时任务就绪队列：按各任务截止时间的早晚排序；具有最早截止时间的任务排在队列的最前面。调度顺序：总是选择就绪队列中的第一个任务，为之分配处理机，使之投入运行。适用范围：既可用于抢占式调度，也可用于非抢占式调度方式中。 最低松弛度优先即 LLF(Least Laxity First)算法$Laxity = Deadline - RemainingServiceTime - CurrentTime$松弛度=完成截止时间–剩余运行时间–当前时间 (假设从现在执行任务, 完成的时间为 t1, 则松弛度为截止时间-t1) 该算法按松弛度排序实时任务的就绪队列，松弛度值最小的任务排在队列最前面，调度程序总是选择就绪队列中的队首任务执行。该算法主要用于可抢占调度方式中。 抢占方式和时机 当等待任务的松弛度值为 0 时才进行抢占 当有任务执行时，只有等待任务的松弛度值为 0 才会发生任务的调度，其他情况不发生调度。 任务执行结束后或无任务执行时，再比较等待任务的松弛度值，较小的先执行。","link":"/UESTC/OS/Ch3-1TheProcessorScheduling/"},{"title":"Storage Management PartⅡ","text":"基本分页存储管理方式 Paged Storage ManagementIntro前面介绍的分区存储管理，一般都要求把一个作业的地址空间装入到连续的存储区域内。因此，在动态分区的存储空间中，常常由于存在着一些不足以装入任何作业的小的分区而浪费掉部分存储资源，这就是所谓存储器的零头问题。尽管采用“紧凑”技术可以解决这个问题，但要为移动大量信息花去不少处理机时间，代价较高。如果我们能取消对其存储区域的连续性要求，必然会进一步提高主存空间的利用率，又无需为移动信息付出代价。 离散分配 即程序在内存中不一定连续存放根据离散时的基本单位不同，可分为三种： 分页存储管理 分段存储管理 段页式存储管理 离散的基础 分页(Pages)：将程序地址空间分页分块(Frames)：将内存空间分块 离散分配的体现内存一块可以装入程序一页连续的多个页不一定装入连续的多个块中注：系统中页块的大小是不变的。 离散分配的优点没有外零头。不受连续空间限制，每块都能分出去仅有小于一个页面的内零头。由于进程的最后一页经常装不满一块而形成了不可利用的碎片，称之为“页内碎片”或称为“内零头”。 定义 页面/页 Page: 作业的逻辑地址空间被分割成固定大小的片，称为页面 物理块/页框 Page Frame：内存空间也分成与页相同大小的若干存储块。在为进程分配存储空间时，总是以页框为单位。 Page 从 0 开始编号，页内地址是相对于 0 编址；在进程调度时，必须把它所有的 Page 一次装入到主存的 Page Frame 内；如果当时 Page Frame 不足，则该进程必须等待，系统再调度另外的进程。（纯分页方式） 分页存储管理的基本方法需解决的两个基本问题: 如何建立程序空间与主存空间的映射 如何进行地址变换(从程序逻辑地址到内存物理地址) 页面大小的选择页面大小由机器的地址结构决定。某一机器只能采用一种大小的页面。页面的大小通常在 1KB~8KB 之间。 小页面 大页面 实现分页存储管理的数据结构1）页表 Page Table：每个进程对应 1 个页表，由各个页表项(Page Table Entry，PTE)描述该进程的各页面在内存中对应的物理块号。页表项中包括页号、物理块号、存储控制字段状态位：这些位提供了关于页面的额外信息，例如该页面是否在内存中（有效位），是否可以写入（写保护位），是否被访问过（访问位），是否被修改过（脏位）等注意：全部页表集中存放在主存的系统专用区中，只有系统有权访问页表，保证安全。2）作业表 Job Table：整个系统 1 张，记录作业的页表情况，包含进程号、页表长度、页表始址等信息。3）空闲块表：整个系统 1 张，记录主存当前空闲块。 某一作业被分成若干个 Page，每个 Page 可以去进程对应的页表中查找对应的物理块号，然后再去主存中找到对应的物理块(Page Frame)。 分页存储管理的逻辑地址表示逻辑地址结构地址空间为程序限定的空间。物理空间为内存限定空间。在页式管理系统中将地址空间分成大小相同的页面 Page。将内存空间分成与页面相同大小的存储块 Page Frame。分页存储管理方式中，任何一个逻辑地址都可转变为：页号+页内位移量。页号、位移量的划分是由系统自动完成的，对用户是透明的。 设有一逻辑地址 A，页面大小为 L，则在分页存储管理方式中，它的地址被转换： $$ Page Number = INT(\\frac{A}{L}) \\\\ Offset In Page = A \\ mod \\ L $$ 0 ～ 11 位表示页内位移量，则每页的大小为 212 = 4KB。12 ～ 31 位表示页号，220=1M，即最多允许有 1M 个页面。 如有逻辑地址为：2170，页面大小为 1KB，则P=INT[2170/1024]=2；W=2170 MOD 1024=122这个地址的变换通常由系统中的某些硬件完成。 地址变换机构 Address Translation地址变换机构的功能是将用户的逻辑地址转变为内存中的物理地址。逻辑地址由页号和页内位移量组成。页(Page)的大小和内存物理块(Pageframe)的大小是相同的，所以页内位移量即为物理块内位移量。关键是页号到物理块号的转换，由页表完成。 基本的地址变换机构 使用寄存器存放页表速度快，成本高。特别对于大的系统，页表很长，不可能都用寄存器实现。 一般系统，将页表存储在内存中设置一个页表寄存器（PTR），记录当前运行的进程的页表在内存中的始址和页表长度。（平时存于 PCB 中，要运行时才装入 PTR 中） 分页系统中的地址变换过程：（1）根据逻辑地址,计算出页号和页内偏移量；（2）从 PTR 中得到页表首址，然后检索页表，查找指定页面对应的页框号；（3）用页框号乘以页面大小获得其对应的起始地址，并将其送入物理地址的高端。（4）将页内偏移量送入物理地址低端，形成完整的物理地址。 具有快表的地址变换机构 分页系统中处理机每次存取指令或数据至少需要访问两次物理内存： 第一次访问页表，以得到物理地址 第二次访问物理地址，以得到数据。存取速度几乎降低了一倍，代价太高。为了提高地址变换速度，为进程页表设置一个专用的高速缓冲存储器，称为快表 TLB(Translation Lookaside Buffer)或联想存储器（Associative Memory） 。 Lookaside buffer 是一种硬件缓存机制，用于加速对特定类型数据的访问。这种缓存机制通常在 CPU 或其他硬件组件中实现，例如网络接口卡或硬盘控制器。Lookaside buffer 的工作原理是将最近或最常访问的数据存储在一个快速访问的缓存中，以减少对慢速内存的访问。当 CPU 或其他硬件组件需要访问数据时，它们首先查看 lookaside buffer。如果所需的数据在缓存中，那么就可以快速地从缓存中获取，而无需访问慢速的内存。这被称为缓存命中。如果数据不在缓存中，那么就需要访问慢速的内存，并将数据放入缓存中以备后用。这被称为缓存未命中。 进程最近访问过的页面在不久的将来还可能被访问。快表的工作原理类似于系统中的数据高速缓存(cache)，其中专门保存当前进程最近访问过的一组页表项。 快表地址转换过程 根据逻辑地址中的页号，查找快表中是否存在对应的页表项。 若快表中存在该表项，称为命中（hit），取出其中的页框号，加上页内偏移量，计算出物理地址。 若快表中不存在该页表项，称为命中失败，则再查找页表，找到逻辑地址中指定页号对应的页框号。同时，更新快表，将该表项插入快表中。并计算物理地址. 访问内存有效时间 EAT**访问内存有效时间 EAT(Effective Access Time)**：从进程发出指定逻辑地址的访问请求，经过地址变换，再到内存中找到对应的物理单元并取出数据，所花费的总时间。 如检索快表时间为 20 ns，访问内存为 100 ns。若能在快表中检索到 CPU 给出的页号，则 CPU 存取一个数据共需 120 ns；否则，需要 220 ns 的时间。如果不设置快表，CPU 存取一个数据需要 200 ns。快表(TLB)命中时效率会很高，未命中效率会降低，但平均后仍表现良好 $$EAT_{average} = HitR \\times (TLB_{time} + Memory_{time}) + (1-HitR) \\times (TLB_{time} + 2 \\times Memory_{time})$$ $EAT_{average}$ 为平均有效访问时间$HitR$ 为命中率$TLB_{time}$ 为快表访问时间，$Memory_{time}$ 为内存访问时间 两级和多级页表问题引入32 位逻辑地址空间，假设页面大小为 4KB（212），则 4GB（232）的逻辑地址空间将被划分成 220 个页面。若采用一级页表，则该表将包含 1M（220）个页表项。若按字节寻址，一个页表项占 4B，则一级页表需要占用 4MB（222）内存空间。不可能将 4MB 的页表保存在一个连续区中。那么，如何处理大页表的存储与检索呢？ 可以采用这样两个方法来解决这一问题：① 采用离散分配方式来解决难以找到一块连续的大内存空间的问题，（即引入两级页表）；② 只将当前需要的部分页表项调入内存， 其余的页表项仍驻留在磁盘上，需要时再调入。 两级页表对于要求连续的内存空间来存放页表的问题： 可将页表进行分页，并离散地将各个页面分别存放在不同的物理块中， 同样也要为离散分配的页表再建立一张页表，称为外层页表(Outer Page Table)，在每个页表项中记录了页表分页的物理块号。 对于 4GB($2^{32} Byte$)的进程，页面大小为 4KB($2^12 Byte$) ,若采用二级页表，则对应的二级页表结构设计如下(假定每个页表项 4B)： 页面大小 4KB，故 32 位逻辑地址中要用 12 位表示页内偏移量。 4GB 的逻辑地址空间被分成$4GB \\div 4KB= 2^{20}$个页面，内层页表大小为$2^{20} \\times 4B = 4MB$。 外层页表的表项记录的是某页在内存中的物理块号。外层页表个数为$4MB \\div 4KB = 2^{10}$个，大小为$2^{10} \\times 4B = 4KB$。 前 10 位表示外层页表的页号，后 10 位表示内层页表的页号，最后 12 位表示页内偏移量。 变换机构：先在外层页表寄存器中找到外层页表的起始地址，根据逻辑地址中的外层页号找到对应的内层页表的起始地址，再根据逻辑地址中的内层页号找到对应的物理块号。 利用离散分配方法实现的两级页表只是解决了大页表无需大片连续存储空间问题，但并未解决用较少内存去存放大页表问题，有关此类问题的成功解决方案放在虚拟存储器管理中。 多级页表机构Intro对于 64 位的机器，采用两级页表结构是否合适? 使用 4KB 的页面，剩 52 位。若按 4KB 来划分页表，还剩 42 位用于外层页表，因而外层页表有 4KG 个页表项,占 16KGB 的空间使用 1MB 的页面(220)，剩 44 位。若按 1MB 来划分页表，还剩 26 位用于外层页表，外层页表有 64M 个页表项，占 256MB 空间显然这是不现实的，外层页表过大无法装入一个物理块中 64 位的机器，采用的是多级（4 级以上）页表结构。电脑的位数通常指的是其 CPU 的位数，这是指 CPU 一次能处理的数据的位数，也就是其寄存器的宽度。例如，32 位的 CPU 一次可以处理 32 位（4 字节）的数据，而 64 位的 CPU 一次可以处理 64 位（8 字节）的数据。这个位数也决定了 CPU 可以直接寻址的内存空间的大小。32 位的 CPU 可以直接寻址$2^{32}个位置，也就是4GB的内存空间。同样，64位的CPU可以直接寻址\\2^{64}$个位置，这是一个非常大的空间，远远超过了现在的计算机所装配的实际物理内存。然而，实际上，操作系统通常会使用虚拟内存系统，这允许每个进程都有自己的地址空间，并且这个地址空间的大小可以超过实际的物理内存。例如，每个进程在 64 位的 Linux 系统中都有一个$2^{48}$字节的虚拟地址空间，虽然实际的物理内存可能只有几 GB。所以，电脑的位数决定了 CPU 的寄存器宽度，一次可以处理的数据的位数，以及可以直接寻址的内存空间的大小。但是实际可用的地址空间可能会因为虚拟内存系统和操作系统的设计而变化。 多级页表实现通过间接引用将页号分成 k 级，建立页表“树”，减少每级页表的长度CPU 得到逻辑地址后，先从最高级的页表开始，逐级查找，直到找到最低级的页表，再根据页表项找到物理块号。 反置页表 IPT Inverted Page TableIntro 对于在 OS 中同时运行的多个进程，相当大的一部分内存仅被页表占用。若结合了多级分页方案，这会进一步增加存储页表所需的空间，页表占用的内存量可能会成为一个巨大的开销；此外，查找一个物理地址需要读取多个页表，导致查找时间增加。为了有效地利用存储器，引入了反置页表,一个系统中一般只存在一个反向页表，这张页表中的 entry 的数量和内存中 pageframe 的数量是一样的 IPT 思想：IPT 是为主存中的每一个物理块建立一个页表项并按照块号排序；该表每个表项 Entry 包含正在访问该物理块的进程标识 Pid、页面号 Page number 及特征位 Control bits,用来完成主存物理块到访问进程的页号的转换 IPT Entry Struct 页号 Page number: It specifies the page number range of the logical address. 进程标识 Process id: An inverted page table contains the address space information of all the processes in execution. Since two different processes can have a similar set of virtual addresses, it becomes necessary in the Inverted Page Table to store a process Id of each process to identify its address space uniquely. This is done by using the combination of PID and Page Number. So this Process Id acts as an address space identifier and ensures that a virtual page for a particular process is mapped correctly to the corresponding physical frame. 特征位 Control bits: These bits are used to store extra paging-related information. These include the valid bit, dirty bit, reference bits, protection, and locking information bits. 链接指针 Chained pointer: It may be possible sometimes that two or more processes share a part of the main memory. In this case, two or more logical pages map to the same Page Table Entry then a chaining pointer is used to map the details of these logical pages to the root page table.Note: Number of Entries in Inverted page table = Number of frames in Physical Address Space(PAS). IPT 地址转换过程 给出进程标识和页号,用它们去比较 IPT,若整个反置页表中未能找到匹配的页表项,说明该页不在主存,产生请求调页中断,请求操作系统调入;否则，该表项的序号便是物理块号,块号加上位移,便形成物理地址。 然而，反置页表也有其缺点，比如查找特定虚拟地址对应的物理地址可能会更复杂。为了解决这个问题，一些系统会使用额外的数据结构，如哈希表，基于 Hash 映射值查找对应页表项中的帧号 以下是倒排页表（IPT）在引入哈希表后如何转换逻辑地址的过程： 当需要访问内存时，操作系统或硬件会使用逻辑地址中的页号和进程 ID 作为哈希函数的输入，计算出哈希值。 这个哈希值用于在哈希表中查找相应的页表项。如果存在冲突（即多个 VPN 哈希到同一位置），则使用链接（链表）的方式解决冲突。 一旦找到了对应的页表项，就可以得到物理页框号（Physical Frame Number，PFN）。这个 PFN 就是物理地址的一部分。 最后，物理地址由 PFN 和原始的页内偏移组成。 通过这种方式，倒排页表结合哈希表可以有效地将逻辑地址转换为物理地址，同时保持查找时间的效率。 Pros Reduced Memory Overhead Simplified Page Swapping: When a process needs to be swapped out of memory, the IPT can be used to quickly identify all the physical pages that are associated with the process. This can simplify the process of swapping pages and reduce the overall overhead of memory management. Improved Cache Performance: Because the IPT is smaller than a Page Table, it can be more easily stored in the CPU cache, which can improve the performance of memory access operations. 基本分段存储管理方式 Segmented Storage Management分段式存储管理方式的引入 方便编程通常，用户把自己的作业按照逻辑关系划分为若干个段，每个段都是从 0 开始编址，并有自己的名字和长度。因此，希望要访问的逻辑地址是由段名（段号）和段内偏移量（段内地址）决定的常见段有：主程序段、子程序段、数据段、堆栈段 etc 分段共享。一般实现程序和数据共享时都是以信息的逻辑单位(过程、函数或文件)为基础的。在分页系统中的每一页都只是存放信息的物理单位，其本身并无完整意义，因而不便于实现信息共享。段是信息的逻辑单位，可以为共享过程建立一个独立的段，更便于实现程序和数据的共享。 分段保护。信息保护同样是对信息的逻辑单位进行保护，因此，分段管理方式能更有效和方便的实现信息保护功能。 动态链接。程序运行时，先将主程序所对应的目标程序装入内存并启动运行，当运行过程中又需要调用某段时，才将该段调入内存并进行链接,分段管理方式更适合实现动态链接。 动态增长。在实际使用中，往往有些段，特别是数据段会随着程序的运行不断增大，而这种增长事先并不知道会增长到多大，采用其它存储管理方式是难以应付的，而分段存储管理却能较好的解决这一问题。 分段式存储管理的基本原理分段 Segmentation 作业地址空间按逻辑信息的完整性被划分为若干个段； 每段有段名（或段号），每段从 0 开始编址； 段内的地址空间是连续的。 许多编译程序支持分段方式，自动根据源程序的情况产生若干个段。 分段的基本原理在分段管理系统中，对所有地址空间的访问均要求两个成分： (1)段的名字；(2)段内地址。例如，可按下述调用： 123CALL [X]|&lt;Y&gt; 转移到子程序X中的入口点YLOAD R1, [A]|&lt;D&gt; 将数组A的D单元的值读入寄存器1STORE R1,[B]|&lt;C&gt; 将寄存器1的内容存入分段B的C单元中 这些符号程序经汇编和装配后，指令和数据的单元地址均由两部分构成：一是表示段名的段号 S；一是位移量 W，即段内地址。 分段管理分段管理，就是管理由若干分段组成的作业，且按分段来进行存储分配。实现分段管理的关键在于，如何保证分段(二维)地址空间中的一个作业在线性(一维)的存储空间中正确运行。也就是说，如何把分段地址结构变换成线性的地址结构。和分页管理一样，可采用动态重定位技术，即通过地址变换机构来实现。 优点：没有内碎片，外碎片可以通过内存紧凑来消除。便于改变进程占用空间的大小。 段表 Segment Table为每个段分配一个连续的分区，而进程中的各个段可以离散地移入内存中不同的分区中段表：每个段在表中占有一个表项，其中记录了该段在内存中的起始地址(又称为“基址”,Base Address)和段长。通常将段表放在内存中，执行中的进程可通过查找段表找到每个段所对应的内存区。作用为实现从逻辑段到物理内存区的映射 地址变换机构 Address Translation段表寄存器（Segment Table Register，STR） 根据段表寄存器的内容找到该作业的段表地址； 检索段表，得到该段在主存的起始地址； 将段的主存起始地址和位移量 W 相加，即得访问主存的物理地址 若段表放在内存中，每访问一个数据需要访问内存 2 次，可设置联想存储器（快表），以提高访问速度。 段的共享和保护信息共享分页系统实现程序段的共享较为困难。分段易于实现段的共享和段的保护。可重入代码（Reentrant Code, 纯代码）是一种允许多个进程同时访问的代码（可共享），且是一种不允许任何进程对其进行修改的代码。 例如一个多用户系统可接纳 40 个用户，它们都执行一个文本编辑程序(ED)，ED 代码共 160K（ED 可共享），每个用户还有 40K 的数据区(DA)。 不采用信息共享时需占用的内存空间 $(160K + 40K ) \\times 40 = 8000K$ 采用信息共享后占用的内存空间 $160K + 40K \\times 40 = 1760K$ 分页共享在分页存储管理中，进程被划分为固定大小的页。当两个或更多的进程需要访问相同的信息时，可以使用分页共享。例如，当多个进程运行相同的程序或访问相同的只读文件时，它们可以共享相同的代码页或数据页。这种方式的优点是可以节省内存空间，因为相同的信息只需要在内存中存储一次。此外，分页共享也可以用于实现进程间的通信。 对于数据页面，实现起来比较简单。因为这个数据页面可以安排在诸作业地址空间中的任何一页面上。如果多个进程（或作业）要共享同一个代码页，那么这个代码页必须在所有共享它的进程的地址空间中处于相同的位置（即具有相同的页号）。这是因为代码页中的跳转或引用指令的目标地址通常在链接阶段就确定了。 分段共享在分段存储管理中，进程被划分为多个具有不同长度和功能的段。分段共享允许多个进程共享一个或多个段。这在一些情况下是非常有用的。例如，当多个进程需要执行相同的函数或访问相同的数据结构时，它们可以共享相同的代码段或数据段。分段共享的优点是它可以更灵活地管理内存，因为每个段的大小可以根据需要进行调整。此外，分段共享也可以用于实现进程间的通信。 段页式存储管理 Segment Paging段页式存储管理的引入分页管理内存管理效率高 没有外零头 内零头小分段管理符合模块化思想 每个分段都具备完整的功能 方便代码共享、保护 没有内零头，存在外零头 段式存储在内存保护方面有优势，页式存储在内存利用和优化转移到后备存储方面有优势。两者结合，形成段页式存储管理方式。 原理：分段和分页相结合。先将用户程序分段，每段内再划分成若干页，每段有段名（段号），每段内部的页有一连续的页号。 下图为段页式系统中一个作业的地址空间结构，页面尺寸为 4KB。由图可见，该作业有三个分段，第一段为 15KB，占 4 页，最后一页有 1KB 未用；第二段为 8KB，恰好占满 2 页；第三段为 10KB，占 3 页；而最后一页有 2KB 未用。和分页系统一样，这些未写满的页，在装入主存空间后，依然存在内零头问题。 内存划分：按页式存储管理方案。 内存分配：以页为单位进行离散分配。 逻辑地址结构：由于段页式系统给作业地址空间增加了另一级结构现在地址空间如下所示 段号 Segment numbers(S) 段内页号 Page number (P) 页内相对地址(位移量)The offset number (W) 综合了分段和分页技术的优点，既能有效地利用存储空间，又能方便用户进行程序设计。但是，实现段页式存储管理系统需要增加硬件成本，系统的复杂度和管理开销也大大增加。因此，段页式存储管理技术适合于大、中型计算机系统，不太适合小型、微型计算机系统。 地址变换机构 Address Translation 首先，从段表寄存器从获得进程段表的起始地址，根据该地址，查找进程的段表。 然后，根据逻辑地址指定的段号检索段表，找到对应段的页表起始地址。 再根据逻辑地址中指定的页号检索该页表，找到对应页所在的物理块号。 最后，用物理块号加上逻辑地址中指定的页内偏移量，形成物理地址。 段页式存储管理在段页式存储管理方式中，每访问一次数据，需访问 次内存。 第一次访问内存中的段表 第二次访问内存中的页表 第三次访问相应数据。可以设置快表，表项应包括段号、页号、物理块号 SwapIntro对换指把内存中暂不能运行的进程或暂时不用和程序和数据，换到外存上，以腾出足够的内存空间，把已具备运行条件的进程，或进程所需要的程序和数据，换入内存。对换是系统行为，是提高内存的利用率的有效措施。常用于多道程序系统或小型分时系统中，与分区存储管理配合使用。实现：可在系统中设一对换进程，以执行换进内存、换出至外存操作。 对换技术，最早用在分时系统 UNIX 中。在任何时刻，在该系统的主存中只保存一个完整的用户作业，当其运行一段时间后，或由于分配给它的时间片已用完，或由于需要其它资源而等待，系统就把它交换到辅存，同时把另一个作业调入主存让其运行。这样，可以在存储容量不大的小型机上实现分时系统。 原理分类 整体对换（进程对换）对换以整个进程为单位，用于分时系统，以解决内存紧张的问题； 页面对换/分段对换对换以“页”或“段”为单位进行“部分对换”，该方法是实现请求分页及请求分段存储器的基础，支持虚存系统。 功能 为实现对换，系统需要三方面的功能： 对换空间的管理 进程的换入 进程的换出 对换空间的管理外存被分为两部分，文件区和对换区文件区用于存放文件，对它的管理应重在如何提高存储空间的利用率。所以对它采取离散分配方式。即一个文件可根据当前外存的使用情况，被分成多块，分别存储到不邻接的多个存储区域中，用指针相连。对换区存放从内存换出的进程，它们在外存的存放时间较短，换入、换出频繁。对对换区的管理应重在提高进程的换入换出速度。因此采用连续分配方式。即把一个换出的进程存放到一个连续的存储空间中。 为了能对对换区中的空闲盘块进行管理，在系统中应配置相应的数据结构，以记录外存的使用情况。空闲分区表或空闲分区链。在空闲分区表中的每个表目应包含两项，即对换分区首址和对换区长度，它们的基本单位都是盘块。对换区的分配，是采用连续分配方式。因而对对换区空间的分配与回收，与动态分区方式时内存的分配与回收方法雷同。分配算法可以是首次适应算法、循环首次适应算法和最佳适应算法。回收操作也可分为四种情况 为了能对交换区中的空闲盘块进行管理，在系统中应配置相应的数据结构,盘块的大小和操作系统的具体文件系统有关系;比如fat32的盘块大小为4KB,内存分配的单位是字节，外存（硬盘）分配的单位是盘块 进程的换进与换出换出（swap out）首先选择阻塞或睡眠状态的进程，若有多个，按优先级由低到高进行选择。若没有此状态进程，则选择就绪状态的，仍然按优先级由低到高进行选择。为避免某进程被频繁的换入换出，还应考虑进程在内存中的驻留时间，优先选择驻留时间长的进程。换入（swap in）①从 PCB集合中查找“就绪且换出”的进程，有多个，则选择换出时间最长的。②根据进程大小申请内存，成功则读入，否则要先执行换出，再换入。③若还有可换入进程，则转向①。直至无“就绪且换出”进程或无法获得足够内存空间为止。 Comparison S.NO Paging Segmentation 1 In paging, the program is divided into fixed or mounted size pages. In segmentation, the program is divided into variable size sections. 2 For the paging operating system is accountable. For segmentation compiler is accountable. 3 Page size is determined by hardware. Here, the section size is given by the user. 4 It is faster in comparison to segmentation. Segmentation is slow. 5 Paging could result in internal fragmentation. Segmentation could result in external fragmentation. 6 In paging, the logical address is split into a page number and page offset. Here, the logical address is split into section number and section offset. 7 Paging comprises a page table that encloses the base address of every page. While segmentation also comprises the segment table which encloses segment number and segment offset. 8 The page table is employed to keep up the page data. Section Table maintains the section data. 9 In paging, the operating system must maintain a free frame list. In segmentation, the operating system maintains a list of holes in the main memory. 10 Paging is invisible to the user. Segmentation is visible to the user. 11 In paging, the processor needs the page number, and offset to calculate the absolute address. In segmentation, the processor uses segment number, and offset to calculate the full address. 12 It is hard to allow sharing of procedures between processes. Facilitates sharing of procedures between the processes. 13 In paging, a programmer cannot efficiently handle data structure. It can efficiently handle data structures. 14 This protection is hard to apply. Easy to apply for protection in segmentation. 15 The size of the page needs always be equal to the size of frames. There is no constraint on the size of segments. 16 A page is referred to as a physical unit of information. A segment is referred to as a logical unit of information. 17 Paging results in a less efficient system. Segmentation results in a more efficient system. Refdata-flair memory-management-in-computerInverted page tablesInverted Page Table in Operating System操作系统基本分段存储管理方式","link":"/UESTC/OS/Ch4-2StorageManagement/"},{"title":"Storage Management PartⅢ","text":"虚拟存储器 Virtual Memory虚拟存储器的引入问题的提出一个程序要求的存储容量超过整个内存空间有大量的作业需要装入内存运行而内存空间不足 解决方案从物理上增加内存容量。但这会增加系统成本，并且增加是有限的从逻辑上增加内存容量。这正是虚拟存储技术所要解决的主要问题。 常规存储器管理方式的特征“一次性”: 要求将一个作业全部装入内存才能运行，1）大作业无法运行。2）限制作业并发执行的程度。“驻留性”: 作业装入后一直驻留内存直到作业完成。内存中存在一些已无用的、或暂时不用的程序或数据，浪费内存空间。一次性和驻留性严重降低内存利用率，减少系统吞吐量。内存的扩充方法 物理扩充：增加硬件投入，受机器自身和成本的限制。 逻辑扩充： 覆盖（overlay）应用程序手动把需要的指令和数据保存在内存中；解决了“一次性”问题。 对换（swapping）操作系统自动把暂时不能执行的程序保存到外存中;解决了“驻留性”问题。 虚拟存储 在有限容量的内存中，自动装入更多更大的程序 局部性原理 Principle of Locality程序执行的局部性原理：程序的执行总是呈现局部性。即在一个较短的时间段内，程序的执行仅限于某个部分；相应的，它所访问的存储空间也局限于某个区域。因此，只要保证进程执行所需的部分程序和数据驻留在内存，一段时间内进程都能顺利执行。 局限性又表现在下述两个方面： 时间局限性如果程序中的某条指令一旦执行，则不久以后该指令可能再次执行；如果某数据被访问过， 则不久以后该数据可能再次被访问。产生时间局限性的典型原因，是由于在程序中存在着大量的循环操作。 空间局限性一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问。程序在一段时间内所访问的地址，可能集中在一定的范围之内，其典型情况便是程序的顺序执行。 不同程序编写方法的局部性特征 页面大小为 4K，分配给每个进程的物理页框数为 1。在一个进程中，定义了如下的二维数组int A[1024][1024]，该数组按行存放在内存，每一行放在一个页面中。 12345678// 程序编写方法1：for (j = 0; j &lt; 1024; j++)for (i = 0; i &lt; 1024; i++) A[i][j] = 0;// 程序编写方法2：for (i=0; i&lt;1024; i++)for (j=0; j&lt;1024; j++) A[i][j] = 0; 123456页号 页内数据0000 a0,0 a0,1 a0,2 …………………… a0,10230001 a1,0 a1,1 a1,2 …………………… a1,1023 …………………………… ……………………………1023 a1023,0 a1023,1 ……………………....…......... a1023,1023 编写方式 1 发生了大量的缺页中断，因为程序按行存放，每次访问都会跨页，共计$1024 \\times 1024 = ^{24}$次缺页中断。编写方式 2 发生了较少的缺页中断，共计$2^{10}$次缺页中断。 缺页中断（Page Fault）是计算机操作系统中的一种中断或异常，当程序访问一个页面时，如果这个页面已经在物理内存中，那么就可以直接读取或者写入。但是，如果这个页面在虚拟内存中，而并没有加载到物理内存中，那么就会发生缺页中断。 虚拟存储器概述定义虚拟存储器（Virtual Memory）是指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统。其逻辑容量由内存容量和外存容量之和所决定其运行速度接近于内存速度，而成本却又接近于外存。虚拟存储技术是一种性能非常优越的存储器管理技术，故被广泛地应用于大、中、小型机器和微型机中。 当进程运行时，先将当前要运行的部分程序装入内存，其他部分暂留外存； 当要执行的指令不在内存时，处理器发生中断，通知操作系统将所缺部分从外存调入内存，保证程序继续执行； 当内存不足时，允许程序部分换入、换出。 虚拟存储器的基本工作情况 基于局部性原理。一个作业运行前，仅将那些当前要运行的页面（段）装入内存启动运行，其余暂在外存。 若运行所需页面（段）不在内存，则利用请求调页（段）功能将其调入内存。 若此时内存满，则利用置换功能，将内存中暂时不用的部分页面（段）调至外存，再将所需页面（段）调入。 这样，可实现大程序在小内存中运行，也可实现内存中同时装入更多的进程并发执行。 虚存容量虚拟存储器虽然给用户提供了特大地址空间，但其容量不是无限大，主要受两个方面的限制： 指令中表示地址的字长：这是由 CPU 的架构决定的。例如，如果 CPU 的有效地址长度为 32 位，那么它能够表示的地址空间最大为$2^{32}$，也就是 4GB。这意味着虚拟内存的最大容量为 4GB。这与物理内存的大小无关，即使物理内存小于 4GB，虚拟内存依然可以达到 4GB。但是，如果物理内存大于 4GB，那么超出 4GB 的部分将无法被 32 位的 CPU 编址。 外存的容量（对换区）：虚拟内存的另一个部分存储在硬盘的交换区中。如果硬盘的空间有限，那么虚拟内存的容量也会受到限制。即使 CPU 可以支持更大的虚拟内存，如果硬盘空间不足，那么虚拟内存的实际可用空间也会受到限制。 虚拟存储器的特征虚拟存储器具有以下主要特征： 多次性 多次性是指一个作业被分成多次调入内存运行。 对换性 对换性是指作业的运行过程中进行换进、换出。换进和换出能有效地提高内存利用率。 虚拟性 虚拟性是指能够从逻辑上扩充内存容量，使用户所看到的内存容量远大于实际内存容量。 虚拟性是以多次性和对换性为基础的；而多次性和对换性又必须建立在离散分配的基础上。 虚拟存储管理与对换技术的区别 技术 处理单位 主存容量大于系统空闲量时的处理方式 虚拟存储管理 页或段 进程仍能运行 对换技术（中级调度，挂起和激活） 进程 无法解除挂起 虚拟存储器的实现方法请求分页系统它是在纯分页系统的基础上增加了请求调页、页面置换两大功能所形成的页式虚拟存储系统。为了实现请求调页、页面置换两大功能，系统必须提供如下的硬件支持： 请求分页的页表机制。 缺页中断机构。 地址变换机构。 此外，实现请求调页、页面置换两大功能还需得到 OS 的支持。 请求分段系统它是在纯分段系统的基础上增加了请求调段、分段置换两大功能所形成的段式虚拟存储系统。为了实现请求调段、分段置换两大功能，系统必须提供如下的硬件支持： 请求分段的段表机制。 缺段中断机构。 地址变换机构。 此外，实现请求调段、分段置换两大功能还需得到 OS 的支持。 段页式虚拟系统目前，许多虚拟存储管理系统是建立在段页式系统的基础上的，通过增加了请求调页、页面置换两大功能所形成的段页式虚拟存储系统。如：Intel 80386 处理机便支持段页式虚拟存储系统。 抖动 Thrashing当进程要求装入新的页面或程序段时，如果当前没有足够的空闲空间，需要交换一些页面或段到外存。如果被交换出去的页面或段很快将被进程使用，则又需要将其换入内存。如果系统花费大量的时间把程序和数据频繁地换入和换出内存而不是执行用户指令，那么，称系统出现了抖动。出现抖动现象时，系统显得非常繁忙，但是吞吐量很低，甚至产出为零。根本原因：选择的页面或段不恰当。 请求分页存储管理方式 Demand Paging原理及实现工作原理作业运行时，只将当前的一部分装入内存其余的放在辅存，一旦发现访问的页不在主存中，则发出缺页中断，由 OS 将其从辅存调入主存，如果内存无空块，则根据某种算法选择一个页淘汰以便装入新的页面。利用这种方法，可使更多的作业处于就绪状态，且能支持比主存容量大的作业在系统中运行。从而提高存储空间利用率。为了实现请求调页、页面置换两大功能，系统必须提供如下的硬件支持： 请求分页的页表机制。 缺页中断机构。 地址变换机构。 页表机制 Page Table在虚拟存储系统中的所有的页表，其页描述子有了新的扩充，这是进行地址变换机构所必须的，增加四个信息标识位。 页号 页框号 Q 状态位 D 访问位 A 修改位 M 外存地址 状态位/存在位D：用于说明该页是否已调入内存，供程序访问时参考；D=0，该页不在内存;D=1，该页在内存 访问位A：用于记录本页在一段时间内被访问的次数，或最近已有多长时间未被访问，提供给置换算法选择换出页面时参考。A=0，该页未被访问;A=1，该页被访问 修改位M：用于表示该页在调入内存后是否被修改过，也是提供给置换算法在换出页面时是否将该页面写回外存作参考。M=0，该页在内存中未被修改;M=1，该页在内存中已经被修改 外存地址：用于指出该页在外存上的地址，供调入该页时使用。 缺页中断机构 Page Fault Interrupt由上述页表机制知道，状态位记录了访问页面是否在内存。在地址映射过程中，在页表中发现所要访问的页不在内存，则产生缺页中断，也称为缺页故障。OS 接到此中断信号后，就调出缺页中断处理程序，根据页表中给出的外存地址，将该页调入内存，使作业继续运行下去。缺页中断是一种特殊的中断，与一般中断相比，主要表现为： 在指令执行期间产生和处理中断信号。通常，CPU 只能在指令之间接受中断；然而，一个缺页中断要求在指令执行中间得到服务，即发现所要访问的指令或数据不在内存时产生缺页中断并处理。 再则，一条指令可能引起多次不同的页面故障。例如COPY A,B,指令本身跨了两个页面,数据 A 和 B 各自跨了两个页面,这条指令的执行需要访问六个不同的页面，对它们的访问都可能引起缺页中断,最多可能引起 6 次缺页中断(每个页面都不在内存中) 由于缺页中断的独特性，系统中需要提供硬件寄存器或其它机构，在出现页面故障时，保存部分完成的指令的状态。此外，还需要使用一条特殊的返回指令，确保在出现缺页中断处恢复该指令的处理。 缺页中断处理过程 操作系统接收到进程产生的缺页中断信号，启动中断处理例程，保留处理机现场； 操作系统通知处理机从外存读取指定的页面； 处理机激活 I/O 设备； 检查内存有无足够的空闲空间装入该页面？若有，转（6），否则，执行（5）； 利用页面置换算法，选择内存中的某个页面，换出内存； 将指定页面从外存装入内存； 更新该进程的页表； 更新快表； 计算物理地址。 地址变换机构 Address Translation 内存分配策略和分配算法在为进程分配物理块时，又将涉及到这样三个问题： 确定进程能正常运行所需的最少物理块数； 为每个进程分配的物理块，其数目是固定的还是可变的； 对各进程所分配的物理块数，是采取平均分配算法还是根据进程的大小按比例予以分配等。 最小物理块数的确定显然，给每个进程所分配物理块数目越少，则进程执行中的缺页率越高，进程的执行速度也减慢。为使进程能有效地工作，应为它分配一定数目的物理块。最小物理块数：是指能保证进程正常运行所需的最少物理块数。若系统为某进程所分配的物理块数少于此值时，进程将无法运行。进程应获得的最少物理块数与计算机的硬件结构有关，取决于指令的格式、功能和寻址方式。 例：对于某些简单的机器，若是单地址指令且采用直接寻址方式，则所需的最少物理块数为 2。如果该机器允许间接寻址时，则至少要求有物理块数为 3。对于前面所介绍的在缺页中断机构中要发生 6 次中断的情况，至少要为每个进程分配 6 个物理块，以装入 6 个页面。 物理块的分配策略 固定分配局部置换 Fixed Allocation，Local Replacement 可变分配全局置换 Variable Allocation，Global Replacement 可变分配局部置换 Variable Allocation， Local Replacement 固定分配局部置换为每个进程分配一定数目的物理块，在整个运行期间都不再改变。实现这种策略的困难在于：应为每个进程分配多少个物理块难以确定。若太少，会频繁地出现缺页中断，降低了系统的吞吐量；若太多，又必然使内存中驻留的进程数目减少，进而可能造成 CPU 空闲或其它资源空闲的情况，而且在实现进程对换时，会花费更多的时间。 可变分配全局置换 （常用方式）在采用这种策略时，先为系统中的每个进程分配一定数目的物理块，而 OS 自身也保持一个空闲物理块队列。当某进程发现缺页时，由系统从空闲物理块队列中，取出一个物理块分配给该进程，并将欲调入的（缺）页装入其中。这样，凡产生缺页（中断）的进程，都将获得新的物理块；仅当空闲物理块队列中的物理块用完时，OS 才能从内存中选择一页调出，该页可能是系统中任一进程的页，这样，自然又会使那个进程的物理块减少，进而使其缺页率增加。 可变分配局部置换为每个进程分配一定数目的物理块，但当某进程发现缺页时，只允许从该进程在内存的页面中选出一页换出，这样就不会影响其它进程的运行。在进程运行过程中统计进程的缺页率，如果缺页率高，则为其增加一定的内存页，否则适当减少其内存的页面数。当需要置换时只从本进程的内存页中选择，但此方式实现复杂，对进程的缺页情况的统计需要额外的开销。 物理块的分配算法 在采用固定分配策略时，如何将系统中可供分配的所有物理块分配给各个进程，可采取下述几种方法。 平均分配算法将系统中所有可供分配的物理块，平均分配给各个进程。例：当系统中有 100 个物理块，有 5 个进程在运行时，每个进程可分得 20 个物理块。如有一个进程其大小为 200 页，只分配给它 20 个块，这样，它必然会有很高的缺页率；而另一个进程只有 10 页，却有 10 个物理块闲置未用。这种方式貌似公平，但实际上是不公平的。因为，它并未考虑到各进程本身的大小。 按比例分配算法根据进程的大小按比例分配物理块的算法。例：系统中共有 n 个进程，每个进程的页面数为$S_i$，则系统中各进程页面数的总和为：$S = \\sum_{i=1}^{n} S_i$又假定系统中可用的物理块总数为 m，则每个进程所能分到的物理块数为$b_i$，将有：$b_i = \\frac{S_i}{S} \\times m$b 应该向上取整，它必须大于最小物理块数。 考虑优先权的分配算法通常采取的方法是把内存中可供分配的所有物理块分成两部分：一部分按比例地分配给各进程；另一部分则根据各进程的优先权，适当地增加其相应份额后，分配给各进程。在有的系统中，如重要的实时控制系统，则可能是完全按优先权来为各进程分配物理块。 调页策略解决的问题： 系统应当在何时把一个页面装入内存？ 从何处调入页面？ 页面调入过程？ 页面置换算法？ 装入时机系统应当在何时把一个页面装入内存？ 预调页 (Prepaging) 请求调页 (Demand Paging) 可采用一种以预测为基础的预调页策略，将那些预计在不久之后便会被访问的页面，预先调入内存。处理过程： 当进程创建时，预先为进程装入多个页面。 缺页中断时，系统为进程装入指定的页面以及与之相临的多个页面。 若局部性很差，预先装入的很多页面不会很快被引用，并会占用大量的内存空间，反而降低系统的效率。预调页的成功率仅约 50％。 请求调页：仅当进程执行过程中，通过检查页表发现相应页面不在内存时，才装入该页面。当进程刚开始执行时，由于预先未装入进程的页面，故需要频繁地申请装入页面。执行一段时间以后，进程的缺页率将下降。采用请求调页方式，磁盘 I/O 的启动频率较高，系统的开销较大。 从何处调入页面在请求分页系统中的外存分为两部分:用于存放文件的文件区和用于存放对换页面的对换区。通常，由于对换区是采用连续分配方式，而文件区是采用离散分配方式，故对换区的磁盘 I/O 速度比文件区的高。这样，每当发生缺页请求时，系统应从何处将缺页调入内存，可分成如下三种情况。 系统拥有足够的对换区空间，这时可以全部从对换区调入所需页面，以提高调页的速度。 系统缺少足够的对换区空间，这时凡是不会被修改的文件，都直接从文件区调入； 而当换出这些页面时，由于它们未被修改而不必再将它们换出到对换区，以后再调入时，仍从文件区直接调入。 但对于那些可能被修改的部分，在将它们换出时，便须调到对换区，以后需要时，再从对换区调入。 UNIX 方式。由于与进程有关的文件都放在文件区，应从文件区调入。故凡是未运行过的页面，都应从文件区调入。而对于曾经运行过但又被换出的页面，由于是被放在对换区，因此在下次调入时，应从对换区调入。 页面调入过程 每当程序所要访问的页面未在内存时，便向 CPU 发出一缺页中断。 中断处理程序首先保留 CPU 环境，分析中断原因后，转入缺页中断处理程序。 如果内存已满，则须先按照某种置换算法从内存中选出一页准备换出；如果此页已被修改，则必须将它写回磁盘。 然后再把所缺的页调入内存，并修改页表中的相应表项，置其存在位为“1”，并将此页表项写入快表中。 形成所要访问数据的物理地址，再去访问内存数据。 整个页面的调入过程对用户是透明的。 页面置换算法页面置换算法的选择，是虚拟存储器管理系统的核心问题。它的实质是，为系统提供一种方法，当从主存中需要换出页面时，应避免选择那些不久将再次要求访问的页面。置换算法的选择在一定程度上取决于可用的硬件设施。 最优置换算法 Optimal Replacement Algorithm最理想的页面置换策略是：从主存中移出永远不再需要的页面；如无这样的页面存在，则应选择最长时间不需要访问的页面。最佳置换策略首先是由 Belady 于 1966 年提出的。最佳置换策略本身不是一种实际的方法，因为页面访问的未来顺序是不知道的，但是，可将其它的实用方法与之比较来评价这些方法的优劣。所以，这种最佳策略具有理论上的意义。 例 设页面请求次序 7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1存储块为 3(驻留集为 3)，假定最初存储块为空，采用 OPT。第一行为要请求访问的页面，第二行为存储块(内存)中存储的页，第三行为被移出内存的页。从上面的演示知，利用 OPT，发生了 6 次页面置换,发生了 9 次缺页中断(前 3 次没有置换,但内存中未装入页面,发生中断)缺页率=缺页次数/访问次数=9/20=0.45 先进先出页面置换算法 FIFO该算法的实质是：总是选择作业中驻留时间最长的一页淘汰。即先进入主存的页面先退出主存。算法实现比较容易，如分配给一个作业的存储块数为 m，只需建立一个 m 个元素的队列表 Q(0)、Q(1)、…、Q(m-1)和一个替换指针。该队列是按页面调入主存的先后顺序排列的，而指针始终指向最早调入主存的一页。 发生了12次页面置换,发生了15次缺页中断，缺页率=缺页次数/访问次数=15/20=0.75 二次机会页面置换算法 SCR，Second Chance Replacement Policy二次机会算法是 FIFO 算法的升级版，而 clock 算法可以认为是二次机会算法的升级版本该算法仍然使用标准的 FIFO 队列。 每个帧(frame)有一个 second chance 位，也叫做引用位。当一个 frame 被引用到，它的 second chance 位设置为 1。这表示该 frame 后面还有可能会被引用到，所以下次置换先跳过这个 frame，也就是再给它一次机会留在内存中。这样可以减少 frame 置换，提高页面操作效率。当一个新的页面被读到内存中时，它的 second chance 被设置为 0。当你需要替换内存中的一个页面时，使用轮询的方式来查找可以被替换的页面： 如果页面的 second chance 是 1，那么置为 0，继续查找； 如果页面的 second chance 是 0，那么将这个页面置换出去。 最近最久未使用置换算法 LRULRU(least Recently Used)算法的基本思想是，利用局部性原理，根据一个作业在执行过程中过去的页面访问踪迹来推测未来的行为。它认为过去一段时间里不曾被访问过的页面，在最近的将来可能也不会再被访问。算法的实质是：当需要置换一页面时，选择在最近一段时间内最久未使用的页面予以淘汰。实现这种技术，是通过周期性地对“页面访问”位进行检查，并利用它来记录一个页面自上次访问以来所经历的时间 t，并选择 t 为最大的页予以淘汰。 发生了9次页面置换,发生了12次缺页中断，缺页率=缺页次数/访问次数=12/20=0.60 LRU 算法的硬件支持LRU 算法作为页面置换算法是比较好的，因为它适用于各种类型的程序。但是，实现起来比较困难，因为要对先前的访问历史时时加以记录和更新。如果这种连续的修改完全由软件来做，系统开销太大；如由硬件执行，则需要解决： 一个进程在内存中的各个页面各有多久未被进程访问？ 如何快速地知道哪一页是最近最久未使用的页面？ 为此，需要以下两类硬件的支持： 寄存器。用于记录某进程在内存中各页使用情况。 栈。用于保存当前进程使用的各个页面的页面号。 移位寄存器：为了记录某进程在内存中各页的使用情况，须为每个在内存中的页面配置一个移位寄存器可表示为：$R = R_{n-1}R_{n-2}R_{n-3}…R_2R_1R_0$ 当进程访问某物理块时，要将相应寄存器的最高位$R_{n-1}$位置成 1。表示这个页面最近被访问过。系统每隔一定时间（例如 100 ms）将寄存器右移一位，这意味着如果一个页面在一段时间内没有被访问，它的寄存器值将逐渐变小。如果我们把 n 位寄存器的数看作是一个整数，那么，具有最小数值的寄存器所对应的页面，就是最近最久未使用的页面。例如，假设我们有三个页面，其寄存器值分别为 100（4）、010（2）和 001（1）。在这种情况下，第三个页面的寄存器值最小，因此它是最近最久未使用的页面，应该被换出。栈操作系统维护一个栈，其中每个元素代表一个页面。栈顶的元素代表最近被访问的页面，而栈底的元素代表最近最久未使用的页面。 最少使用置换算法 LFU最少使用置换算法(Least Frequently Used)选择到当前时间为止被访问次数最少的页面被置换。1、基本方法：记录每个页面的访问次数，最少访问的页面首先考虑淘汰2、实际采取方法为页面设置移位寄存器。统计 1 的个数,1 的个数越少，表示访问次数越少，越容易被淘汰。与 LRU 的区别：R1=10000000R2=01110100LRU———-淘汰 R2LFU———-淘汰 R1 Clock 置换算法简单的 Clock 置换算法（NRU）当采用简单 clock 算法时，为每页设置一位访问位，再将内存中的所有页面都通过链接指针链接成一个循环队列。 某页被访问时，其访问位被置 1。 置换程序从上次停止位置开始检查页面的访问位。 如果是 0，就选择该页换出； 若为 1，则重新将它置 0，暂不换出，而给该页第二次驻留内存的机会。 由于该算法是循环地检查各页面的使用情况，故称为 clock 算法。置换时是将未使用过的页面换出去，故又把该算法称为最近未用算法 NRU。 改进型 Clock 置换算法系统把一个页面移出内存时，如果该页面驻留内存期间没有被修改过，那么不必把它写回辅存，否则系统必须把它写回辅存。这表明，换出未修改过的页面比换出被修改过的页面开销小。显然，我们可以依据上述结论改进 CLOCK 算法。改进后的 CLOCK 算法将在置换范围内首选符合下面条件的作为被置换页面 在最近没有被使用过； 在驻留内存期间没有被修改过的页面 由访问位 A(Access)和修改位 M(Modify)可以组合成下面四种类型的页面,淘汰优先级依次下降：1 类（A=0，M=0）：表示该页最近既未彼访问，又未被修改，是最佳淘汰页。2 类（A=0，M=1）：表示该页最近未被访问，但已被修改，并不是很好的淘汰页。3 类（A=1，M=0）：最近已被访问，但未被修改：该页有可能再被访问。4 类（A=1，M=1）：最近已被访问且被修改，该页可能再被访问。 执行过程可分成以下三步：（1）从指针所指示的当前位置开始，扫描循环队列，寻找 A=0 且 M=0 的第一类页面，将所遇到的第一个页面作为所选中的淘汰页。在第一次扫描期间不改变访问位 A。（2）如果第一步失败，即查找一周后未遇到第一类页面，则开始第二轮扫描，寻找 A=0 且 M ＝ 1 的第二类页面，将所遇到的第一个这类页面作为淘汰页。在第二轮扫描期间，将所有扫描过的页面的访问位 A 都置 0。（3）如果第二步也失败，亦即未找到第二类页面，则将指针返回到开始的位置，并将所有的访问位复 0。然后重复第一步，如果仍失败，必要时再重复第二步，此时就一定能找到被淘汰的页 . FAQQ：存储块越多，缺页中断率越小吗？A:一般来说，对于任何一个页的访问顺序(或序列)和任何一种换页算法，如果分给的物理块数增加，则缺页(所访问页不在主存)的频率应该减少。但这个结论并不普遍成立，对于某些页面访问序列，FIFO 有随着分给的页架数增加，缺页频率也增加的异常现象。例如某程序在内存中分配 m 页初始为空，页面走向为1，2，3，4，1，2，5，1，2，3，4，5当 m=3，m=4 时缺页中断分别为多少？用 FIFO 算法m=3 时，缺页中断 9 次m=4 时，缺页中断 10 次 抖动与工作集 Thrashing and Working Set缺页率对有效访问时间的影响有效访问时间是指访问存储器所需时间的平均值。假设使用了快表，则 CPU 访问内存时有以下三种情况(设内存读写周期为 t，查找快表时间为 λ，缺页中断处理时间为 ɛ)： 页面在内存且页表项在快表中：只需一次访问内存EAT= λ + t 页面在内存但页表项不在快表中：需两次访问内存，一次读取页表，一次读取数据，另外还需更新快表。EAT= λ + t + t + λ=2(λ + t) 页面不在内存：考虑查找快表时间、查找页表时间、缺页中断处理时间、更新快表时间、访问实际物理地址时间EAT= λ + t +ɛ + λ + t = 2(λ + t) + ɛ 引入快表命中率为 α，缺页中断率为 f，则有效访问内存时间为：EAT= α(λ + t) + (1-α)[2(λ + t) + f(2(λ + t) + ɛ)] 抖动系统内进程增多–&gt;每个进程的缺页率增大–&gt;缺页率增大到一定程度，进程总等待调页完成–&gt;CPU 利用率降低–&gt;进程进一步增多，缺页率更大 …此时: 进程调入一页，需将一页淘汰出去，刚淘汰出去的页马上要需要调入;称这一现象为抖动或颠簸(thrashing)显然，防止的根本手段给进程分配足够多的帧 抖动：如果运行进程的大部分时间都用于页面的换入/换出，而几乎不能完成任何有效的工作，则称此进程处于抖动状态。抖动又称为颠簸。 抖动分为： 局部抖动 全局抖动 抖动产生的原因有： 进程分配的物理块太少 置换算法选择不当 全局置换使抖动传播 工作集模型在工作集模型中，工作集的定义是在最近的一段连续执行时间（称为工作集窗口，通常用 T 表示）内，进程实际引用过的页面集合。换句话说，工作集是进程当前正在使用或可能马上就要使用的页面的集合。 只要分配的块空间能覆盖整个局部就不会出现太多的缺页;工作集模型就用来计算一个局部的宽度(块数) 抖动的预防 抖动发生前会出现一些征兆，可利用这些征兆发现抖动并加以防范。这些技术有： 采取局部置换策略 引入工作集的算法 L=S 准则 L 缺页之间的平均时间，S 平均缺页服务时间 选择暂停的进程 请求分段存储管理方式 Demand Segmentation工作原理：请求分段系统中，程序运行之前，只需先调入若干个分段（不必调入所有的分段），便可启动运行。当所访问的段不在内存中时，可请求 OS 将所缺的段调入内存。 为了实现请求调段、分段置换两大功能，系统必须提供如下的硬件支持： 请求分段的段表机制 缺段中断机构 地址变换机构 原理及实现请求分段的段表机制在虚拟存储系统中的所有段表，其段描述子增加五个信息标识位。 段名 段长 段的机制 存取方式 状态位 P 访问位 A 修改位 M 增补位外存地址 状态位(存在位)P：用于说明该段是否已调入内存，供程序访问时参考；P=0，该段不在内存;P=1，该段在内存 访问位 A：用于记录本段在一段时间内被访问的次数，提供给置换算法选择换出段时参考。A=0，该段未被访问;A=1，该段被访问 修改位 M：用于表示该段在调入内存后是否被修改过，也是提供给置换算法在换出段时是否将该段写回外存作参考。M=0，该段在内存中未被修改;M=1，该段在内存中已经被修改 外存地址：用于指出该段在外存上的地址，供调入该页时使用。 增补位：说明该分段是否允许扩展，此外如该段已被增补，则在写回辅存时，需另选择辅存空间； 缺段中断机构 Demand Segment Fault由上述段表机制知道，状态位记录了访问段是否在内存。在地址映射过程中，在段表中发现所要访问的段不在内存，则产生缺段中断。OS 接到此中断信号后，就调出缺段中断处理程序，根据段表中给出的外存地址，将该段调入内存，使作业继续运行下去。缺段中断与缺页中断类似，主要表现为：① 一个缺段中断要求在指令执行中间得到服务，即发现所要访问的指令或数据不在内存时产生缺段中断并处理。② 一条指令可能引起多次不同的缺段中断。 地址变换机构 Address Translation 分段的共享与保护共享段表为了实现分段共享，可在系统中配置一张共享段表，所有共享段都在共享段表中占有一个表项。 共享进程计数：记录有多少进程共享该段。 存取控制字段：对同一共享段，不同进程有不同的操作权限。 段号：共享段在不同进程中有不同的段号。 共享段的分配与回收共享段的分配 在为共享段分配内存时，对第一个请求使用该共享段的进程，由系统为该共享段分配一物理区，再把共享段调入该区，同时将该区的始址填入请求进程的段表的相应项中，还须在共享段表中增加一表项，填写有关数据，把 count 置为 1； 之后，当又有其它进程需要调用该共享段时，由于该共享段已被调入内存，故此时无须再为该段分配内存，而只需在调用进程的段表中，增加一表项，填写该共享段的物理地址；在共享段表中，填上调用进程的进程名、存取控制等，再执行count+=1操作，以表明有两个进程共享该段。 共享段的回收当共享此段的某进程不再需要该段时，应将该段释放， 包括撤消该进程段表中共享段所对应的表项，以及执行 count-=1 操作。若 count 结果为 0，则须由系统回收该共享段的物理内存，以及取消在共享段表中该段所对应的表项，表明此时已没有进程使用该段；否则，则只是取消调用者进程在共享段表中的有关记录。 分段的保护 越界检查 Bounds Check寄存器中放有段表长度信息，将逻辑地址空间的段号与段表长度进行比较 ，如果段号等于或大于段表长度，将发出地址越界中断信号。保证每个进程只能在自己的地址空间内运行。 存取控制检查 Access Control CheckRead-Only、Read-Write、Execute-Only、Execute-Read-Write etc 环保护机构 Ring Protection低编号的环具有高优先权。OS 核心处于 0 环内；某些重要的实用程序和操作系统服务，占居中间环；而一般的应用程序在外环上。 环保护的基本原则是：一个程序可以访问驻留在相同环或较低特权环中的数据；一个程序可以调用驻留在相同环或较高特权环中的服务。 环保护的基本思想是将操作系统内的操作和资源划分为不同的”环”，每个环都有其特定的权限。通常，环的编号越小，权限越高。例如，在一个典型的四环模型中： 环 0（Ring 0）：拥有全部权限，通常用于运行操作系统内核，可以访问所有硬件和内存资源。 环 1（Ring 1）和环 2（Ring 2）：通常用于运行操作系统服务，有一些特定的硬件和内存访问权限，但不如环 0 全面。 环 3（Ring 3）：权限最低，通常用于运行用户级的应用程序，只能访问有限的硬件和内存资源，对系统资源的访问需要通过系统调用。 RefClock置换算法","link":"/UESTC/OS/Ch4-3StorageManagement/"},{"title":"File System","text":"文件系统概述文件系统的功能 有效地管理文件的存储空间； 管理文件目录； 完成文件的读/写操作； 实现文件共享与保护； 为用户提供交互式命令接口和程序调用接口。 定义：操作系统中的各类文件、管理文件的软件，以及管理文件所涉及到的数据结构等信息的集合。有少数实时操作系统没有文件系统功能,绝大多数操作系统都包含文件管理系统部分。 文件、记录和数据项 file record data item文件文件是指由创建者所定义的、 具有文件名的一组相关元素的集合。 在有结构的文件中，文件由若干个相关记录组成； 而无结构文件则被看成是一个字符流。 文件在文件系统中是一个最大的数据单位，它描述了一个对象集。 文件的属性可以包括： 文件类型 文件长度 文件的物理位置 文件的建立时间 记录记录是一组相关数据项的集合，用于描述一个对象在某方面的属性。 数据项是最低级的数据组织形式，可把它分成以下两种类型：(1) 基本数据项这是用于描述一个对象的某种属性的字符集，是数据组织中可以命名的最小逻辑数据单位， 即原子数据，又称为数据元素或字段。(2) 组合数据项它是由若干个基本数据项组成的，简称组项。 文件类型 file type 按用途分类 系统文件 这是指由系统软件构成的文件。大多数的系统文件只允许用户调用，但不允许用户去读，更不允许修改；有的系统文件不直接对用户开放。 用户文件 由用户的源代码、目标文件、可执行文件或数据等所构成的文件。 库文件 这是由标准子例程及常用的例程等所构成的文件。这类文件允许用户调用，但不允许修改。 按文件中数据的形式分类 源文件:指由源程序和数据构成的文件.c .cpp .java .py etc 目标文件:指把源程序经过相应语言的编译程序编译过，但尚未经过链接程序链接的目标代码所构成的文件。它属于二进制文件.obj, .o 可执行文件:指把编译后所产生的目标代码再经过链接程序链接后所形成的文件.exe,.dll; linux 的可执行文件一般没有后缀,但文件权限通常设置为可执行 按存取控制属性分类根据系统管理员或用户所规定的存取控制属性 只执行文件 x:该类文件只允许被核准的用户调用执行，既不允许读，更不允许写 只读文件 r:该类文件只允许文件主及被核准的用户去读，但不允许写 读写文件 rw:这是指允许文件主和被核准的用户去读或写的文件 按组织形式和处理方式分类 普通文件：由 ASCII 码或二进制码组成的字符文件。一般用户建立的源程序文件、数据文件、目标代码文件及操作系统自身代码文件、库文件、实用程序文件等都是普通文件，它们通常存储在外存储设备上。 目录文件：由文件目录组成的，用来管理和实现文件系统功能的系统文件，通过目录文件可以对其它文件的信息进行检索。由于目录文件也是由字符序列构成，因此对其可进行与普通文件一样的种种文件操作。 特殊文件：特指系统中的各类 I/O 设备。为了便于统一管理，linux 系统将所有 IO 设备都视为文件，按文件方式提供给用户使用 文件系统模型 file system model模型的层次结构 对象及其属性文件管理系统管理的对象有： 文件。它作为文件管理的直接对象。 目录。为了方便用户对文件的存取和检索，在文件系统中必须配置目录。对目录的组织和管理是方便用户和提高对文件存取速度的关键。 磁盘(磁带)存储空间。 文件和目录必定占用存储空间，对这部分空间的有效管理，不仅能提高外存的利用率，而且能提高对文件的存取速度。 对对象操纵和管理的软件集合这是文件管理系统的核心部分。文件系统的功能大多是在这一层实现的，其中包括： 对文件存储空间的管理 对文件目录的管理 用于将文件的逻辑地址转换为物理地址的机制 对文件读和写的管理 对文件的共享与保护等功能 文件系统的接口为方便用户使用文件系统，文件系统通常向用户提供两种类型的接口： 命令接口。这是指作为用户与文件系统交互的接口。 用户可通过键盘终端键入命令，取得文件系统的服务。 程序接口。这是指作为用户程序与文件系统的接口。 用户程序可通过系统调用来取得文件系统的服务。 文件操作示例用户通过文件系统提供的系统调用实施对文件的操作。 最基本的文件操作有：创建文件、删除文件。读文件、写文件、截断文件和设置文件的读／写位置。 文件的“打开”和“关闭”操作：所谓“打开”，是指系统将指名文件的属性（包括该文件在外存上的物理位置）从外存拷贝到内存打开文件表的一个表目中，并将该表目的编号（或称为索引）返回给用户。 利用“关闭”（close）系统调用来关闭此文件，OS 将会把该文件从打开文件表中的表目上删除掉。 其它文件操作：对文件属性的操作，改变文件名、改变文件的拥有者，查询文件的状态等； open：打开一个文件，并指定访问该文件的方式，调用成功后返回一个文件描述符。 creat：打开一个文件，如果该文件不存在，则创建它，调用成功后返回一个文件描述符。 close：关闭文件，进程对文件所加的锁全都被释放。 read：从文件描述符对应的文件中读取数据，调用成功后返回读出的字节数。 write：向文件描述符对应的文件中写入数据，调用成功后返回写入的字节数。 文件的物理结构文件是由一系列的记录组成的。对于任何一个文件，都存在着以下两种形式的结构： 文件的逻辑结构:从用户观点出发所观察到的文件组织形式 文件的物理结构:指文件在外存上的存储组织形式 从逻辑组织的角度看，文件由若干记录构成；从物理组织的角度看，文件由若干数据块组成.操作系统或文件管理系统负责为文件分配和管理数据块。 如何划分磁盘空间？如何为一个新建文件分配空间？如何为一个已存在的文件增加存储空间？用什么数据结构记载文件已分配到的数据块和空闲数据块？ 文件的物理组织—存储空间的管理在为文件分配外存空间时所要考虑的主要问题是：怎样才能有效地利用外存空间和如何提高对文件的访问速度。目前，常用的外存分配方法有: 连续分配 链接分配 索引分配 连续分配 Continuous Allocation连续分配(Continuous Allocation)要求为每一个文件分配一组相邻接的盘块。一组盘块的地址定义了磁盘上的一段线性地址。把逻辑文件中的数据顺序地存储到物理上邻接的各个数据块中，这样形成的物理文件可以进行顺序存取。文件目录中为每个文件建立一个表项，其中记载文件的第一个数据块地址及文件长度。对于顺序文件，连续读/写多个数据块内容时，性能较好。 Pros 顺序访问容易。能很快检索文件中的一个数据块。例如，如果一个文件的第一个数据块的序号为 x，需要检索文件的第 y 块，则该数据块在外存中的位置为 x+y-1。 顺序访问在处理大量连续数据(如视频和音频流)时非常有效。磁头移动距离短，效率最高 Cons 要求有连续的存储空间。该分配方案可能会导致磁盘碎片，严重降低外存空间的利用率。解决方法之一，系统定期或不定期采用紧凑技术，将小分区合并为大的、连续分区，将文件占用空间合并在一起。 必须事先知道文件的长度。空间利用率不高；不利于文件尺寸的动态增长。 链接分配 Linked Allocation连续分配的文件分区太大，不利于存储空间的有效利用。如果在将一个逻辑文件存储到外存上时，可以考虑将文件装到多个离散的盘块中。链接文件：采用链接分配方式时，可通过在每个盘块上的链接指针，将同属于一个文件的多个离散的盘块链接成一个链表，把这样形成的物理文件称为链接文件。 隐式链接 Implicit Linking在采用隐式链接分配方式时，在文件目录的每个目录项中，都须含有指向链接文件第一个盘块和最后一个盘块的指针。每个盘块中都含有一个指向下一个盘块的指针。 Cons隐式链接分配方式的主要问题在于：它只适合于顺序访问，它对随机访问是极其低效的。如果要访问文件所在的第 i 个盘块，则必须先读出文件的第一个盘块，然后顺序地查找直至第 i 块。 为了提高检索速度和减小指针所占用的存储空间，可以将几个盘块组成一个簇(cluster)。比如，一个簇可包含 4 个盘块，在进行盘块分配时，是以簇为单位进行的。在链接文件中的每个元素也是以簇为单位的。这减少了查找时间和指针所占空间，但增大了内部碎片,同时这种改进也是非常有限的。 显式链接 Explicit Linking这是指把用于链接文件各物理块的指针，显式地存放在内存的一张链接表中。整个磁盘仅设置一张文件分配表 FAT(File Allocation Table) 在该表中，凡是属于某一文件的第一个盘块号，均作为文件地址被填入相应文件的 FCB (File Control Block)的“物理地址”字段中。查找记录的过程是在内存中进行的，因而不仅显著地提高了检索速度，而且大大减少了访问磁盘的次数。由于分配给文件的所有盘块号都放在该表中，故把该表称为文件分配表 FAT (File Allocation Table)。 链接分配方式虽然解决了连续分配方式所存在的问题， 但又出现了另外两个问题， 即：(1) 不能支持高效的直接存取。要对一个较大的文件进行直接存取，须首先在 FAT 中顺序地查找许多盘块号。(2) FAT 需占用较大的内存空间。由于一个文件所占用盘块的盘块号是随机地分布在 FAT 中的，因而只有将整个 FAT 调入内存，才能保证在 FAT 中找到一个文件的所有盘块号。 NTFS (New Technology File System)NTFS 是 Microsoft 在 Windows NT 3.1 中引入的文件系统，它提供了比 FAT 更高级的特性和性能。在 NTFS 中，文件的存储和链接方式与 FAT 有所不同。NTFS 使用了一种叫做 B+ 树的数据结构来存储文件和目录的信息。每个文件或目录在 NTFS 中都有一个叫做 MFT (Master File Table) 记录。MFT 记录包含了文件的所有信息，包括其属性、位置、大小等。对于较小的文件，其数据可能直接存储在 MFT 记录中。对于较大的文件，MFT 记录会包含一个指向文件数据块的指针列表。总的来说，FAT 和 NTFS 在链接文件数据方面使用了不同的数据结构和算法。FAT 使用了相对简单的链表结构，而 NTFS 使用了更复杂但也更高效的 B+ 树结构。 索引分配 Indexed Allocation单级索引分配 Single-level Indexing索引分配能解决连续分配和链接分配存在的诸多问题。原理：为每个文件分配一个索引块(表)，再把分配给该文件的所有盘块号都记录在该索引块中，因而该索引块就是一个含有许多盘块号的数组。在建立一个文件时，只需在为之建立的目录项中填上指向该索引块的指针。 Pros索引分配方式支持直接访问。当要读文件的第 i 个盘块时，可以方便地直接从索引块中找到第 i 个盘块的盘块号；基于数据块的分区能消除外部碎片Cons大文件索引项较多，可能使一个数据块容纳不了一个文件的所有分区的索引。索引块可能要花费较多的外存空间。每当建立一个文件时，便须为之分配一个专门的索引块，将分配给该文件的所有盘块号记录于其中。对于小文件如果采用这种方式，索引块的利用率将是极低的。 两级索引分配 Two-level Indexing当文件太大，其一级索引块太多时，应为这些索引块再建立一级索引，形成两级索引分配方式。即系统再分配一个索引块，作为第一级索引的索引块，将第一块、第二块……等索引块的盘块号填入到此索引表中 文件存储空间的管理文件管理要解决的重要问题之一是如何为新创建的文件分配存储空间。存储空间的基本分配单位是磁盘块。其分配方法与内存的分配有许多相似之处，即同样可采取连续分配方式或离散分配方式。系统应为分配存储空间而设置相应的数据结构；其次，系统应提供对存储空间进行分配和回收的手段。 文件存储空间的管理方法包括： 空闲分区表 空闲链表法 位示图 成组链接法 空闲表法 Free Space Table空闲表法属于连续分配方式，它为每个文件分配一块连续的存储空间，即系统也为外存上的所有空闲区建立一张空闲表，每个空闲区对应于一个空闲表项，其中包括表项序号、该空闲区的第一个盘块号、该区的空闲盘块数等信息。 表项序号 空闲区起始盘块号 空闲盘块数 1 2 4 2 9 3 3 15 5 4 … … Steps 为文件分配存储空间时，首先顺序查找空闲分区表中的各个表项，直至找到第一个大小适合的空闲分区。 可以采用首次适应分配算法、最佳适应分配算法等。 然后，将该分区分配给文件，同时修改空闲分区表，删除相应表项。 当删除文件释放出空间时，系统回收其存储空间，合并相邻空闲分区. 对交换分区一般都采用连续分配方式。对于文件系统，当文件较小(1 ～ 4 个盘块)时，仍采用连续分配方式，为文件分配相邻接的几个盘块；当文件较大时，便采用离散分配方式。 Pros实现简单。对于最佳适应分配算法，可以将各空闲分区按照（长度）从小到大的顺序进行排列，再利用有效的查找算法，能很快找到需要大小的空闲分区Cons当存储空间中的空闲分区分布较分散且数量较多时，空闲分区表将会很大。需要很大的内存空间，会降低空闲分区表的检索速度。 空闲链表法 Linked Free Space List用专门的空闲分区表登记空闲分区信息会浪费一定的存储空间，而且不适合登记分散且数目很多的空闲分区，不利于基于存储块的链接文件和索引文件的存储空间分配。空闲链表法是将所有空闲盘区拉成一条空闲链。根据构成链所用基本元素的不同，可把链表分成两种形式： 空闲盘块链 空闲盘区链 空闲盘区链 Free Space List将磁盘上的所有空闲空间，以盘块为单位拉成一条链。当用户因创建文件而请求分配存储空间时，系统从链首开始，依次摘下适当数目的空闲盘块分配给用户。当用户因删除文件而释放存储空间时，系统将回收的盘块依次插入空闲盘块链的末尾。 Pros用于分配和回收一个盘块的过程非常简单. 空闲盘块链 Free Block List将磁盘上的所有空闲盘区(每个盘区可包含若干个盘块)拉成一条链。在每个盘区上含有用于指示下一个空闲盘区的指针和能指明本盘区大小(盘块数)的信息。分配盘区的方法与内存的动态分区分配类似，通常采用首次适应算法。在回收盘区时，同样也要将回收区与相邻接的空闲盘区相合并。 为了提高对空闲盘区的检索速度，可以采用显式链接方法，亦即，在内存中为空闲盘区建立一张链表。每个分区结点内容：起始盘块号、盘块数、指向下一个空闲盘区的指针。 Cons一段时间以后，可能会使空闲分区链表中包含太多小分区，使文件分配到的存储空间过分离散。删除一个由许多离散小分区组成的文件时，将回收的小分区链接到空闲分区链表中需要很长时间。若一个文件申请连续存储空间，则需要花费较长的时间查找相邻的空闲分区。因此，这种空闲空间组织方法适合于非连续存储文件。 位示图 Bit Map利用二进制位 0、1 表示存储空间中存储块的使用状态。例如规定空闲分区为 0，已分配分区为 1磁盘上的所有盘块都有一个二进制位与之对应，这样，由所有盘块所对应的位构成一个集合，称为位示图。通常可用 m × n 个位数来构成位示图，并使 m × n 等于磁盘的总块数。位示图也可描述为一个二维数组map[m][n] 1 2 3 4 5 6 7 8 9 10 11 1 1 1 0 0 1 1 1 1 0 0 0 2 1 0 1 0 0 1 0 1 0 0 0 3 1 1 0 0 1 1 0 1 0 0 0 4 1 1 0 1 0 1 1 1 0 0 0 … … … … … … … … … … … … Steps申请盘块 (1) 顺序扫描位示图(m×n)，从中找出一个或一组其值为0的二进制位。(2) 将所找到的一个或一组二进制位转换成与之相应的盘块号。假 找到的其值为0的二进制位位于位示图的第 i 行、第 j 列，则其相应的盘块号应按下式计算：b = n(i- 1) + j(3) 修改位示图，令 map[i,j]=1 回收盘块(1) 将回收盘块的盘块号转换成位示图中的行号和列号。转换公式为： $$i = (b - 1) DIV n + 1j = (b - 1) MOD n + 1$$ (2) 修改位示图,令 map[i,j] =0 Pros可以容易地找到一个或一组连续的空闲分区。例如，需要找到 8 个相邻接的空闲盘块，只需在位示图中找出 8 个其值连续为“0”的位即可。BitMap 占据空间为 Disk Space(Byte) ÷ （Block Size × 8），对于容量较小的磁盘，位示图占用的空间会很小Cons对于一个 16GB 的磁盘，若数据块大小为 512 字节，则位示图大小为 4MB，大约需要占用 8000 个磁盘块的存储空间。 $$ Block_num = \\frac{16GB}{512B} = 2^{25}个\\\\ 即共有2^{25}个0或1,每个位占1bit\\\\ 所以位示图大小为\\frac{2^{25}Bit}{8Bit/Byte} = 4MB $$ 很难一次性将该位示图全部装入内存。即使内存足够大，可以存放全部或绝大部分位示图数据，搜索一个很大的位示图将会降低文件系统的性能。 尤其当磁盘空间快用完，剩下的空闲磁盘块很少时，文件系统的性能将严重降低 成组链接法 Grouping Linkage将磁盘所有空闲盘块分组；设置空闲盘块号栈，存放当前可用的一组空闲盘块的盘块号和栈中尚有的空闲盘块总数；后一组的所有盘块号以及盘块总数登记在前一组的第一个盘块中……依次类推，组与组之间形成链接关系；最后一组少登记一个盘块号，多登记一个空闲盘块链的结束标志。 空闲盘块的组织 空闲盘块号栈：用来存放当前可用的一组空闲盘块的盘块号(最多含 100 个号)，以及栈中尚有的空闲盘块号数 N。顺便指出，N 还兼作栈顶指针用。例如，当 N=100 时，它指向 S.free(99)。由于栈是临界资源，每次只允许一个进程去访问，故系统为栈设置了一把锁。（只有这个是放在内存中的，其它是在磁盘上。） 文件区中的所有空闲盘块被分成若干个组，比如，将每 100 个盘块作为一组。假定盘上共有 10 000 个盘块，每块大小为 1 KB，其中第 201 ～ 7999 号盘块用于存放文件，即作为文件区，这样，该区的最末一组盘块号应为 7901 ～ 7999；次末组为 7801 ～ 7900……；第二组的盘块号为 301 ～ 400；第一组为 201 ～ 300，如上图右部所示。 将每一组含有的盘块总数 N 和该组所有的盘块号记入其前一组的第一个盘块（从后往前分组）的 S.free(0)～ S.free(99)中。 将第一组的盘块总数和所有的盘块号记入空闲盘块号栈中，作为当前可供分配的空闲盘块号。 最末一组只有 99 个盘块，其盘块号分别记入其前一组的 S.free(1) ～ S.free(99)中，而在 S.free(0)中则存放“0”，作为空闲盘块链的结束标志。(注：最后一组的盘块数应为 99，不应是 100，因为这是指可供使用的空闲盘块，其编号应为(1 ～ 99)，0 号中放空闲盘块链的结尾标志。) 空闲盘块的分配与回收 当系统要为用户分配文件所需的盘块时，须调用盘块分配过程来完成。该过程首先检查空闲盘块号栈是否上锁，如未上锁，便从栈顶取出一空闲盘块号，将与之对应的盘块分配给用户，然后将栈顶指针下移一格。 若该盘块号已是栈底，即 S.free(0)，这是当前栈中最后一个可分配的盘块号。由于在该盘块号所对应的盘块中记有下一组可用的盘块号，因此，须调用磁盘读过程，将栈底盘块号所对应盘块的内容读入栈中，作为新的盘块号栈的内容，并把原栈底对应的盘块分配出去(其中的有用数据已读入栈中)。然后，再分配一相应的缓冲区(作为该盘块的缓冲区)。最后，把栈中的空闲盘块数减 1 并返回。 在系统回收空闲盘块时，须调用盘块回收过程进行回收。它是将回收盘块的盘块号记入空闲盘块号栈的顶部，并执行空闲盘块数加 1 操作。当栈中空闲盘块号数目已达 100 时，表示栈已满，便将现有栈中的 100 个盘块号记入新回收的盘块中，再将其盘块号作为新栈底。 文件目录 File Directory文件目录管理文件控制块（FCB）：用于描述和控制文件的数据结构。它包括： 基本信息：文件名、文件类型等； 地址信息：卷（存储文件的设备）、起始地址（起始物理地址）、文件长度（以字节、字或块为单位）等。 访问控制信息：文件所有者、访问信息（用户名和口令等）、合法操作等； 使用信息：创建时间、创建者身份、当前状态、最近修改时间、最近访问时间等。 … 文件目录：文件控制块的有序集合。 对目录管理的要求如下：(1)实现“按名存取”。(2) 提高对目录的检索速度。(3) 文件共享。(4) 允许文件重名。 目录项的两种组织方式： FCB 存储全部目录内容 存储部分目录信息，如文件名、索引节点指针等，其余部分保存在索引节点（i Node）。打开文件时将索引节点从磁盘读到内存中。 iNode（索引节点）是 Unix 和类 Unix 操作系统中的文件系统的一个重要概念。每个文件或目录在文件系统中都由一个 iNode 来表示。iNode 包含了关于文件系统对象（如普通文件、目录或者其他类型）的重要信息，包括： 文件大小 文件所有者和组 文件权限（读、写、执行） 文件创建、访问和修改的时间戳 文件的数据块的位置 iNode 并不包含文件名或文件的路径，这些信息是由目录文件维护的。目录文件包含了文件名到 iNode 的映射。这种设计允许在文件系统中实现一些复杂的功能，如硬链接和软链接。 需要注意的是，每个 iNode 都有一个唯一的 iNode 编号，这个编号在文件系统中用来唯一标识一个文件或目录。 目录文件及操作目录文件：一个文件目录也被看做是一个文件，即目录文件。是多个文件的目录项构成的一种特殊文件。目录的操作包括 搜索目录 创建目录 删除目录 显示目录 修改目录 目录结构单级目录结构所有用户的全部文件目录保存在一张目录表中，每个文件的目录项占用一个表项。Pros 简单，易于实现，能实现目录管理的基本功能——按名存取。Cons 查找速度慢，不允许重名，不便于实现文件共享 1234dir_entry_1-&gt;file1dir_entry_1-&gt;file2...dir_entry_n-&gt;filen 两级目录结构主文件目录 MFD(Master File Directory)、用户文件目录 UFD(User File Directory)Pros 一定程度解决了重名问题,提高了文件目录检索效率,能实现简单的文件共享Cons 不便用户文件的逻辑分类；进一步解决重名、共享、检索效率等问题 12345678910111213141516171819MainFolder│├── User1│ ││ ├── file1│ ││ └── file2│├── User2│ ││ ├── file1│ ││ └── file2│└── User3 │ ├── file1 │ └── file2 层次目录结构多级目录/树形目录结构 目录结构：多级目录结构又称为树型目录结构，主目录在这里被称为根目录，把数据文件称为树叶，其它的目录均作为树的结点。 路径名：从树的根（即主目录）开始，把全部目录文件名与数据文件名，依次地用“/”连接起来，即构成该数据文件的路径名（path name）。系统中的每一个文件都有惟一的路径名。 当前目录：为每个进程设置一个“当前目录”，又称为“工作目录”进程对各文件的访问都相对于“当前目录”而进行。 Pros 层次结构清晰，便于管理和保护 有利于文件分类 解决重名问题 提高文件检索速度 能进行存取权限的控制 Cons查找一个文件按路径名逐层检查，由于每个文件都放在外存，多次访盘影响速度 目录查询技术★ 对目录进行查询的方式有两种：线性检索法和 Hash 方法: 线性检索法线性检索法又称为顺序检索法。 在单级目录中，利用用户提供的文件名，用顺序查找法直接从文件目录中找到指名文件的目录项。 在树型目录中，用户提供的文件名是由多个文件分量名组成的路径名，此时须对多级目录进行查找。 Hash 方法 Hash 方法: 建立了一张 Hash 索引文件目录，系统利用用户提供的文件名并将它变换为文件目录的索引值，再利用该索引值到目录中去查找。 Hash 方法将显著地提高检索速度。 在文件名中使用了通配符“* ”、“？”等，系统便无法利用 Hash 法检索目录，因此，需要利用线性查找法查找目录。 在进行文件名的转换时，不同的文件名可能转换为相同的 Hash 值，即 Hash 冲突。 Steps - 在利用 Hash 值查找目录时，如果目录表中相应的目录项是空的，则表示系统中并无指定文件。 - 如果目录项中的文件名与指定文件名相匹配，则表示该目录项正是所要寻找的文件所对应的目录项，故而可从中找到该文件所在的物理地址。 - 如果在目录表的相应目录项中的文件名与指定文件名并不匹配，则表示发生了“Hash 冲突”。 - 解决 Hash 冲突的方法 ：将其 Hash 值再加上一个常数（该常数应与目录表的长度值互质），形成新的索引值，再返回到第一步重新开始查找。 使用一个和哈希表大小互质的步长，我们可以确保在经过足够多的步骤后，能够探测到哈希表中的每一个位置。这是因为两个互质的数的最小公倍数是它们的乘积，这意味着通过在原哈希值上加上步长，经过哈希表大小的步数后，我们可以覆盖到哈希表中的所有位置 文件共享和访问控制文件共享的有效控制涉及两个方面： 同时存取（Simultaneous Access） 存取权限（Access Rights） 控制同时存取 允许多个用户同时读文件内容，但不允许同时修改，或同时读且修改文件内容。 共享用户之一修改文件内容时，可以将整个文件作为临界资源，锁定整个文件，不允许其他共享用户同时读或写文件。 也可以仅仅锁定指定的一条记录，允许其他共享用户读/写该文件的其它记录。后者的并发性能更好。 控制对文件的同时存取涉及进程的同步与互斥问题。 控制存取权限控制授权用户以合法的方式访问文件，包括： 执行（Execution） — 用户可以装载并执行程序，但不允许拷贝程序内容。 读（Reading）— 允许用户读文件内容，包括拷贝和执行文件。某些系统严格地将浏览文件内容和拷贝权限分开，可以控制文件只能被浏览（显示），不能被拷贝。 追加（Appending）— 允许用户向文件添加数据，通常只能将数据添加到文件尾。但是，不能修改或删除文件内容。例如，超市收银员只能将新结帐的数据添加到文件中，不允许其修改或删除已有的数据。 更新（Updating）— 允许用户修改、删除、增加文件内容。包括创建文件、重写文件的全部或部分内容、移动文件的全部或部分数据等操作。 更改权限 (Changing protection) — 一般只有文件主才能更改共享该文件的其他用户对该文件的存取权限。有的系统允许文件主将更改文件存取权限赋予其他某个用户，但必须限制授权用户更改的权限范围。 删除 (Deletion) 允许用户删除文件 文件共享的实现在树型结构的目录中，当有两个(或多个)用户要共享一个子目录或文件时，必须将共享文件或子目录链接到两个(或多个)用户的目录中，才能方便地找到该文件。此时该文件系统的目录结构已不再是树型结构，而是个有向非循环图。 实现文件共享的实质就是可以从不同地方打开同一个文件打开文件的首要步骤就是找到文件的目录项，读取文件在外存的起始地址。实现文件共享的方式： 利用链接目录项实现法 利用索引节点实现法 利用符号链实现法等 链接目录项实现文件共享文件目录项中设置一个链接指针，用于指向共享文件的目录项。 访问文件时，根据链接指针内容找到共享文件的目录项，读取该目录项中文件起始位置等信息，操作该文件。 每当有用户（进程）共享文件时，共享文件目录项中的“共享计数”加 1；当用户不再共享该文件，撤消链接指针时，“共享计数”减 1。 只有当共享文件用户数为 1 时，才能删除共享文件。 12345678910111213/root│├── /dir1│ ││ ├── file1 (链接指针-&gt; /root/dirShared/file)│├── /dir2│ ││ ├── file2 (链接指针-&gt; /root/dirShared/file)│└── /dirShared │ └── file 索引节点实现文件共享 也称为【硬连接】Hard Link硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。 [[Ch7-1LinuxUnix#索引节点表——inode 结构]] 文件的物理地址及其它的文件属性等信息，不再是放在目录项中，而是放在索引结点中。在文件目录中只设置文件名及指向相应索引结点的指针。 由任何用户对文件进行 Append 操作或修改，所引起的相应结点内容的改变(例如，增加了新的盘块号和文件长度等)，都是其他用户可见的，从而也就能提供给其他用户来共享。 UNIX 操作系统的文件目录项中只包含文件名和指向索引节点的指针，文件的物理地址及其它说明信息保存在索引节点 iNode 中。 可以通过共享文件索引节点 iNode 来共享文件，即当用户需要共享文件时，在自己的文件目录中新建一个目录项，为共享文件命名(也可用原名)，并将索引节点指针指向共享文件的索引节点。 1234567891011121314151617181920212223/root│├── /dir1│ ││ ├── file1 (iNode指针-&gt; iNode#123)│ ││ └── file3 (iNode指针-&gt; iNode#124)│├── /dir2│ ││ ├── file2 (iNode指针-&gt; iNode#123)│ ││ └── file4 (iNode指针-&gt; iNode#125)│└── iNode Table │ ├── iNode#123 (物理地址, 文件属性, 共享计数: 2) │ ├── iNode#124 (物理地址, 文件属性, 共享计数: 1) │ ├── iNode#125 (物理地址, 文件属性, 共享计数: 1) │ └── ... 在索引结点中还应有一个链接计数 count，用于表示链接到本索引结点(亦即文件)上的用户目录项的数目 当用户 C 创建一个新文件时，他便是该文件的所有者，此时将 count 置 1。 当有用户 B 要共享此文件时，在用户 B 的目录中增加一目录项，并设置一指针指向该文件的索引结点，此时，文件主仍然是 C，count=2。 如果用户 C 不再需要此文件，是否能将此文件删除呢？只能删除硬链接，但是不能删除里面的实际内容，当所有硬链接都删除后，才可以删除其内容和索引节点。 符号链实现文件共享为使 B 能共享 C 的一个文件 F，可以由系统创建一个 LINK 类型的新文件，也取名为 F 并将 F 写入 B 的目录中，以实现 B 的目录与文件 F 的链接；在新文件中只包含被创文件 F 的路径名。这样的链接方法被称为符号链接.新文件中的路径名，则只被看作是符号链。当 B 要访问被链接的文件 F 且正要读 LINK 类新文件时，将被 OS 截获，OS 根据新文件中的路径名去读该文件，于是就实现了用户 B 对文件 F 的共享。 在利用符号链方式实现文件共享时，只有文件主才拥有指向其索引结点的指针,而共享该文件的其它用户，则只有该文件的路径名，并不拥有指向其索引结点的指针。 Pros 能连接任何机器上的文件。每增加一个连接，就增加一个文件名，各用户使用自己的名字去共享文件。Cons 备份可能会产生多个拷贝。 符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。 12345678910 touch file ln file hard_link_f1 # 硬连接 ln -s file sym_link_f1 # 软连接 ls -li# 输出如下，硬链接的inode相同，count=2；软连接的inode不同，count=1total 0122779 -rw-r--r-- 2 gjx gjx 0 May 22 15:03 file122779 -rw-r--r-- 2 gjx gjx 0 May 22 15:03 hard_link_f1122781 lrwxrwxrwx 1 gjx gjx 4 May 22 15:04 sym_link_f1 -&gt; file 删除符号连接 sym_linkf1,对 file,hard_link_f1 无影响； 删除硬连接 hard_link_f1，对 file,sym_link_f1 也无影响； 删除原文件 file，对硬连接 hard_link_f1 没有影响，导致符号连接 sym_link_f1 失效； 同时删除原文件 file,硬连接 hard_link_f1，整个文件会真正的被删除。 URL 实现文件共享统一资源定位器 URL (Uniform Resource Locator)是 Internet 上用来链接超文本文件的一种方法。它可以链接同一台计算机中的本地文件，也可链接 Internet 中任何主机上的远程文件。一个完整的 URL 包括访问文件的方法（协议）、文件所在的主机域名、目录路径名和文件名几部份。例如 12file:///C:/Users/YourName/Documents/file.txthttp://www.uestc.edu.cn/templates/index2k3/index.html 文件保护不同对象允许实施的操作各不相同。例如，文件可施加读、写、执行等操作，信号量只能施加 wait()和signal()操作。因此，系统为所有对象设置一个允许进程实施操作的操作集，任何对对象的操作必须符合操作集中的规定，防止未授权进程访问对象。 Ref【操作系统】成组链接法详解","link":"/UESTC/OS/Ch6-1FileSystem/"},{"title":"Unix&#x2F;Linux OS Introduction","text":"Linux 操作系统的简介什么是 Linux 操作系统Linux 是一套免费使用和自由传播的 Unix Like 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。 Linux 操作系统由 Linux 内核，LinuxShell，Linux 文件系统，Linux 应用程序四大主要部分组成。 内核是操作系统的核心，提供了操作系统最基本的功能 Shell 是系统的用户界面，提供了用户与内核进行交互操作的一种接口 文件系统是文件存放在磁盘等存储设备上的组织方法 标准的 Linux 系统一般都有一套称为应用程序的程序集，即 Linux 应用程序 Linux 操作系统的组成Kernel内核是操作系统的核心，提供了操作系统最基本的功能，如支持虚拟内存、多任务、共享库、需求加载、可执行程序和 TCP/IP 网络等 123uname –a 查看内核版本号Linux Efterklang 5.15.146.1-microsoft-standard-WSL2 #1 SMP Thu Jan 11 04:09:03 UTC 2024 x86_64 x86_64 x86_64 GNU/Linuxls –l /boot 查看内核文件 ShellShell 是系统的用户界面，提供了用户与内核进行交互操作的一种接口。它接收用户输入的命令并把它送入内核去执行。实际上 Shell 是一个命令解释器(command-language interpreter)，它解释由用户输入的命令并且把它们送到内核。Linux 系统的 Shell 是命令语言、命令解释程序及程序设计语言的统称。 Shell 是一个命令语言解释器它拥有自己内建的 Shell 命令集，Shell 也能被系统中其他应用程序所调用。用户在提示符下输入的命令都由 Shell 先解释然后传给 Linux 核心。使用户不必关心一个命令是建立在 Shell 内部还是一个单独的程序。 Shell 是一个解释型的程序设计语言。shell 程序设计语言支持绝大多数在高级语言中能见到的程序元素，如函数、变量、数组和程序控制结构。shell 编程语言简单易学，任何在提示符中能键入的命令都能放到一个可执行的 Shell 程序中。 执行过程shell 首先检查命令是否是内部命令，不是的话再检查是否是一个应用程序，这里的应用程序可以是 Linux 本身的实用程序，比如 ls rm，然后 shell 试着在搜索路径($PATH)里寻找这些应用程序。搜索路径是一个能找到可执行程序的目录列表。如果你键入的命令不是一个内部命令并且在路径里没有找到这个可执行文件，将会显示一条错误信息。而如果命令被成功的找到的话，shell 的内部命令或应用程序将被分解为系统调用并传给 Linux 内核。 File SystemLinux 文件系统中的文件是数据的集合，文件系统不仅包含着文件中的数据而且还有文件系统的结构，所有 Linux 用户和程序看到的文件、目录、软连接及文件保护信息等都存储在其中。每个实际文件系统都是从操作系统和系统服务中分离出来的，它们之间通过一个接口层——虚拟文件系统（VFS）通信。文件类型主要包括： 普通文件（regularfile） 目录文件（directory） 连接文件（link） 设备与设备文件（device） 套接字（sockets） 管道（FIFO,pipe） Linux 操作系统的功能特征Linux 操作系统功能强大，与其他操作系统相比，其具有下述主要的功能特征。 开放性：遵循开放系统互连(OSI)国际标准。 多用户：Linux 支持多用户，操作系统资源可以被不同用户使用，每个用户对自己的资源(例如：文件、设备)具有特定的权限，这样可以保证每个用户之间互不影响。 多任务：Linux 可以使多个程序同时并独立地运行。**计算机同时执行多个程序，而同时各个程序的运行互相独立。 良好的用户界面：Linux 向用户提供了两种界面：字符界面和图形界面。在字符界面用户可以通过键盘输入相应的指令来进行操作。Linux 还为用户提供了图形用户界面，它类似于 Windows 图形界面的 X-Window 系统。它利用鼠标、菜单、窗口、滚动条等设施，给用户呈现一个直观、易操作、交互性强的友好的图形化界面。在 X-Window 环境中就和在 Windows 中相似，可以说是一个 Linux 版的 Windows。 设备独立性：操作系统把所有外部设备统一当作文件来看待，只要安装驱动程序，任何用户都可以像使用文件一样，操纵和使用这些设备。Linux 是具有设备独立性的操作系统，内核具有高度适应能力。 提供了丰富的网络功能：完善的内置网络是 Linux 操作系统的一大特点。 可靠的安全系统：Linux 采取了许多安全技术措施，包括对读写控制，带保护的子系统，审计跟踪，核心授权等，这为网络多用户环境中的用户提供了必要的安全保障。 良好的可移植性：将 Linux 操作系统从一个平台转移到另一个平台使它仍然能够按照其自身的方式运行。Linux 是一种可移植的操作系统，能够在从微型计算机到大型计算机的任何环境中和任何平台上运行。Linux 可以运行在多种硬件平台上，如具有 x86、ARM、SPARC、Alpha 等处理器的平台。此外 Linux 还是一种嵌入式操作系统，可以运行在掌上电脑、机顶盒或游戏机上。2001 年 1 月份发布的 Linux 2.4 版内核已经能够完全支持 Intel 64 位芯片架构。同时 Linux 也支持多处理器技术。多个处理器同时工作，使系统性能大大提高 Linux 核心特征：多用户、多进程Linux 核心特征—多用户、多进程管理的实现方式如下：（1）账户管理系统依据账户 ID 来区分每个用户的文件、进程、任务，给每个用户提供特定的工作环境（如用户的工作目录、Shell 版本以及 XWindow 环境的配置等），使每个用户的工作都能独立不受干扰地进行。（2）权限管理在 Linux 中，将使用系统资源的人员分为 4 类三组：超级用户、文件或目录的属主；属主的同组人；其他人员。对每组用户分别分配对文件和目录的不同的访问权限。（3）进程管理进程控制是 Shell 的一个特性，使用户能在多个独立进程间进行切换。例如，用户可以挂起一个正在运行的进程，稍后再恢复其运行。bash 记录所有启动的进程并保持对所有已启动的进程的跟踪，在每一个正在运行的进程生命期内的任何时候，用户可以任意地挂起进程或重新启动进程恢复运行。 Linux 操作系统的主要版本Linux 操作系统主要分为内核版本以及发行版本，其具体内容如下。（1）Linux 的内核版本：Linux 内核使用主要分为两种不同的版本编号方式。第一种方式用于 1.0 版本之前（包括 1.0）。第二种方式用于 1.0 之后到 2.6，数字由三部分“A.B.C”，A 代表主版本号，B 代表次主版本号，C 代表较小的末版本号。 （2）Linux 的发行版本Linux 的发行版本实质在于 Linux 核心加上外围的实用程序组成的一个大软件包。把 SUSE、RedHat(现在通常称为 Red Hat Enterprise Linux，简称 RHEL)、Ubuntu、Slackware 等直接称呼为 Linux 是不确切的，它们是 Linux 的发行版本。更确切地说，应该称为以 Linux 为核心的操作系统软件包 发行版主要可分为 Debian 系和 RedHat 系。Debian 系主要分为 Ubuntu、Debian、Linux Mint、Linux Lite 等。RedHat 系主要分为 CentOS、Fedora、RedHat Enterprise Linux、Oracle Linux 等。Debian 是一个非商业化的项目，完全由社区驱动。Red Hat 提供了一个免费的社区版本（Fedora），同时通过其企业版（RHEL）提供商业支持和服务。 文件操作与权限管理Linux 文件系统架构遵循 Unix 的设计理念，其核心哲学之一就是“一切皆文件”（Everything is a file）。这意味着无论是普通的文本文件、目录、设备（如打印机、磁盘）、管道、套接字还是其他系统资源，都被抽象成文件的形式进行操作，从而提供了一致的接口和简单的编程模型。 层次树状结构：Linux 文件系统采用分层的树状目录结构，其中所有文件和目录都始于一个称为根目录（/）的单一节点。每个目录可以包含文件和子目录，形成一个层次化的组织结构。 UNIX/Linux 文件系统的基本结构虚拟文件系统（VFS）：虚拟文件系统是 Linux 内核中的一个软件层，允许不同的文件系统（如 ext4、XFS、Btrfs 等）以统一的方式被内核和用户空间应用程序访问。VFS 定义了所有文件系统都支持的基本、抽象接口和数据结构,实际文件系统实现 VFS 定义的抽象接口和数据结构（文件、目录等概念在形式上与 VFS 的定义保持一致），在统一的接口和数据结构下隐藏了具体的实现细节 ext2 (Second Extended Filesystem)ext2 是 Linux 内核最早支持的文件系统之一，设计用于替代较早的 ext 文件系统。它引入了许多改进，如更快的文件访问速度和更大的文件系统容量。ext2 支持大文件（理论上可达 2^32 个块，受限于文件系统大小）、长文件名等特性。然而，ext2 是一个非日志文件系统，这意味着在系统崩溃时可能需要较长的文件系统检查和修复过程来恢复一致性。ext3 (Third Extended Filesystem)ext3 是 ext2 的升级版，主要增加了日志功能（journaling），这极大地提高了文件系统的可靠性和恢复速度。在系统崩溃后，ext3 能够快速恢复文件系统的状态，因为它维护了一个事务日志，记录了文件系统更改的操作 ext4 (Fourth Extended Filesystem)ext4 是 ext3 的进一步发展，它不仅继承了 ext3 的稳定性，还引入了多项增强特性，如更大的文件系统和文件大小支持（理论上可达到 1 EB 减 1 字节）、更高效的空间分配策略（延迟分配和多块分配）、无限数量的子目录、更快的文件系统检查和更强大的日志功能。此外，ext4 还优化了 inode（索引节点）的使用，允许存储更多的扩展属性，并支持快速扩展和收缩文件系统大小。 XFS (eXtended File System)XFS 是一个高性能的 64 位日志文件系统，最初为 SGI 的 IRIX 操作系统设计，后来被移植到 Linux。XFS 特别适合处理大型文件和高并发的读写操作，广泛应用于企业级服务器和大数据存储场景。它提供了极快的文件系统增长速度、延迟分配策略以减少文件碎片、以及动态 inode 分配等功能。XFS 能够支持非常大的文件和文件系统（理论上可达 18 EB），并且其日志机制设计得更加健壮和高效，尤其在处理大量小文件和高 I/O 负载时表现优秀。 挂载点：Linux 允许将不同的物理或逻辑磁盘分区挂载到文件系统的特定目录下，这个目录称为挂载点。这样可以扩展文件系统的存储空间，并且不同的文件系统可以有各自的属性和功能。 索引节点的功能文件在磁盘中的表现形式 物理表现形式： 超级块：用于存储文件系统的控制信息的数据结构。描述文件系统的状态、文件系统类型、大小、区块数、索引节点数等，存放于磁盘的特定扇区中。 索引节点（i 节点）：用于存储文件的元数据（文件的基本信息）的一个数据结构，包含诸如文件的大小、拥有者、创建时间、数据块/目录块位置等信息。 目录块：存放目录文件的内容 数据块：存放非目录文件的内容 目录文件内容一系列目录项（dirent）的列表，每个目录项由两部分组成： 所包含文件的文件名 文件名对应的索引节点（inode）号 使用ls -i可查看文件对应的 inode 号 文件在内核中的表现形式内核使用的三种表来表示进程使用的文件 每个进程在 PCB 中有一个文件描述符表，每个描述符表项指向一个文件表 内核为每一个被该进程使用（打开）的文件维护一张文件表 每个文件（或设备）都有一个索引节点，它包含了文件类型属性及文件数据 在 UNIX/Linux 内核中每个打开的文件（或设备）都有一个对应的 V 节点结构，V 节点包含了文件类型和对此文件进行各种操作的函数指针。对于大多数文件，v 节点还包含了该文件的 i 节点。i 节点与具体的逻辑文件系统有关，存储在磁盘上，在打开文件时从磁盘上读入到内存中。i 节点包含了文件的所有者、文件长度、文件所在设备、指向文件实际数据块在磁盘上所在位置的指针等等。UNIX/Linux 每个进程在内核中都有一个结构体来维护进程相关的信息称为进程控制块 (PCB,Process Control Block)。UNIX/Linux 中每个打开的文件在内核中都有一个结构体来维护文件相关的信息，成为文件表。每一个 PCB 中有一个指针数组，数组中的每一个成员指向一个该进程打开的文件表,称为文件描述符表。用户程序不能直接访问内核中的文件描述符表,而只能使用文件描述符表的索引,这些索引就称为文件描述符(File Descriptor),对于内核而言，所有打开文件都用文件描述符标识,文件描述符是一个非负整数。当打开一个现存文件或创建一个新文件时，内核向进程返回一个文件描述符（打开文件的计数） 通常情况下，文件描述符 0、1、2 特指标准输入、标准输出、标准错误（用户程序可直接使用而不需要打开）。它们也可以由常数代替（在头文件中 unistd.h 定义） ： STDIN_FILENO STDOUT_FILENO STDERR_FILENO Linux 内核通过一个被称为进程描述符的 task_struct 结构体来管理进程，这个结构体包含了一个进程所需的所有信息。它定义在/usr/src/linux-headers-4.15.0-141/include/linux/sched.h 文件中。 文件的打开和关闭都是资源的一种操作，Linux 中的 task_struct 中有两个结构体储存这两个信息。 Struct fs_struct *fs：进程的可执行映象所在的文件系统，有两个索引点，称为 root 和 pwd，分别指向对应的根目录和当前目录。 Struct files_struct *files：进程打开的文件, 指向 files_struct 结构体, 称为文件描述符表12345678// files_struct的主要成员atomic_t count; 共享该表的进程数 int max_fds; 当前文件对象的最大数int max_fdset; 当前文件描述符的最大数int next_fd; 已分配的文件描述符加1struct file ** fd; 指向文件表（文件对象）指针数组fd_set *close_on_exec; 执行exec时需要关闭的文件描述符struct file * fd_array[32]; 文件表（文件对象）指针的初始化数组 已打开的文件在 Linux 内核中用 file 结构体表示,文件描述符表中的指针指向 file 结构体 文件描述符表中每个表项包含一个指向已打开的文件的指针（指向 file 结构的指针） 123456789// file的主要成员struct list_head f_list; 所有打开的文件形成链表struct dentry *f_dentry; 指向对应目录项的指针(directory entry)struct file_operations *f_op; 这个结构体的成员都是函数指针,指向实现各种文件操作的内核函数mode_t f_mode; 文件的状态标志/打开模式loff_t f_pos; 文件的当前位置unsigned short f_flags; 打开文件时所指定的标志unsigned short f_count; 使用该结构的进程数unsigned int f_uid, f_gid; 用户的UserID和GroupID 目录项对象——dentry 结构体Linux 中引入目录项对象的概念主要目的是方便查找文件的索引节点一个路径的各个组成部分，不管是目录还是普通的文件，都是一个目录项对象 1234567891011// dentry 主要结构成员Atomic_t d_count; 目录项dentry引用计数unsigned int d_flags; dentry状态标志struct inode * d_inode; 与文件关联的索引节点struct dentry * d_parent; 父目录的dentry结构int d_mounted; 目录项的安装点struct qstr d_name; 文件名unsigned long d_time; 重新生效时间struct dentry_operations *d_op; 操作目录项的函数struct super_block *d_sb; 目录项树的根unsigned char d_iname［DNAME_INLINE_LEN］;文件名前16个字符 在内存中, 每个文件都有一个 dentry(目录项)和 inode(索引节点)结构，dentry 记录着文件名，上级目录等信息，正是它形成了我们所看到的树状结构；而有关该文件的组织和管理的信息主要存放 inode 里面，它记录着文件在存储介质上的位置与分布。同时 dentry-&gt;d_inode 指向相应的 inode 结构。dentry 与 inode 是多对一的关系，因为有可能一个文件有好几个文件名(硬链接, hard link) 索引节点表——inode 结构文件系统中的每个物理文件由一个索引节点表（索引节点对象）描述，且只能由一个索引节点对象描述。索引节点指向物理文件的具体存储位置，系统通过索引节点来定位每一个文件（文件名可以随时更改，但是索引节点对于物理文件是唯一的，并且随物理文件的存在而存在），索引节点包含了文件的长度、创建及修改时间、权限、所属关系、磁盘中的位置等信息。 123456789101112131415161718// iNode 主要结构成员unsigned long i_ino; inode号kdevt idev; 常规文件所在设备号umode_t i_mode; 文件类型以及存取权限nlink_t i_nlink; 连接到该inode的硬连接数uid_t i_uid; 文件属主的用户IDgid_t i_gid; 文件属主所在组的IDkdev_t i_rdev; 特殊文件所在设备号loff_t i_size; 文件大小（以字节为单位）struct inode_operations *i_op; 指向inode进行操作的函数指针struct super_block *i_sb; 指向该文件系统超级块的指针atomic_t i_count; 当前使用该inode的引用计数union{ struct minix_inode_info minix_i; struct Ext2_inode_info Ext2_i; struct hpfs_inode_info hpfs_i; …} u; inode 代表物理意义上的文件，通过 inode 可以得到一个数组，这个数组记录了文件内容的位置，如该文件位于硬盘的第 3，8，10 块，那么这个数组的内容就是 3,8,10。其索引节点号 inode-&gt;i_ino，在同一个文件系统中是唯一的，内核只要根据 i_ino，就可以计算出它对应的 inode 在介质上的位置。就硬盘来说，根据 i_ino 就可以计算出它对应的 inode 属于哪个块(block)，从而找到相应的 inode 结构。 文件的分类与权限文件类型： 类型 标识符 description 普通文件 - 存储数据的常规文件，如文本文件、图片、可执行程序等。 目录文件 d 特殊类型文件，存储其他文件名及 inode 号码。 字符设备文件 c 与字符设备（如终端、鼠标）交互，支持读写操作。 块设备文件 b 与块设备（如硬盘）交互，适合大量数据传输。 管道/FIFO p 进程间通信，内存中数据缓存通道。 套接字 s 支持网络或同一主机进程间通信的文件表现形式。 符号链接 l 指向另一文件或目录的特殊文件，类似 Windows 快捷方式。 文件权限 权限标识 对文件的含义 对目录的含义 r (read) 浏览文件内容 浏览目录中内容 w (write) 修改文件内容 增删及重命名目录内的文件 x (execute) 允许执行文件（如果文件是可执行的） 进入目录的权限 目录权限的特殊性 当打开一个任意类型的文件时，对该文件路径名中包含的每一个目录都应具有执行权限 为了在一个目录中创建一个新文件，必须对该目录具有写权限和执行权限 为了删除一个文件，必须对包含该文件的目录具有写权限和执行权限，对该文件本身则不需要有读、写权限 基于用户的文件权限管理文件用户分类 文件所有者：建立文件和目录的用户； 文件所有者所在组用户：文件所有者所属用户组中的其他用户； 其他用户：既不是文件所有者，又不是文件所有组所在组的其他所有用户。 超级用户：负责整个系统的管理和维护，拥有系统中所有文件的全部访问权限。 1234567字母表示法rwx rwx rwx👆🏻文件所有者 👆🏻同组用户 👆🏻其他用户数字表示法--- --x -w- -wx r-- r-x rw- rwx000 001 010 011 100 101 110 111 命令chmod 可用于修改文件的访问权限 format: chmod &lt;mode&gt; &lt;file&gt; mode: user: u(user，所有者),g(group，同组用户),o(other，其它用户),a(all) operation: +（添加权限）、-（移除权限）或 =（设置权限） permission: r(read)、w(write)、x(execute)、s(setuid，设置用户 ID)、t(setgid，设置组 ID) 文件 I/Oopen &amp; creat &amp; closeint open(const char *pathname, int flags, ...); 这个函数用于打开一个文件或者设备，返回一个文件描述符(当前进程中最小未使用的描述符数值)。pathname 是文件或设备的路径名，flags 指定了打开文件的模式（比如读、写、创建、追加等） int creat( const char *pathname, mode_t mode);该函数用于创建一个新文件，其等效于open( pathname, O_WRONLY | O_CREAT | O_TRUNC, mode);creat 函数的一个不足之处是它以只写方式打开所创建的文件,早期 UNIX 版本中 open 的第二个参数不包含 O_CREAT ，无法打开一个尚未存在的文件。如果要创建一个临时文件，并要先写后读该文件。则必须先依次调用creat，close，open int close( int filedes ); 该函数关闭打开的一个文件。内核对文件描述符表、对应的文件表项和索引节点表项进行相应的处理，来完成关闭文件的操作。进程关闭文件后，就不能再通过该文件描述符操作该文件。当一个进程终止时，它所有的打开文件将由内核自动关闭 read &amp; write &amp; lseekssize_t read( int filedes, void *buf, size_t nbytes); read 函数从打开的文件中读数据。如成功，则返回实际读到的字节数，如已到达文件的末尾或无数据可读，则返回 0,读操作完成后，文件的当前位置将从读之前的位置加上实际读的字节数；有多种情况可使实际读到的字节数少于要求读的字节数： 读普通文件，在读到要求字节数之前就到达文件尾； 当从终端设备读，通常一次最多读一行； 当从网络读时，网络中的缓冲机构可能造成返回值小于所要求读的字节数； 某些面向记录的设备，如磁带，一次最多返回一个记录。 ssize_t write( int filedes, const void *buf, size_t nbytes); 该函数返回实际写的字节数，通常与参数 nbytes 的值相同，否则表示出错。如果出错，则返回-1。write 出错的原因可能是磁盘满、没有访问权限、或写超过文件长度限制等等。对于普通文件，写操作从文件当前位置开始写（除非打开文件时指定了 O_APPEND 选项）。写操作完成后，文件的当前位置将从写之前的位置加上实际写的字节数。 off_t lseek( int filedes, off_t offset, int whence); 进程中每打开一个文件都有一个与其相关联的“文件当前位置”（读写位置）打开文件时，如果指定了O_APPEND选项则文件当前位置为文件尾，其他情况下文件当前位置默认为文件头（0）lseek 函数用于设置或查询文件当前位置函数对参数的解释与参数 whence 的值有关(offset 可正可负，以字节为单位) 若whence是SEEK_SET，则将该文件当前位置设为文件头+offset 若whence是SEEK_CUR，则将该文件当前位置设为文件当前位置+offset 若whence是SEEK_END，则将该文件当前位置设为文件尾+offset 个字节 若 lseek 成功执行，则返回新的文件当前位置。因此可用 lseek 查询文件文件当前位置currpos = lseek( fd, 0, SEEK_CUR)lseek 仅将文件当前位置记录在内核 file 结构中，它并不引起任何 I/O 操作，然后用于影响下一次读、写操作。文件当前位置可以大于文件的当前长度，但并不改变索引节点中文件长度信息（下一次写将延长该文件，并在文件中构成一个空洞，但文件大小并不是文件当前位置指示的值。对空洞位置的读操作将返回 0） 目录操作与文件属性目录操作 功能 常用函数 头文件 获取当前工作路径 getcwd, get_current_dir_name unistd.h 打开关闭目录 opendir, closedir dirent.h 读取目录文件 readdir sys/types.h, dirent.h Linux 命令演示可见[[LinuxCmds#目录操作]] 文件属性管理读取文件属性 常用函数：stat，lstat，fstat 头文件： sys/stat.h 函数定义： int stat(const char *path, struct stat *buf); int lstat(const char *path, struct stat *buf); 两个函数参数相同，功能类似读取 path 参数所指定文件的文件属性并将其填充到 buf 参数所指向的结构体中对于符号链接文件，lstat 返回符号链接的文件属性，stat 返回符号链接引用文件的文件属性int fstat(int filedes, struct stat *buf);与前两个函数功能类似，指定文件的方式改为通过文件描述符 123456789101112131415struct stat { mode_t st_mode; 文件类型与访问权限 ino_t st_ino; i节点号 dev_t st_dev; 文件使用的设备号 dev_t st_rdev; 设备文件的设备号 nlink_t st_nlink; 文件的硬链接数 uid_t st_uid; 文件所有者用户ID gid_t st_gid; 文件所有者组ID off_t st_size; 文件大小（以字节为单位） time_t st_atime; 最后一次访问该文件的时间 time_t st_mtime; 最后一次修改该文件的时间 time_t st_ctime; 最后一次改变该文件状态的时间 blksize_t st_blksize; 包含该文件的磁盘块的大小 blkcnt_t st_blocks; 该文件所占的磁盘块数}; mode_t st_mode 为无符号整数，其低 16 位定义如下 判断文件类型 是否为普通文件: S_ISREG(st_mode) #define S_IFMT 0170000 #define S_IFREG 0100000 #define S_ISREG(m) (((m) &amp; S_IFMT) == S_IFREG) 是否为目录文件 S_ISDIR(st_mode) 是否为字符设备 S_ISCHR(st_mode) 是否为块设备 S_ISBLK(st_mode) 是否为 FIFO S_ISFIFO(st_mode) 是否为套接字 S_ISSOCK(st_mode) 是否为符号连接 S_ISLINK(st_mode)","link":"/UESTC/OS/Ch7-1LinuxUnix/"},{"title":"Unix&#x2F;Linux OS Introduction","text":"进程运行与监控Linux 进程控制块进程的启动进程的运行控制进程的监测操作系统接口与应用开发","link":"/UESTC/OS/Ch7-2LinuxUnix/"},{"title":"Concurrency vs Parallelism","text":"当我们谈论计算机科学和互联网技术时，经常会遇到并发(concurrency)和并行(parallelism)这两个词。它们听起来相似，但实际上又有一些重要的区别。 并发 Concurrency是指两个或多个事件在同一时间间隔内发生CPU 交替执行多个程序,由于切换速度很快,以人类的感觉来看是同时执行的;但在微观层面,在同一时刻只能有一条指令执行处理器分时复用,多线程交织执行;在特定某个时刻，某一个线程以排他方式独占 CPU 资源，而在不同时刻，不同的线程占用 CPU 运行，从而实现在一段时间内同时执行多个线程的表象。 并行 Parallelism是指两个或多个事件在同一时刻发生 同一时刻内,无论从微观还是宏观层面来看，有多条指令在多个处理器上是同时执行的 总结 Conclusion多 CPU 指的是在一套系统中拥有多颗 CPU，常见于服务器、工作站或计算中心，可以提供庞大的算力。 多核是指在一枚处理器（processor）中集成两个或多个完整的计算引擎。 Thread Concurrency Thread Parallelism Process Concurrency Process Parallelism 多 CPU ✔️ ✔️ ✔️ ✔️ 多核 ✔️ ✔️ ✔️ ❌ 单核 CPU ✔️ ❌ ✔️ ❌ 操作系统会拆分 CPU 为一段段时间的运行片，轮流分配给不同的程序。对于多 cpu，多个进程可以并行在多个 cpu 中计算，当然也会存在进程切换；对于单 cpu，多个进程在这个单 cpu 中是并发运行，根据时间片读取上下文+执行程序+保存上下文。同一个进程同一时间段只能在一个 cpu 中运行，如果进程数小于 cpu 数，那么未使用的 cpu 将会空闲。 进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此 CPU 切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。 对于多核 cpu，进程中的多线程并行执行，执行过程中存在线程切换，线程切换开销较小。对于单核 cpu，多个线程在 cpu 中并发执行，根据时间片切换线程。同一个线程同一时间段只能在一个 cpu 内核中运行，如果线程数小于 cpu 内核数，那么将有多余的内核空闲。 Refhttps://www.jianshu.com/p/cbf9588b2afbhttps://zhuanlan.zhihu.com/p/383279972https://blog.csdn.net/weixin_45163798/article/details/104596138","link":"/UESTC/OS/ConcurrencyvsParallelism/"},{"title":"Process &amp; Thread","text":"ProcessDefinition A process is an instance of a program running in a computer. A process is an independent unit of execution in a computer program, including the complete set of instructions and the associated memory and resources. It is a program that is under execution. 典型的进程定义有： 进程是程序的一次执行。 进程是一个程序及其数据在处理机上顺序执行时所发生的活动。 进程是程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。 Features 动态性 Dynamic:进程的实质是进程实体的一次执行过程，因此，动态性是进程的最基本的特征。动态性表现在“它由创建而产生，由调度而执行，由撤消而消亡”。可见，进程实体有一定的生命期。 并发性 Concurrency:多个进程实体同存于内存中，且能在一段时间内同时运行。 独立性 Independence:进程实体是一个能独立运行、独立分配资源和独立接受调度的基本单位。 异步性 Asynchronism:进程按各自独立的、不可预知的速度向前推进，或说进程实体按异步方式运行。 Components进程实体 Process Entity包括： 程序块 Program Block: The code that is to be executed. 数据块 Data Block: The variables and data that are used by the program. 堆栈 Stack: The stack that is used to store the temporary data and function calls. 进程控制块 Process control block(PCB): It is a data structure that contains information about the process. It includes process state, process ID, CPU registers, CPU scheduling information, memory management information, and other information. It is used by the operating system to manage the process. [Ch2-1ProcessContorl#进程控制块 PCB] States 新建态 New: 进程已经创建，但未被 OS 接纳为可执行进程，并且程序还在辅存，PCB 在内存 就绪态 Ready: The process is ready to be executed. 运行态 Running: The process is currently being executed. 阻塞态 Blocked/等待态 Waiting: The process is waiting for some event to occur. 终止态 Exit: 因停止或取消，被 OS 从执行状态释放 当出现了引起进程挂起的事件时，用户请求将自己挂起，或者父进程请求挂起自己的子进程，这时使用挂起原语Suspend()当发生激活事件后，系统利用激活原语Active() 将指定进程激活。激活原语将进程从外存调入内存，然后检查进程状态挂起状态又称为静止状态，一个就绪进程被挂起，变为静止就绪；阻塞状态进程被挂起，称为静止阻塞。处于静止状态的进程保存在磁盘(外存)上，它只有被对换到内存才能被调度执行。 Note 即使进程等待的事件已经发生，只要进程处于挂起状态，它就不能执行。只有当进程从挂起状态恢复时，它才能根据自身的就绪条件（如等待的事件是否已经发生）决定是否可以执行。 使之挂起的进程可以为：自身、其父进程、OS 只有挂起它的进程才能使之由挂起状态转换为其他状态 Causes of Suspension 终端用户的请求。 父进程请求。 负荷调节的需要。当实时系统中的工作负荷较重，把一些不重要的进程挂起，以保证系统能正常运行。 操作系统的需要。操作系统有时希望挂起某些进程，以便检查运行中的资源使用情况或进行记账。 Blocked VS Suspend 阻塞：正在执行的进程由于发生某事件（如 I/O 请求、申请缓冲区失败等）暂时无法继续执行。此时引起进程调度，OS 把处理机分配给另一个就绪进程，而让受阻进程处于暂停状态，一般将这种状态称为阻塞状态。挂起：由于系统和用户的需要引入了挂起的操作，进程被挂起意味着该进程处于静止状态。如果进程正在执行，它将暂停执行，若原本处于就绪状态，则该进程此时暂不接受调度。 Same： 进程都暂停执行 进程都释放 CPU，即两个过程都会涉及上下文切换 Diff： 对系统资源占用不同：虽然都释放了 CPU，但阻塞的进程仍处于内存中，而挂起的进程通过“对换 Swapping”技术被换出(Swap Out)到外存（磁盘）中。 发生时机不同：阻塞一般在进程等待资源（IO 资源、信号量等）时发生；而挂起是由于用户和系统的需要，例如，终端用户需要暂停程序研究其执行情况或对其进行修改、OS 为了提高内存利用率需要将暂时不能运行的进程（处于就绪或阻塞队列的进程）调出到磁盘 恢复时机不同：阻塞要在等待的资源得到满足（例如获得了锁）后，才会进入就绪状态，等待被调度而执行；被挂起的进程由将其挂起的对象（如用户、系统）在时机符合时（调试结束、被调度进程选中需要重新执行）将其激活 Program vs Process: A program is a passive entity, such as a file containing a list of instructions stored on disk, whereas a process is an active entity, with a program counter specifying the next instruction to execute and a set of associated resources. 可执行程序和进程的区别 程序是永存的；进程是暂时的，是程序在数据集上的一次执行，有创建有撤销，存在是暂时的； 程序是静态的观念，进程是动态的观念； 进程具有并发性，而程序没有； 进程是竞争计算机资源的基本单位，程序不是。 进程和程序不是一一对应的： 一个程序可对应多个进程即多个进程可执行同一程序； 一个进程可以执行一个或几个程序。 ThreadDefinition A thread is a basic unit of CPU utilization. It is a single sequence stream within a process. A thread is a lightweight process. It shares the same memory space and system resources with other threads in the same process. 也被称为轻量级进程，更加轻量。多个线程可以在同一个进程中同时执行，并且共享进程的资源比如内存空间、文件句柄、网络连接等。 [Ch2-4Thread#线程概述] Features Lightweight: Threads are lightweight compared to processes. It takes less time to create and terminate threads. Shared resources: Threads in the same process share the same memory space and system resources. Efficiency: Threads are more efficient than processes because they share the same memory space and system resources. ComponentsTCB Components Tid: A unique thread identifier in the process. 同进程一样，每个线程也有一个线程 ID;进程 ID 在整个系统中是唯一的，线程 ID 只在它所属的进程环境中唯一 Register set: These are small storage areas that quickly hold and release data. They store intermediate values during execution.Including Program counter which keeps track of the execution of the thread, indicating the address of the next instruction to be executed. Stack: It is a data structure that stores temporary data like function parameters, return addresses, and local variables. States同进程一样，线程之间也存在共享资源和相互合作的制约关系，致使线程在运行时也具有间断性。线程运行时有以下 3 种状态： Running 执行状态:表示线程正获得 CPU 而运行； Ready 就绪状态:表示线程已具备了各种运行条件，一旦获得 CPU 便可执行； Blocked 阻塞状态:表示线程在运行中因某事件而受阻，处于暂停执行的状态； Comparison对比线程具有许多传统进程所具有的特征，所以又称为轻型进程(Light-Weight Process) ，相应地把传统进程称为重型进程(Heavy-Weight Process)，传统进程相当于只有一个线程的任务。在引入了线程的操作系统中，通常一个进程都拥有若干个线程，至少也有一个线程。 下面从调度性、并发性、系统开销和拥有资源等方面对线程和进程进行比较。 调度 在传统的操作系统中，进程作为拥有资源和独立调度、分派的基本单位。而在引入线程的操作系统中，则把线程作为调度和分派的基本单位，而进程作为资源拥有的基本单位。 并发性 在引入线程的操作系统中，不仅进程之间可以并发执行，而且在一个进程中的多个线程之间亦可并发执行，使得操作系统具有更好的并发性，从而能更加有效地提高系统资源的利用率和系统的吞吐量。 拥有资源 一般而言，线程自己不拥有系统资源(也有一点必不可少的资源)，但它可以访问其隶属进程的资源，即一个进程的代码段、数据段及所拥有的系统资源，如已打开的文件、I/O 设备等，可以供该进程中的所有线程所共享。 独立性 同一进程中的不同线程共享进程的内存空间和资源 系统开销 线程的切换只需要保存和设置少量的寄存器内容，不涉及存储器管理方面的操作。 由于一个进程中的多个线程具有相同的地址空间，在同步和通信的实现方面线程也比进程容易。在一些操作系统中，线程的切换、同步和通信都无须操作系统内核的干预。 支持多处理机系统 一个进程分为多个线程分配到多个处理机上并行执行，可加速进程的完成。 Linux Process/Thread Control Operations Comparison 应用功能 线程 进程 创建 pthread_create fork,vfork 退出 pthread_exit exit 等待 pthread_join wait、waitpid 取消/终止 pthread_cancel abort 读取 ID pthread_self() getpid() 同步互斥/通信机制 互斥锁、条件变量、读写锁 无名管道、有名管道、信号、消息队列、信号量、共享内存 Java Example摘录自javaguide 从下图可以看出：一个进程中可以有多个线程，多个线程共享进程的堆和方法区 (JDK1.8 之后的元空间)资源，但是每个线程有自己的程序计数器、虚拟机栈 和 本地方法栈。 线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。 有了进程为什么还需要线程?进程切换是一个开销很大的操作，线程切换的成本较低。线程更轻量，一个进程可以创建多个线程。多个线程可以并发处理不同的任务，更有效地利用了多处理器和多核计算机。而进程只能在一个时间干一件事，如果在执行过程中遇到阻塞问题比如 IO 阻塞就会挂起直到结果返回。同一进程内的线程共享内存和文件，因此它们之间相互通信无须调用内核。 为什么要使用多线程?总体上 从计算机底层来说： 线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。从当代互联网发展趋势来说： 现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。 计算机底层 单核时代：在单核时代多线程主要是为了提高单进程利用 CPU 和 IO 系统的效率。 假设只运行了一个 Java 进程的情况，当我们请求 IO 的时候，如果 Java 进程中只有一个线程，此线程被 IO 阻塞则整个进程被阻塞。CPU 和 IO 设备只有一个在运行，那么可以简单地说系统整体效率只有 50%。当使用多线程的时候，一个线程被 IO 阻塞，其他线程还可以继续使用 CPU。从而提高了 Java 进程利用系统资源的整体效率。多核时代: 多核时代多线程主要是为了提高进程利用多核 CPU 的能力。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，不论系统有几个 CPU 核心，都只会有一个 CPU 核心被利用到。而创建多个线程，这些线程可以被映射到底层多个 CPU 上执行，在任务中的多个线程没有资源竞争的情况下，任务执行的效率会有显著性的提高，约等于（单核时执行时间/CPU 核心数）。 Reference:https://teaching.csse.uwa.edu.au/units/CITS2002/lectures/lecture07/singlepage.html","link":"/UESTC/OS/ProcessvsThread/"},{"title":"ChⅠ-数据库系统概论","text":"数据库特点 数据不重复存放 可支持多个应用并发访问 数据结构独立于应用程序 对数据的增、删、查、改均由数据库系统管理软件进行管理和控制。 数据模型数据模型是指描述事物对象数据特征及其结构的形式化表示，包含数据结构、数据操作、数据约束 3 个部分组成。 数据结构: 用于描述事物对象的静态特征，包括事物对象的数据组成、数据类型、数据性质等。 数据操作:用于描述事物对象的动态特征，包括数据的插入、修改、删除和查询等访问操作。 数据约束：用于描述数据结构中数据之间的语义联系、数据之间的制约和依存关系，以及数据动态变化的规则等。 层次数据模型Pros： 1）层次清晰 2）结点更新容易 3）检索查询效率高Cons： 1）结构单一 2）相同信息多次存储、数据冗余大 3）不适合于具有拓扑空间的数据组织 网状数据模型Pros 1）容易表达数据间的复杂关系 2）冗余小Cons 1）结构复杂、定位难 2）需要定位指针 关系数据模型Pros 数据结构简单、操作灵活 支持关系与集合运算操作 支持广泛使用的 SQL 数据库操作语言标准 容易实现与应用程序的独立性 Cons 只用于结构化数据的组织与存储管理 支持的数据类型较简单 难以支持互联网广泛应用的非结构化数据和复杂数据管理 Others其它数据模型,如对象数据模型、键值对数据模型、列式数据模型、文档数据模型、图形数据模型等 数据库系统数据库系统（Database Systems）是一类基于数据库进行数据管理与信息服务的软件系统。 数据库系统由用户、数据库应用程序、数据库管理系统和数据库四个部分组成。 数据库用户（Users）是指数据库系统的使用人员。 数据库应用程序(Database Applications) 是一种在 DBMS 支持下对数据库中数据进行访问处理的应用程序。 数据库管理系统（Database Manage System，DBMS ）——是一种专门用来创建数据库、管理数据库、维护数据库，并提供外部对数据库进行访问的系统软件。 数据库(Database)是一种依照特定数据模型组织、存储和管理数据的文件集合。 关系数据库数据内容：用户表（用户数据），系统表（元数据、索引数据、运行数据） 关系数据库对象组织 用户表：存储用户的应用数据 系统表：存储数据库系统自身数据 视图：通过虚拟表实现数据查询处理 索引：通过目录数据结构支持快速的数据查询 约束：对关系表及其数据施加规则 存储过程：在数据库内部实现特定功能程序的数据处理 触发器：在数据库内部实现数据操作事件触发自动执行的过程程序 数据库系统生命周期 需求分析系统分析人员与用户交流，利用软件工程方法获取系统数据需求信息，并采用需求模型定义系统数据组成，及其数据字典 系统设计系统设计人员根据系统功能和性能需求，对系统数据库进行设计，包括系统概念数据模型 CDM、系统逻辑数据模型 LDM 和系统物理数据模型 PDM 设计 系统实现按照系统设计方案进行数据库创建与应用编程实现，主要包括 DBMS 安装部署、数据库创建、数据对象创建、应用编程实现等方面的工作。 系统测试系统测试人员将测试数据上载到数据库中，对数据库对象进行测试操作访问，实现数据库功能和性能测试。 系统运行与维护系统运维人员在信息系统投入运行过程中，对数据库系统进行定期维护和优化，以保证数据库系统正常地、高效地运行。 数据库管理系统 DBMS 类型 按用途分类 通用 DBMS 支持公共领域数据库应用，如 SQL server 专用领域 DBMS 支持专用领域数据库应用，如嵌入式领域的 SQLite， 按用户数分类。 单用户 DBMS 仅支持单用户访问，如 miniSQL。 多用户 DBMS 可支持多用户并行访问，如 MySQL 按系统部署分类 集中式 DBMS 数据库集中部署在单一物理机器中，如 Access 分布式 DBMS 数据库可分布在不同位置物理机器，如 0racle Database 按使用场景分类 桌面级 DBMS 适用于微小型的信息服务应用，如 Access,SQLite 等 企业级 DBMS 适用于中大型的企业级应用，如 DB2,ORACLE Database ,Sybase ASE 等 按软件版权分类 产品 DBMS 数据库厂商拥有版权的数据库软件，如 SQL server 、Oracle Database 等 开源 DBMS 开源组织提供的数据库软件，如 MySQL,PostgreSQL 等 FAQNoSQL 数据库和 NewSQL 数据库有何区别？NoSQLNoSQL 将数据库归类为描述性数据库，如“No-SQL”。NoSQL 是一个全面的数据库类别，旨在克服 SQL 数据库产生的问题。它们被称为无模式文档，它们以文档、图形、键值和非有序方式存储数据。 Pros 当需要动态行为时，它们比传统系统更好地扩展。 这些系统针对非关系数据进行了更好的优化。 允许执行写入时架构操作。 Cons： 使用 NoSQL 构建的系统基本上是非事务性的。 创建的数据量巨大，不提供任何传统的数据库功能。 当同时执行多个事务时，它不遵循一致性。 NewSQLNewSQL 对数据库进行分类，这些数据库是关系模型与可扩展性的进步，数据类型的灵活性的组合。这些数据库专注于 NoSQL 中不存在的功能，这提供了强大的一致性保证。这涵盖了两层数据，一层关系数据和键值存储。 Pros 它为传统的关系数据库引入了新的实现。 它汇集了 SQL 和 NoSQL 的优势。 在用户的类型和需求之间迁移很容易。 Cons： 它们提供对丰富传统系统的部分访问。 它可能会导致内存中体系结构出现问题，以超过数据量。 这种数据库的核心基础是关系系统，这使得理解变得棘手。 为什么关系数据库不适合大数据应用处理？关系数据模型局限：只用于结构化数据的组织与存储管理 支持的数据类型较简单 难以支持互联网广泛应用的非结构化数据和复杂数据管理","link":"/UESTC/DataBase/Ch1-DbOverview/"},{"title":"ChⅡ-数据库关系模型","text":"关系及其基本概念 Relation and Basic Concepts实体(entity)指包含有数据特征的事物对象在概念模型世界中的抽象名称。关系(relation)指具有关系特征、用于存放实体数据的二维表。关系也常被称为关系表。 表中每行存储实体的一个实例数据(record) 表中每列包含实体的一项属性数据(attribute) 表中单元格只能存储单个值 不允许有重复的行列 行列顺序可任意 在关系中，可以用来唯一标识元组的属性列，称为键(Key)，其它属性列都为非键列。复合键(Compound Key)指关系中用来唯一标识元组的多列作为键。例如(学号，课程号)作为学生选课表的复合键。候选键(Candidate Key)关系中可能有多个列均适合作为键，将其中每个都称为候选键。例如(学号)和(身份证号)都可以作为学生表的候选键。主键(Primary key)是关系表中最有代表性的一个候选键，每个关系表中只能定义一个主键。代理键(Surrogate Key)采用 DBMS 自动生成的数字序列作为关系表的主键，可替代复合主键，以便获得更高性能数据访问操作处理。 关系模式语句中主键表示方法: RELATION_NAME(主键属性，属性 1，属性 2，…) 主键作用： 唯一标识关系表的每个元组 tuple 与关联表的外键建立联系，实现关系表之间连接 数据库文件使用主键值来组织关系表的数据存储 数据库使用主键索引快速检索数据 关系模型原理 Relation Model Principles关系模型(Relation Model)——是一种基于二维表结构存储数据实体及实体间联系的数据模型。集合运算操作包括选择(select)、投影(project)、连接(join)、交(intersection)、并(union)、差(difference)等。专门针对元组的关系操作包括数据行插入(Insert)、 修改(Update)、删除(Delete)操作。 关系模型中的完整性约束 Integrity Constraint完整性约束作用 消除关系表的元组重复存储 保持关联表的数据一致性 实现业务数据规则 关系模型完整性约束 实体完整性(Entity Integrity)：保证关系中的每个元组都是可识别的和唯一的。 关系表中的主键列不允许为空值,不允许重复 参照完整性(Referential Integrity)：关系表中的外键列值必须是另一关系表中的主键列值，或者为空值 用户定义完整性(User-defined Integrity)：用户自定义的数据约束，如属性列取值范围、取值类型、取值唯一性等 约束 描述 关键字 非空约束 限制该字段的数据不能为 null NOT NULL 唯一约束 保证该字段的所有数据都是唯一、不重复的 UNIQUE 主键约束 主键是一行数据的唯一标识，要求非空且唯一 PRIMARY KEY 默认约束 保存数据时，如果未指定该字段的值，则采用默认值 DEFAULT 检查约束（8.0.1 版本后） 保证字段值满足某一个条件 CHECK 外键约束 用来让两张图的数据之间建立连接，保证数据的一致性和完整性 FOREIGN KEY 关系模型数据操作 Relation Model Data OperationSelect选择 (Select)：$\\sigma_{p}(R) = {t | t \\in R , \\text{且} , p(t) , \\text{为真}}$$\\sigma_F(table)$ 根据 F 的判断条件，对 table 表进行选择等同于SELECT * FROM table WHERE F;例如$\\sigma_{age&lt;20&gt;}(Student)$ Project投影 (Project)：$\\pi_{A}(R) = {t[A] | t \\in R}$从 R 中选择出若干属性列组成新的关系$\\pi_{(Sname,Sgender)}(Student)$,等同于SELECT Sname,Sgender FROM Student Join连接 (Join)：$R \\bowtie S = {t | t \\in R , \\text{且} , t \\in S}$从两个关系的笛卡尔积中选取属性间满足一定条件的元组连接运算从 R 和 S 的广义笛卡尔积 R×S 中选取（R 关系）在 A 属性组上的值与（S 关系）在 B 属性组上值满足比较关系的元组。 条件连接 cross join$R \\bowtie_{c} S = \\sigma_c(R \\times S)$ 等值连接 equi join$R \\bowtie_{R.B=S.B} S = \\sigma_{R.B=S.B}(R \\times S)$条件连接的特例。从关系 R 与 S 的广义笛卡尔积中选取 A、B 属性值相等的那些元组等同于 SELECT * FROM R, S WHERE R.A = S.B 自然连接（Natural join）自然连接是等值连接的特例，根据两个表中的所有相同属性列进行连接，连接后多个的相同属性列只保留一个SELECT * FROM R NATURAL JOIN S 外连接（Outer join）外连接-自然连接的特例：自然连接只有相同属性列的值相同才返回，外连接中若有一方的行的共同属性列没有找到与之匹配的行，则也保留该行，以 NULL 填充。其可分为左外连接、右外连接、全外连接[DataBase03#外连接查询 Outer Join] Others交集 (Intersection)：$R \\cap S = {t | t \\in R , \\text{且} , t \\in S}$ 并集 (Union)：$R \\cup S = {t | t \\in R , \\text{或} , t \\in S}$ 差集 (Difference)：$R - S = {t | t \\in R , \\text{且} , t \\notin S}$ 除操作 (Division)：$R ÷ S $，笛卡尔积的逆操作","link":"/UESTC/DataBase/Ch2-DbRelationModel/"},{"title":"ChⅢ-数据库操作SQL语言","text":"SQL 语句 数据定义语言（DDL）：创建修改删除数据库对象；create/drop/alter database/table/index 数据操纵语言（DML）：增删改数据；insert/update/delete 数据查询语言（DQL）：数据查询； 数据控制语言（DCL）：数据库对象访问控制；grant/deny/revoke 事物处理语言（TPL）：事物处理；begin transaction/commit/rollback 游标控制语言（CCL）：游标操作；declare cursor/fetch into/close curso DDL数据定义语言（Data Definition Language，DDL）是 SQL 语言中用于创建、修改或删除数据库对象的语句。 Database1234-- databaseCREATE DATABASE db_name;ALTER DATABASE db_name RENAME TO new_db_name;DROP DATABASE db_name; Table123456789101112131415161718192021222324252627282930-- tableCREATE TABLE table_name ( Sname varchar(10) NOT NULL, Age int NOT NULL, Sid char(10) PRIMARY KEY,);'''完整性约束包括：PRIMARY KEY 主键NOT NULL 非空NULL 空值UNIQUE 值唯一CHECK 有效性检查DEFAULT 缺省''''''假定创建一个表，City字段只能取值上海、北京，age 默认为 10'''CREATE TABLE TEST( City varchar(10) CHECK(City IN('上海','北京')), Age int NOT NULL DEFAULT 10);ALTER TABLE &lt;表名&gt; ADD &lt;新列名称&gt;&lt;数据类型&gt;|[完整性约束] ALTER TABLE&lt;表名&gt; DROP COLUMN &lt;列名&gt;；ALTER TABLE&lt;表名&gt; DROP CONSTRAINT&lt;完整性约束名&gt;；ALTER TABLE &lt;表名&gt; RENAME TO &lt;新表名&gt;；ALTER TABLE &lt;表名&gt; RENAME &lt;原列名&gt; TO &lt;新列名&gt;；ALTER TABLE &lt;表名&gt; ALTER COLUMN &lt;列名&gt; TYPE&lt;新的数据类型&gt;；DROP TABLE &lt;表名&gt;; Primary/Foreign Key ConstraintPrimary Key Constraint syntax 定义单列主键Age int PRIMARY KEY 定义多列主键CONSTRAINT &lt;constraint_name&gt; PRIMARY KEY &lt;col1,col2...&gt; 定义代理键时，注意主键应为 serial 类型 12345678910111213141516CREATE TABLE TEST( City varchar(10) PRIMARY KEY, Age int PRIMARY KEY);CREATE TABLE TEST( Name varchar(10), Age int, CONSTRAINT PK_TEST PRIMARY KEY(Name,Age));CREATE TABLE TEST( Idx serial PRIMARY KEY, Name varchar(10), Age int); Foreign Key Constraint为了成功创建外键，以下条件必须满足： 引用的表（在 REFERENCES 后面指定的表）必须已经存在。 被引用的字段必须是父表的主键或具有唯一性约束。 数据类型必须兼容，即外键字段和被引用字段的类型必须相同或可转换。 123456789101112131415161718CREATE TABLE parent_table ( id SERIAL PRIMARY KEY, name VARCHAR(10))CREATE TABLE child_table ( id SERIAL PRIMARY KEY, name VARCHAR(10), parent_id INTEGER, FOREIGN KEY (parent_id) REFERENCES parent_table(id));-- ON DELETE CASCADEALTER TABLE child_tableADD CONSTRAINT fk_parent_id FOREIGN KEY (parent_id)REFERENCES parent_table(id)ON DELETE CASCADE; 在 SQL 中，特别是像 MySQL 和 PostgreSQL 这样的关系型数据库管理系统中，外键不仅提供了数据完整性，还可以配置不同的行为，例如 ON DELETE 和 ON UPDATE 规则，来决定当父表中的记录被删除或更新时，子表中的关联记录应该如何处理，常见的 ON DELETE 和 ON UPDATE 规则包括： RESTRICT 或 NO ACTION这是默认行为。如果尝试删除或更新主表中的记录，而子表中存在依赖这个记录的外键，那么操作会被阻止。这确保了参照完整性，防止了意外的数据丢失。 CASCADE:当主表中的记录被删除或更新时，所有关联的子表记录也将被相应地删除或更新。这样，两个表之间的数据保持一致。 SET NULL:如果主表中的记录被删除或更新，子表中对应的外键字段将被设置为 NULL。这要求外键字段在定义时允许为 NULL。 SET DEFAULT:设置外键在主键被删除或更新时，将子表中的外键字段设为其默认值。请注意，SET DEFAULT 在 MySQL 中不支持， 12345678910111213141516171819'''管理约束constraint_type指明了约束的类型，比如FOREIGN KEY、UNIQUE、PRIMARY KEY等。'''ALTER TABLE table_nameADD CONSTRAINT constraint_name constraint_type(column_name, ...);ALTER TABLE child_tableADD CONSTRAINT IF NOT EXISTS fk_parent_id FOREIGN KEY (parent_id)REFERENCES parent_table(id) ON DELETE CASCADE;ALTER TABLE child_table DROP CONSTRAINT fk_parent_id; Index索引（index）：将关系表按照指定列的取值顺序组织元组数据的数据结构，加快查询，占用额外存储空间、开销较大 123CREATE INDEX Birthday_Idx ON STUDENT(Birthday);ALTER INDEX Birthday_Idx RENAME TO Bday_Idx;DROP INDEX bday_idx; DMLDML：数据操作语言，用于对数据进行 CRUD(Create, Retrieve, Update, Delete) Ref: [[DataBase01#DML]] INSERT, UPDATE, DELETE1234567891011121314151617181920212223242526-- insertINSERT INTO &lt;表名|视图名&gt;[&lt;列名表&gt;] VALUES （列值表）;INSERT INTO Student VALUES('2017220101105','柳因','女','1999-04-23','软件工程','liuyin@163.com')-- updateUPDATE &lt;表名|视图名&gt;SET &lt;列名1&gt;=&lt;表达式1&gt; [，&lt;列名2&gt;=&lt;表达式2&gt;...][WHERE &lt;条件表达式&gt;]；UPDATE StudentSET Email='zhaodong@163.com'WHERE StudentName='赵东';-- deleteDELETE FROM &lt;表名|视图名&gt;[WHERE &lt;条件表达式&gt;]DELETE FROM StudentWHERE StudentName='赵东'; DQL123456789101112131415161718192021222324252627282930313233343536373839404142434445464748SELECT [ALL|DISTINCT] &lt;目标列&gt;[，&lt;目标列&gt;…][ INTO &lt;新表&gt; ]FROM &lt;表名|视图名&gt;[，&lt;表名|视图名&gt;…][ WHERE &lt;条件表达式&gt; ][ GROUP BY &lt;列名&gt; [HAVING &lt;条件表达式&gt; ]][ ORDER BY &lt;列名&gt; [ ASC | DESC ] ];-- BETWEEN AND 限制列值范围SELECT *FROM STUDENTWHERE BirthDay BETWEEN ‘2000-01-01’ AND ‘2000-12-30’;-- LIKE 通配符'_'代表一个字符'%'代表一个或多个字符SELECT *FROM STUDENTWHERE Email LIKE '%@163.com';-- AND\\OR\\NOT 逻辑运算符SELECT StudentID, StudentName, StudentGender, MajorFROM STUDENTWHERE Major='软件工程' AND StudentGender='男';-- IN 限定范围SELECT StudentID, StudentName, StudentGender, MajorFROM STUDENTWHERE Major IN ('CS','SE');-- ORDER BY &lt;&gt; ASC/DESC 默认升序ASC-- 多个列排序时，只有当前列相同时才会比较下一列SELECT *FROM STUDENTORDER BY Birthday DESC , StudentName ASC;-- 内置函数SELECT COUNT（*） AS 学生人数FROM Student;SELECT Min（Birthday） AS 最大年龄，Max（Birthday） AS 最小年龄FROM Student;-- GROUP BY &lt;&gt; HAVING-- 专业统计STUDENT表中男生人数，但限定只显示人数大于2的人数SELECT Major AS 专业, COUNT（StudentID） AS 学生人数FROM StudentWHERE StudentGender=’男’GROUP BY MajorHAVING COUNT(*)&gt;2; 多表关联查询子查询123456SELECT TeacherID, TeacherName, TeacherTitleFROM TeacherWHERE CollegeID IN (SELECT CollegeID FROM College WHERE CollegeName='计算机学院'); 连接查询123456789101112131415161718192021222324252627282930313233343536SELECT B.CollegeName AS 学院名称, A.TeacherID AS 编号, A.TeacherName AS 姓名, A.TeacherGender AS 性别, A. TeacherTitle AS 职称FROM Teacher AS A，College AS BWHERE A.CollegeID=B.CollegeIDORDER BY B.CollegeName, A.TeacherID;-- JOIN ON 内连接SELECT B.CollegeName AS 学院名称, A.TeacherID AS 编号, A.TeacherName AS 姓名, A.TeacherGender AS 性别, A. TeacherTitle AS 职称FROM TEACHER AS A JOIN COLLEGE AS BON A.CollegeID=B.CollegeIDORDER BY B.CollegeName, A.TeacherID;-- LEFT JOIN/RIGHT JOIN/FULL JOIN 外连接SELECT C.CourseName AS 课程名称, T.TeacherName AS 教师,COUNT (R.CoursePlanID) AS 选课人数FROM COURSE AS C JOIN PLAN AS P ON C.CourseID=P.CourseIDJOIN TEACHER AS T ON P.TeacherID=T.TeacherIDLEFT JOIN REGISTER AS R ON P.CoursePlanID=R.CoursePlanIDGROUP BY C.CourseName, T.TeacherName;","link":"/UESTC/DataBase/Ch3-DbSQL/"},{"title":"ChⅤ 数据库系统管理","text":"数据库管理数据库管理(Database Management)是指为保证数据库系统的正常运行和服务质量必须进行的系统管理工作。 为什么需要数据库管理 数据库系统随规模增大,系统会变得异常复杂 多用户数据库应用带来数据库访问复杂性 数据安全和数据隐私对机构和用户都非常重要 数据库系统随数据量增加和使用时间增长其性能会降低系统遭遇意外事件，数据库损坏或数据丢失 数据库管理目标 保障数据库系统正常稳定运行 充分发挥数据库系统的软硬件处理能力 确保数据库系统安全和用户数据隐私性 有效管理数据库用户及其角色权限 解决数据库系统性能优化、系统故障与数据损坏等问题 最大程度地发挥数据库对其所属机构的作用 DBMS 功能 数据库定义 数据库结构创建，结构修改，完整性约束定义，索引结构定义 数据库运行管理 系统启停控制，并发控制，事务管理，安全性控制，完整性控制，日志管理，性能监控 数据库组织与存储 缓冲区管理，数据组织，数据存取 数据库维护 数据载入，数据转换，数据库备份＆恢复，数据库重构，性能优化 数据库通信 数据的同步、复制、传输 事务管理为什么需要事务管理 在数据库应用系统中，完成一个业务处理通常需要多个操作步骤才能完成处理。在每个操作步骤中，都可能遭遇失败，若没有一个处理机制，就可能造成操作数据混乱，从而破坏数据一致性。 事务的概念[DataBase03#事务 Transaction]在数据库中，事务（Transaction）是指由构成单个业务处理单元的一组数据库访问操作，要求它们要么都成功执行，要么都不执行。 最小的 DBMS 执行任务单元 最小的故障恢复任务单元 最小的并发控制任务单元 事务特性 原子性（Atomicity）：事务中的所有操作要么全部完成，要么全部不完成。如果事务中的某个操作失败，那么整个事务将被回滚，数据库状态不会改变。 一致性（Consistency）：事务确保数据库从一个一致的状态转换到另一个一致的状态。事务开始和结束时，所有的业务规则都必须保持一致。 隔离性（Isolation）：每个事务都在一个独立的工作区中执行，事务之间不会互相影响。这意味着并发事务的修改必须被隔离，直到事务提交，其他事务才能看到这些修改。 持久性（Durability）：一旦事务被提交，它对数据库的更改就是永久性的。即使发生系统故障，更改也不会丢失。 事务并发执行是指多个事务程序在数据库系统中同一时段运行，从而改善系统的资源利用率、减少事务运行的平均等待时间 事务 SQL 程序： 1234BEGIN 或 START TRANSACTION ；--事务开始语句ROLLBACK； --事务回滚语句COMMIT；--事务提交语句SAVEPOINT；--事务保存点语句 并发控制为什么需要并发控制？ 当多个事务程序在 DBMS 系统中同时运行时，可能会出现对一些共享数据同时进行访问操作，如一些事务修改数据，另一些事务读取数据。这些并发的共享数据操作，如果在 DBMS 中没有一定的约束控制情况下，可能会带来数据不一致性或事务程序死锁问题。因此，在多个事务并发运行时必须进行并发控制处理 并发控制目的 支持并发事务处理，使更多用户并行操作，提高系统的并发访问能力。 保证一个事务工作不会对另一个事务工作产生不合理的影响。 并发控制需解决的问题 丢失更新 lost update两个事务同时读取同一数据，其中一个事务修改数据后，另一个事务也修改了同一数据，导致其中一个事务的修改被覆盖。 脏读 dirty read事务 T1 更新了数据，但没有 Commit,T2 读取了 T1 更新的数据，但 T1 通过 ROLLBACK 撤销事务，即 T2 读取到脏数据。 不可重复读 nonrepeatable read事务 T1 读取 a，T2 修改 a 并提交，T1 再次读取 a，发现 a 的值发生了变化。即一个事务的两次读取相同的资源但得到不同的值 幻读 phantom read事务T1按一定条件从数据库中读取某些数据记录后，事务T2在其中插入了一些记录，当T1再次按相同条件读取数据时，发现多了一些记录。称为幻读。与不可重复读类似。A transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows satisfying the condition has changed due to another recently-committed transaction. serialization anomalyThe result of successfully committing a group of transactions is inconsistent with all possible orderings of running those transactions one at a time. 加锁协议一级加锁协议：任何事务在修改共享数据对象之前，必须对该数据执行排它锁定指令，直到该事务处理完成，才进行解锁指令执行。特点：使用一级加锁协议，可避免出现更新丢失问题。但不能解决“不可重复读取”、“脏读”等数据不一致问题二级加锁协议：在一级加锁协议基础上，针对并发事务的共享数据读操作，必须对该数据执行共享锁定指令，读完数据后即刻释放共享锁定。特点：该加锁协议不但可以防止丢失更新,脏读问题。但有可能会出现“不可重复读取”的数据不一致问题。三级加锁协议：在一级加锁协议基础上，针对并发事务对共享数据进行读操作，必须对该数据执行共享锁定指令，直到该事务处理结束才释放共享锁定。特点：该加锁协议可以防止丢失更新、脏读、不可重复读取 两阶段锁定协议并发事务的正确调度准则：一个给定的并发事务调度，当且仅当它是可串行化时，才能保证正确调度。保证可串行化的一个协议是：二阶段锁定协议二阶段锁定协议规定每个事务必须分两个阶段提出加锁和解锁申请:增长阶段，事务只能获得锁，但不能释放锁。缩减阶段，事务只能释放锁，但不能获得新锁。 结论:若并发事务执行的所有事务都遵从两阶段锁定协议，则这些事务的任何并发调度都是可串行化调度，即这些并发调度执行结果可以保证数据库一致性。 数据库备份与恢复数据库备份——是指将数据库当前数据和状态进行副本复制，以便当数据库受到破坏或丢失数据时可以进行修复。数据库恢复——是指数据库中数据丢失或被破坏时，从备份副本将数据库从错误状态恢复到某一正确状态。 备份方法：完全数据库备份差异数据库备份事务日志备份文件备份 备份方式 热备份 Hot Backup，也被称为在线备份，是在数据库仍在运行和处理事务的同时进行的备份。这种备份方式的主要优点是它不会中断数据库服务，但可能会稍微影响数据库的性能。 冷备份 Cold Backup：也被称为离线备份，是在数据库完全关闭的情况下进行的备份。这种备份方式可以确保备份的数据一致性，但在备份期间，数据库无法提供服务。 备份时机:当系统数据库重要数据被修改、日志被清理、用户数据库创建、用户数据库加载等事件出现时。 数据库备份实现 12345--实例操作： 备份SAMPLE数据库到一个G磁盘的根目录文件Sample.bak中。BACKUP DATABASE SAMPLETO DISK = 'G:\\Sample.bak'; --实例操作： 从存储备份文件中恢复SAMPLE数据库。RESTORE DATABASE SAMPLEFROM DISK = 'G:\\Sample.bak';","link":"/UESTC/DataBase/Ch5-DbManagement/"},{"title":"ChⅣ-数据库设计与实现","text":"数据集设计方案包括: 数据库应用架构设计 在不同应用需求场景中，数据库的应用架构方式是不同的。数据库应用架构可分为单用户结构、集中式结构、C/S 结构和分布式结构 数据库结构模型设计 数据库结构模型设计一般分为概念层、逻辑层、物理层设计，它们的设计模型分别为概念数据模型 CDM、逻辑数据模型 LDM 和物理数据模型 PDM 数据库应用访问方式设计 数据库应用对数据库访问可以有多种方式，如直接本地接口连接访问、基于标准接口连接访问、基于数据访问层框架连接访问 数据库结构模型 概念数据模型（Concept Data Model，CDM）是一种面向用户的系统数据模型，它用来描述现实世界的系统概念化数据结构。使数据库设计人员在系统设计的初始阶段，摆脱计算机系统及 DBMS 的具体技术问题，集中精力分析业务数据以及数据之间的联系等，描述系统的数据对象及其组成关系。 逻辑数据模型 (Logic Data Model，LDM)是在概念数据模型基础上，从系统设计角度描述系统的数据对象组成及其关联结构，并考虑这些数据对象符合数据库对象的逻辑表示。 物理数据模型（Physical Data Model，PDM）是在逻辑数据模型基础上，针对具体 DBMS 所设计的数据模型。它用于描述系统数据模型在具体 DBMS 中的数据对象组织、存储方式、索引方式、访问路径等实现信息。 数据需求分析阶段:从现实业务中获取数据表单、报表、查询、业务规则、数据更新的说明;分析系统的数据特征、数据类型、数据取值约束;描述系统的数据关系、数据处理要求;建立系统的数据字典 数据库设计阶段:数据库内部结构设计（概念数据模型、逻辑数据模型、物理数据模型）;数据库索引、视图、查询设计;数据库表约束设计;数据库触发器、存储过程设计;文件组织方式 数据库实现阶段:数据库创建;数据模型的 SQL 程序创建、数据库对象物理实现 数据库测试阶段:数据库数据上线;数据库系统测试 CDM 从用户角度所建模的系统数据对象及其关系，它帮助用户分析信息系统的数据结构关系 LDM 从系统分析员角度所建模的系统数据对象逻辑结构关系，它帮助开发人员分析信息系统的逻辑数据结构 PDM 从系统设计人员角度所建模的系统数据物理存储及结构关系，它针对设计者具体定义信息系统的数据库表结构 E-R 模型方法E-R 模型基本元素E-R 模型是“实体-联系模型”（Entity-Relationship Model）的简称。它是一种描述现实世界概念数据模型、逻辑数据模型的有效方法。 在 E-R 模型中，基本元素包括实体、属性、标识符和联系: 实体Entity 是指问题域中存在的人、事、物、地点等客观事物在逻辑层面的数据抽象。它用于描述事物的数据对象，如客户、交易、产品、订单等 属性Attribute 是指描述实体特征的数据项。每个实体都具有 1 个或多个属性 标识符Identifier 是指标识不同实体实例的属性。标识符可以是 1 个或多个属性标识符与主键的区别是标识符是一个逻辑概念，主键是物理概念 联系Relationship 是指实体之间的联系，如“学生”与“成绩”的联系、“孩子”与“父亲”、“母亲”的联系等。联系中关联的实体数目称为联系度数 实体-联系类型二元实体联系类型 一对一联系 1:1 一对多联系 1:N 多对多联系 M:N 上述实体之间的联系反映了一个给定实体有多少实例与另一实体实例存在的数量对应关系。术语基数Cardinality 表示实体联系的实例数量。在实体之间除了需要反映了数量对应关系，有时还需要反映实体参与关系的必要性，即可选optional 或强制mandatory 继承联系在 E-R 模型中，实体之间除了基本联系外，还存在继承联系。继承联系用于表示实体之间的相似性关系。在实体继承联系中，一端是具有公共属性的实体，称为父实体；另一端是与父实体具有相似属性，同时也具有特殊性的一个或多个实体，称为子实体。 在继承联系中，还可以分为: 互斥性继承联系Mutual Exclusive Inheritance Relationship：在这种类型的继承中，子类只能从一个父类继承，不能同时从多个父类继承 非互斥性继承联系Non-Mutual Exclusive Inheritance Relationship：这种类型的继承中，子类可以从多个父类继承，即一个子类可以属于多个父类 完整继承联系 Total Inheritance Relationship：在这种继承中，父实体的每一个实例都必须是一个或多个子实体的实例。换句话说，父实体中的每个 instance 都必须在子实体中有对应。例如，如果我们有一个“人”实体，它有两个子实体：“学生”和“教师”，那么在完整继承关系中，每个“人”都必须是“学生”或“教师”。 不完整继承联系 Partial Inheritance Relationship：在这种类型的继承中，子类的 instance 可以不属于父类的任何子类；在上述的例子中，非完整继承允许存在一些“人”，他们既不是“学生”也不是“教师”。 强弱实体联系在 E-R 模型中，按照实体之间的语义关系，可以将实体分为弱实体 Weak Entity 和强实体 Strong Entity; 弱实体是指那些对于另外实体有依赖关系的实体，即一个实体的存在必须以另一实体的存在为前提。而被依赖的实体称为强实体; 例如在学校与学生之间的联系中，学生是弱实体，学校是强实体。 强实体Strong Entity 弱实体Weak Entity 标识符依赖弱实体 Identifier Dependent Weak Entity如果弱实体的标识符中，包含了强实体的标识符，那么这种弱实体称为标识符依赖弱实体 非标识符依赖弱实体 Non-Identifier Dependent Weak Entity如果弱实体的标识符中，不包含强实体的标识符，那么这种弱实体称为非标识符依赖弱实体 数据库建模设计概念数据模型设计是通过对现实世界中数据实体进行抽取、分类、聚集和概括等处理，建立反映系统业务数据组成结构的过程。步骤 业务数据分析，抽取数据实体 定义实体属性及其标识 建立实体联系，构建局部 E-R 模型图 分类、聚集和概括各个部分 E-R 模型图 完善全局 E-R 模型图，建立系统业务数据组成结构 数据模型 DM 元素对应关系表 CDM LDM PDM Entity Entity Table Attribute Attribute Column Identifier Primary Identifier/Foreign Identifer Primary Key/Foreign Key Relationship Relationship Reference(参照完整性约束) 1:11:NM:N 规范化设计为什么需要规范化数据库设计？ 减少数据库中的冗余数据，尽量使同一数据在数据库中仅保存一份，有效降低维护数据一致性的工作量。 设计合理的表间依赖关系和约束关系，便于实现数据完整性和一致性。 设计合理的数据库结构，便于系统对数据高效访问处理。 函数依赖定义：设有一关系模式R(U)，U 为关系 R 的属性集合，X和Y为属性U的子集。设 t，s 是关系 R 中的任意两个元组，如果 t[X] = s[X]，则t[Y] = s[Y]。那么称 Y 函数依赖于 X，表示为X→Y。函数依赖的左部称为决定因子，右部称为依赖函数。决定因子和依赖函数都是属性的集合。 假设我们有一个关系模式R，代表一个学生注册系统，其中U是关系R的属性集合，包括 {学生ID, 姓名, 课程ID, 课程名, 教师}任意给定两个元组t和s，例如元组t:{学生ID: 001, 姓名: &quot;小明&quot;, 课程ID: C101, 课程名: &quot;数学&quot;, 教师: &quot;李老师&quot;}元组s:{学生ID: 001, 姓名: &quot;小明&quot;, 课程ID: C102, 课程名: &quot;英语&quot;, 教师: &quot;王老师&quot;}都有t[学生ID] = s[学生ID] 则 t[姓名] = s[姓名]可以得出学生 ID 决定姓名，即学生ID→姓名 函数依赖的类型: 完全函数依赖 Total Functional Dependency若X→Y，对于X的任何一个真子集X'，X'→Y都不成立，则称X→Y是完全函数依赖 部分函数依赖 Partial Functional Dependency若X→Y，X存在一个真子集X'，使得X'→Y，则称X→Y是部分函数依赖 属性传递依赖 Transitive Dependenc若满足X→Y，Y→Z，则有X→Z，则称为属性传递依赖 多值函数依赖 Multivalued Dependency设 U 是关系模式 R 的属性集，X 和 Y 是 U 的子集，Z=U-X-Y，xyz表示属性集 XYZ 的值。对于 R 的关系 r，在 r 中存在元组（x, y1, z1）和（x, y2, z2）时，也存在元组（x, y1, z2）和（x, y2, z1），那么在模式 R 上存在多值函数依赖。 (数据结构，李老师，《数据结构与算法-初级》)(数据结构，王老师，《数据结构与算法-高级》) (数据结构，李老师，《数据结构与算法-高级》)(数据结构，王老师，《数据结构与算法-初级》) 关系规范化范式关系规范化是把一个有访问异常的关系分解成结构良好的关系的过程，使得这些关系有最小的冗余或没有冗余。规范化范式（Normal Form，NF）是指关系表符合特定规范化程度的模式。 第 1 范式（1NF）如果关系表中的属性不可再细分，该关系满足第 1 范式。反之，该表就不是关系表。 如果联系方式是一个关系表的属性，那么联系方式还可细分为电话号码、邮箱等属性；消除联系方式这类属性，将联系方式细分为电话号码、邮箱等属性，就满足了第 1 范式。 第 2 范式（2NF）如果关系满足第 1 范式，并消除了关系中的属性部分函数依赖，该关系满足第 2 范式。有一个关系(A,B,N, 0,P)其复合主键为(A,B)那么 N,O,P 这三个非键属性都不存在只依赖 A 或只依赖 B 情况，则该关系满足第 2 范式，反之，不满足第 2 范式。 我们有一个关系模式 R，它的属性集 U 包括 {学生 ID, 课程 ID, 学生姓名, 课程名, 教师}，复合主键为(学生 ID,课程 ID)，然而学生姓名只依赖于学生 ID，课程名和教师只依赖于课程 ID，那么学生姓名和课程名、教师之间存在部分函数依赖，不满足第 2 范式。 第 3 范式（3NF）如果关系满足第 2 范式，并切断了关系中的属性传递函数依赖，该关系满足第 3 范式。 {学号，姓名，系名，住址(宿舍地址)，电话，电子邮件}，其中学号决定系名，系名决定宿舍地址，故学号决定宿舍地址，存在传递依赖，不满足第 3 范式;可以对学生关系表再次分解为学生和系信息关系表 Boyce-Codd 范式（BCNF）在关系中，所有函数依赖的决定因子都是候选键，该关系满足 BCNF 范式 第 4 范式（4NF）如果关系满足 BCNF 范式，并消除了多值函数依赖，该关系满足第 4 范式。 逆规范化处理所谓逆规范化，就是适当降低规范化范式约束，不再要求一个关系表必须达到很高的规范化程度，而是允许适当的数据冗余性，以获取数据访问性能。逆规范化处理的基本方法：（1）增加冗余列或派生列（2）多个关系表合并为一个关系表","link":"/UESTC/DataBase/Ch4-DbDesign/"},{"title":"ChⅥ 数据库应用编程","text":"数据库连接技术ODBCODBC 是由 Microsoft 在 1990 年代初开发的，用于访问各种数据库系统的标准 API。ODBC 使用 SQL 作为数据库访问语言，允许应用程序独立于任何特定 DBMS，从而使得应用程序能够与多种 DBMS 进行交互。ODBC 驱动程序是一种实现了 ODBC 接口的特定 DBMS 的库。应用程序通过 ODBC 驱动程序与 DBMS 进行通信。 开放式数据库互连（Open DataBase Connectivity）实现了应用程序对多种不同 DBMS 的数据库的访问，实现了数据库连接方式的变革 是一套基于 SQL 的，公共的，与数据库无关的 API 使每个应用程序利用相同的源代码就可访问不同的数据库系统 存取多个数据库中的数据，从而使得应用程序与数据库管理系统之间在逻辑上独立，使应用程序与数据库无关性 JDBCJDBC 是 Java 中用于数据库连接的 API，由 Sun Microsystems（现在是 Oracle Corporation 的一部分）在 1997 年发布。JDBC 提供了一种基准，使得 Java 程序可以与多种关系数据库进行交互。JDBC 提供了一组接口和类，使得开发人员可以发送 SQL 语句并处理结果。JDBC 驱动程序是实现了 JDBC 接口的特定 DBMS 的 Java 类库。Java 程序通过 JDBC 驱动程序与 DBMS 进行通信。 JDBC 程序访问数据库的步骤 应用程序开始 导入 java.sql 包 加载并注册驱动程序 依次创建 Connection 对象、Statement 对象 执行 SQL 语句 使用 ResultSet 对象返回结果 依次关闭 ResultSet 对象、Statement 对象、Connection 对象 应用程序结束 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 实际开发中，密码不应该明文存储，应进行一定的数据脱敏处理。这也是为什么忘记密码时，只能重置密码，而不能查看密码的原因public class ProcessAccountData { ClassLoader classLoader = ProcessAccountData.class.getClassLoader(); final String sqlURL = &quot;jdbc:mysql://localhost:3306/free_chat?serverTimezone=GMT&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&quot;; final String user = &quot;root&quot;; final String password = &quot;gjxMySQLPWD&quot;; /** * @apiNote 对数据库,进行读取，写入到validUsers * @param validUsers 要写入账号数据的HashMap * @throws IOException */ public void readAccountFile(ConcurrentHashMap&lt;String, User&gt; validUsers) { try { Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;); } catch (ClassNotFoundException e) { e.printStackTrace(); return; } try (Connection conn = DriverManager.getConnection(sqlURL, user, password); Statement stmt = conn.createStatement()) { ResultSet rs = stmt.executeQuery(&quot;select * from accounts&quot;); while (rs.next()) { User user = new User(rs.getString(&quot;account&quot;), rs.getString(&quot;pwd&quot;)); validUsers.put(rs.getString(&quot;account&quot;), user); } } catch (SQLException e) { e.printStackTrace(); } } /** * @apiNote 当进行注册时，将userId＆pwd写入到数据库中 * @param userId 用户id * @param pwd 用户密码 * @throws IOException */ public void writeAccountFile(String userId, String pwd) { String sql = &quot;INSERT INTO accounts (account, pwd) VALUES (?, ?)&quot;; try (Connection conn = DriverManager.getConnection(sqlURL, user, password);) { PreparedStatement pstmt = conn.prepareStatement(sql); pstmt.setString(1, userId); pstmt.setString(2, pwd); pstmt.executeUpdate(); } catch (SQLException e) { e.printStackTrace(); } }} ServletServlet 是 Java Web 技术的核心组成部分，它是在服务器端运行的 Java 程序，用于处理来自 Web 客户端（如浏览器）的请求，并生成动态的 Web 内容。Servlet 是 Java EE 规范的一部分，但在 Java EE 8 之后，Java EE 已经转交给 Eclipse 基金会，并更名为 Jakarta EE。因此，最新的 Servlet 规范是 Jakarta Servlet。 以下是关于 Servlet 的一些关键点： 生命周期：Servlet 的生命周期从 Web 容器加载和实例化 Servlet 开始，经过处理一系列的请求，直到最后 Web 容器卸载 Servlet。主要的方法有 init(), service(), 和 destroy()。 处理请求：Servlet 可以处理来自客户端的 GET、POST 等 HTTP 请求，并根据请求生成相应的响应。请求和响应都被封装为 Java 对象，分别是 HttpServletRequest 和 HttpServletResponse。 线程安全：对于每个新的请求，Servlet 容器会启动一个新的线程来处理。因此，Servlet 必须被设计为线程安全的。 配置和上下文：Servlet 可以通过 ServletConfig 和 ServletContext 接口访问配置信息和应用程序级别的上下文。 会话管理：Servlet 提供了 HttpSession 接口来管理与特定用户相关的会话。 过滤器和监听器：Servlet API 还提供了过滤器（Filter）和监听器（Listener）等组件，可以用于拦截请求、响应，或者监听 Servlet 的生命周期事件等。 Servlet 工作流程 MybatisMyBatis 是一个优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码和参数的手动设置以及结果集的检索。MyBatis 可以使用简单的 XML 或注解进行配置，并将原生信息映射至 Java 对象。MyBatis 通常被视为介于全自动 ORM 框架（如 Hibernate）和手动处理所有事情的 JDBC 之间的一种解决方案。 Mybatis 优点： 支持自定义 SQL、存储过程、及高级映射 实现自动对 SQL 的参数设置 实现自动对结果集进行解析和封装 通过 XML 或者注解进行配置和映射，大大减少代码量 数据源的连接信息通过配置文件进行配置 JSPJSP 全名为 Java Server Pages，java 服务器页面。JSP 是一种基于文本的程序，其特点就是 HTML 和 Java 代码共同存在jsp 只是 servlet 的一种特殊形式，每一个 jsp 页面就是一个 servlet 实例，通俗一点的话来说：jsp 就是 servlet，只不过 servlet 把一些业务功能剥离开来交给了或者是形成了 jsp。在我们的项目编译的时候就是把 jsp 编译成了 servlet。JSP 比 Servlet 更方便更简单的一个重要原因就是：内置了 9 个对象！内置对象有：out、session、response、request、config、page、application、pageContext、exception SSM 典型 Java web 开发架构 JSP/HTML 页面发送请求 Controller 层接收用户请求，进行响应的流程处理 Service 层完成具体的业务逻辑 DAO(Data Access Object)层对数据库进行操作 数据库 数据库存储过程存储过程（Stored Procedure）是一种数据库的对象。由一组能完成特定功能的 SQL 语句集构成，是把经常会被重复使用的 SQL 语句逻辑块封装起来，经编译后，存储在数据库服务器端；当被再次调用时，不需要再次编译； 当客户端连接到数据库时，用户通过指定存储过程的名字并给出参数，数据库就可以找到相应的存储过程予以调用。 PostgreSQL 使用 CREATE FUNCTION 命令创建存储过程。(11 版本后可以用 CREATE PRECEDURE) Pros(1) 减少网络通信量(2) 执行速度更快(3) 更强的适应性(4) 降低了业务实现与应用程序的耦合(5) 降低了开发的复杂性(6) 保护数据库元信息(7) 增强了数据库的安全性Cons(1) SQL 本身是一种结构化查询语言，而存储过程本质上是过程化的程序；面对复杂的业务逻辑，过程化处理逻辑相对比较复杂；而 SQL 语言的优势是面向数据查询而非业务逻辑的处理。(2) 如果存储过程的参数或返回数据发生变化，一般需要修改存储过程的代码，同时还需要更新主程序调用存储过程的代码。(3) 开发调试复杂，由于缺乏支持存储过程的集成开发环境，存储过程的开发调试要比一般程序困难。(4) 可移植性差 12345678910111213141516171819202122232425262728293031323334--创建存储过程CREATE [ OR REPLACE ] FUNCTION/PROCEDURE name([ [ argmode ] [ argname ] argtype [ { DEFAULT | = } default_expr ] [, ...] ]) [ RETURNS retype | RETURNS TABLE ( column_name column_type [, ...] ) ] AS $$ -- $$用于声明存储过程的实际代码的开始DECLARE -- 声明段BEGIN --函数体语句END; $$ LANGUAGE lang_name; --$$ 表明代码的结束, LANGUAGE后面指明所用的编程语言'''主要参数：（1）name：要创建的存储过程名；（2）OR REPLACE ：覆盖同名的存储过程；（3）argmode：存储过程参数的模式可以为IN、OUT或INOUT，缺省值是IN。（4）argname：形式参数的名字。（5）RETURNS：返回值；RETURNS TABLE：返回二维表'''--删除存储过程DROP FUNCTION [ IF EXISTS ] name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) [CASCADE | RESTRICT ]'''主要参数：（1）IF EXISTS：如果指定的存储过程不存在，那么发出提示信息。（2）name ：现存的存储过程名称。（3）argmode：参数的模式：IN(缺省), OUT, INOUT, VARIADIC。请注意，实际并不注明OUT参数，因为判断存储过程的身份只需要输入参数。（4）argname：参数的名字。请注意，实际上并不注明参数的名字，因为判断函数的身份只需要输入参数的数据类型。（5）argtype：如果有的话，是存储过程参数的类型。（6）CASCADE：级联删除依赖于存储过程的对象(如触发器)。（7）RESTRICT：如果有任何依赖对象存在，则拒绝删除该函数；这个是缺省值。''' PL\\pgSQL syntax 变量声明的语法如下：declare变量名 变量类型；如果声明变量为记录类型，变量声明格式为： variable_name RECORD;注：RECORD 不是真正的数据类型，只是一个占位符。 123declare count intger; rec RECORD; condition statement 12345678910111213141516171819202122'''IF-THENIF-THEN-ELSEIF-THEN-ELSEIF-ELSE'''IF condition THEN statement;END IF;IF condition THEN statement;ELSE statement;END IF;IF condition1 THEN statement;ELSEIF condition2 THEN statement;ELSE statement;END IF; loop 123456789101112131415161718192021222324252627282930313233LOOP statement;END LOOP [label];LOOP i = i + 1; EXIT WHEN i &gt; 10;END LOOP;LOOP i = i + 1; EXIT WHEN i &gt; 100; CONTINUE WHEN i &lt; 50; j = j + 1;END LOOP;WHILE condition LOOP statement;END LOOPFOR i IN 1..10 LOOP RAISE NOTICE 'i = %', i;END LOOP;create function Out_Record() returns RECORD as $$declare rec RECORD;FOR rec IN SELECT * FROM student LOOP raise notice '学生数据: %,%',rec.studentID,rec.studentName; END LOOP;return rec;end;$$ language plpgsql; return type在 SQL 和 PL/pgSQL 中，函数可以返回以下几种类型的值： 标量（Scalar）：这是最简单的返回类型，可以是任何基本数据类型，如 INTEGER，VARCHAR，BOOLEAN 等。 12345CREATE FUNCTION add_one(INTEGER) RETURNS INTEGER AS $$BEGIN RETURN $1 + 1;END;$$ LANGUAGE plpgsql; 记录（Record）：函数可以返回一个完整的记录，这个记录的结构通常与一个已存在的表相同。 12345678910CREATE FUNCTION get_employee(INTEGER) RETURNS employee AS $$BEGIN DECLARE rec employee%ROWTYPE; BEGIN SELECT * INTO rec FROM employee WHERE id = $1; RETURN rec; END;END;$$ LANGUAGE plpgsql; 表（Table）：函数还可以返回一个表，即多个记录。这个表可以有自定义的结构，也可以与一个已存在的表相同。 12345CREATE FUNCTION get_employees() RETURNS TABLE(id INTEGER, name VARCHAR) AS $$BEGIN RETURN QUERY SELECT id, name FROM employee;END;$$ LANGUAGE plpgsql; 触发器（Trigger）：在 PostgreSQL 中，触发器函数必须声明为返回 TRIGGER。 12345678CREATE FUNCTION check_update() RETURNS TRIGGER AS $$BEGIN IF NEW.updated_at &lt; OLD.updated_at THEN RAISE EXCEPTION 'Update timestamp must be newer'; END IF; RETURN NEW;END;$$ LANGUAGE plpgsql; 复杂类型（Composite Types）：函数可以返回一个自定义的复合类型。 1234567CREATE TYPE my_type AS (f1 integer, f2 text);CREATE FUNCTION return_compound() RETURNS my_type AS $$BEGIN RETURN ROW(1,'test')::my_type;END;$$ LANGUAGE plpgsql; Void：如果函数不需要返回任何值，可以使用 VOID 类型。 12345CREATE FUNCTION log_message(text) RETURNS VOID AS $$BEGIN RAISE NOTICE '%', $1;END;$$ LANGUAGE plpgsql; Examples 统计学生表中有多少 records 1234567891011CREATE OR REPLACE FUNCTION countRecords ()RETURNS integer AS $$declare count integer;BEGIN SELECT count(*) INTO count FROM STUDENT; -- INTO 用于将查询结果赋值给变量 RETURN count;END;$$ LANGUAGE plpgsql;-- 执行存储过程SELECT * FROM countRecords(); 如果 grade 大于等于 60 分视为该学生取得相应学分，编写 sql 代码统计每个 学生取得的总学分，包含学号、姓名、总学分；Course（courseid，coursename，credit）Grade（gradeid，studentid，courseid，grade）Student（studentid，studentname，sex，age） 12345678910111213141516171819202122232425262728293031CREATE OR REPLACE FUNCTION getcredit0() RETURNS TABLE( vsid CHAR, vsname VARCHAR, vscredit BIGINT )AS $vscredit$BEGIN -- 这是主查询，它将从course，grade和student表中获取信息， -- 并计算每个学生的总学分（只包括成绩大于或等于60的课程）。 RETURN QUERY SELECT C.studentid AS &quot;vsid&quot;, C.studentname AS &quot;vsname&quot;, SUM(A.credit) AS &quot;vscredit&quot; FROM COURSE AS A, GRADE AS B, STUDENT AS C WHERE B.studentid = C.studentid AND A.courseid = B.courseid AND B.grade &gt;= 60 GROUP BY C.studentid;END;$vscredit$ LANGUAGE plpgsql;-- 调用函数SELECT getcredit0(); 创建一个名为 add_data(a, b，c)的存储过程实现 a+b 相加运算，并将结果放入 c 12345CREATE OR REPLACE PROCEDURE add_data(a integer,b integer,inout c integer)AS $$Begin c=a+b;End;$$LANGUAGE plpgsql; 数据库触发器触发器是一个定义在表或视图上的特殊类型的存储过程（不传递接受参数）、一个特殊的事务单位，由操作事件触发自动执行，可以实现比约束更复杂的数据完整性，用于加强数据完整性约束和业务规则 语句级触发器只执行一次（默认触发器）；行级触发器每有数据变化一行就执行一次 INSTEAD OF触发器：事件发生时只执行触发器不执行原本的sql语句，一个表或视图只能有一个INSTEAD OF触发器 NEW：RECORD类型，对于行级触发器其存有INSERT或UPDATE操作产生的新数据行。对于语句级触发器其值为NULL OLD：RECORD类型，对于行级触发器其存有DELETE或UPDATE操作修改或删除的旧数据行。对于语句级触发器其值为NULL TG_OP:text类型，值为INSERT/UPDATE/DELETE，说明引发触发器的操作 创建触发器步骤： 检查所依附的表或视图是否存在 创建触发器执行的触发器函数，返回类型为TRIGGER 创建触发器 12345678910111213141516171819202122232425262728293031323334353637383940414243444546-- 创建表CREATE TABLE stu_score( sid character(10) NOT NULL, cid character(10) NOT NULL, score numeric(5,1), CONSTRAINT stu_score_pkey PRIMARY KEY (sid, cid))CREATE TABLE audit_score( username character(20) , --用户名 sid character(10) , cid character(10) , updatetime text , --修改的时间 oldscore numeric(5,1), --修改前的成绩 newscore numeric(5,1) --修改后的成绩)-- 创建函数CREATE OR REPLACE FUNCTION score_audit RETURNS TRIGGER AS $score_sudits$BEGIN IF (TG_OP = 'DELETE') THEN INSERT INTO audit_score SELECT user,old.sid,old.cid,OLD.score ; RETURN OLD; ELSIF (TG_OP = 'UPDATE') THEN INSERT INTO audit_score SELECT user,old.sid,old.cid,now(),OLD.score,new.score WHERE old.sid=new.sid and old.cid=new.cid; RETURN NEW ELSIF (TG_OP = 'INSERT') THEN INSERT INTO audit_score SELECT user,new.sid,new.cid,now(),null,new.score; RETURN NEW; END IF; RETURN NULL;END;$score_audits$ LANGUAGE plpgsql;-- 创建触发器CREATE TRIGGER score_audit_trigerAFTER INSERT OR UPDATE OR DELETE ON stu_scoreFOR EACH ROW EXECUTE PROCEDURE score_audit();-- 修改触发器ALTER TRIGGER score_audit_trigger ON stu_score RENAME TO score_audit_trig;-- 删除触发器DROP TRIGGER [ IF EXISTS ] name ON table_name [ CASCADE | RESTRICT ]DROP TRIGGER IF EXISTS score_audit_trig ON stu_score CASCADE; 数据库游标游标是一种存放了查询数据库表返回的数据记录的临时的数据库对象，包含查询结果和指针，提供了处理结果集中每一条记录的机制，它总是与一条查询SQL语句相关联 12345678910111213-- 声明游标curStudent CURSOR FOR SELECT * FROM student;curStudentOne CURSOR (key integer)7y IS SELECT * FROM student WHERE SID = key;-- 打开游标OPEN curVars1 FOR SELECT * FROM student WHERE SID = mykey;OPEN curVars1 FOR EXECUTE 'SELECT * FROM ' || quote_ident($1);OPEN curStudent;OPEN curStudentOne ('20160230302001'); -- 使用游标提取值FETCH curVars1 INTO rowvar; --rowvar为行变量FETCH curStudent INTO SID, Sname, sex;-- 关闭游标 CLOSE cursorName; RefJava Web Servlet 详解 cnblog","link":"/UESTC/DataBase/Ch6-DbPrograming/"},{"title":"Java Web —— Tomcat","text":"Apache Tomcat 简介Tomcat对外扮演的角色是 Web 服务器，它接收客户端的请求，将请求转发给 Tomcat 的核心容器进行处理，处理完后再将响应返回给客户端。对内部，Tomcat 扮演 Servlet 容器的角色，负责处理 Servlet 请求。Servlet 是 Java Servlet 的简称，是一种用 Java 编写的服务器端程序，主要用于创建动态网页内容和处理客户端请求。 Apache 本义是一个北美原住民部落的名字。在 19 世纪美洲印第安人战争期间的对抗中，美国陆军发现阿帕奇十分凶猛善战 此处 Apache 指的是 Apache Software Foundation (ASF) 是一家美国非营利性公司,成立于 1999 年 目录结构 bin 包含启动和停止 Tomcat 服务器所需的脚本文件,.bat for Windows, .sh for Unix/Linux conf Configuration files for the Tomcat server server.xml：定义 Tomcat 服务器的全局设置，包括端口、连接器、引擎、虚拟主机等。 web.xml：定义所有 Web 应用程序的默认配置，如错误页面、MIME 类型等。 tomcat-users.xml：包含 Tomcat 用户账号和角色定义，用于管理访问控制。 context.xml：定义所有 Web 应用的共享默认上下文配置。 lib 存放 Tomcat 服务器运行所需的共享库文件（JAR 包）。这些库对所有部署在 Tomcat 上的 Web 应用都可用。 logs 运行日志 webapps 默认的 Web 应用程序部署目录。将 WAR 文件或直接将 Web 应用的文件夹放置于此目录下，Tomcat 会自动部署它们。 1.2 核心组件 Catalina：是 Tomcat 的核心容器，负责处理 Servlet 请求。 Connector：连接器，负责接收客户端请求并将其转发给 Catalina 进行处理，处理完后再将响应返回客户端。 Engine、Host、Context：构成层次化的 Web 应用部署结构，分别代表整个引擎、虚拟主机和单个 Web 应用。 Jasper：用于编译 JSP 页面为 Servlet。 部署 Web 应用直接部署将 Web 应用打包成 WAR 文件或直接放置在webapps目录下，Tomcat 会自动部署。 配置文件部署通过修改server.xml或在conf/Catalina/localhost下创建对应的.xml文件来配置更复杂的部署需求。 Tomcat 管理管理界面默认情况下，Tomcat 提供了管理界面，可通过http://localhost:8080/manager/html访问。需要在tomcat-users.xml中配置管理员用户。 安全配置确保禁用或保护管理界面，修改默认端口，强化用户权限管理，定期更新以修复安全漏洞。 五、性能优化与监控JVM 调优调整 JVM 参数，如堆内存大小(-Xms, -Xmx)，垃圾收集策略等，以提高性能。 连接器优化调整连接器参数，如最大线程数(maxThreads)、接受缓冲区大小(acceptCount)等。 监控工具利用 Tomcat 自带的管理工具、JMX 或第三方工具如 VisualVM、JProfiler 监控系统状态。 进阶话题Clustering 与 Session 复制为了实现高可用和负载均衡，Tomcat 支持集群配置，通过 Session 复制或分布式缓存共享会话信息。 SSL 配置为 Web 应用启用 HTTPS，保护数据传输安全。需配置 SSL 证书并调整连接器设置。 AJP 连接器与反向代理与 Apache HTTP Server 集成，通过 AJP 协议提高静态资源处理效率和安全性。 结语Tomcat 作为 Java Web 开发的基石，其灵活性和可扩展性使其成为开发者手中的利器。无论是初学者还是资深工程师，深入理解 Tomcat 的工作原理和最佳实践都将大大提升开发效率和应用性能。随着技术的不断演进，持续学习 Tomcat 的新特性和优化技巧是每个 Java Web 开发者不可或缺的任务。希望本文能为您的 Tomcat 学习之旅提供一份有价值的指南。 Refwiki-The_Apache_Software_Foundation","link":"/Dev/Java/Web/Tomcat/"}],"tags":[{"name":"中国古代诗词","slug":"中国古代诗词","link":"/tags/%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BB%A3%E8%AF%97%E8%AF%8D/"},{"name":"DataBase","slug":"DataBase","link":"/tags/DataBase/"},{"name":"SQL","slug":"SQL","link":"/tags/SQL/"},{"name":"Glossary","slug":"Glossary","link":"/tags/Glossary/"},{"name":"Others","slug":"Others","link":"/tags/Others/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Hashtable","slug":"Hashtable","link":"/tags/Hashtable/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Shortcuts","slug":"Shortcuts","link":"/tags/Shortcuts/"},{"name":"Productivity","slug":"Productivity","link":"/tags/Productivity/"},{"name":"VSCode","slug":"VSCode","link":"/tags/VSCode/"},{"name":"Extensions","slug":"Extensions","link":"/tags/Extensions/"},{"name":"CyberPunk2077","slug":"CyberPunk2077","link":"/tags/CyberPunk2077/"},{"name":"Music","slug":"Music","link":"/tags/Music/"},{"name":"Games","slug":"Games","link":"/tags/Games/"},{"name":"ARM","slug":"ARM","link":"/tags/ARM/"},{"name":"ComputerNetworking","slug":"ComputerNetworking","link":"/tags/ComputerNetworking/"},{"name":"OS","slug":"OS","link":"/tags/OS/"},{"name":"Web","slug":"Web","link":"/tags/Web/"}],"categories":[{"name":"Dev","slug":"Dev","link":"/categories/Dev/"},{"name":"DataBase","slug":"Dev/DataBase","link":"/categories/Dev/DataBase/"},{"name":"FrontEnd","slug":"Dev/FrontEnd","link":"/categories/Dev/FrontEnd/"},{"name":"Linux","slug":"Dev/Linux","link":"/categories/Dev/Linux/"},{"name":"Java","slug":"Dev/Java","link":"/categories/Dev/Java/"},{"name":"Git","slug":"Dev/Git","link":"/categories/Dev/Git/"},{"name":"Others","slug":"Dev/Others","link":"/categories/Dev/Others/"},{"name":"VSCode","slug":"Dev/VSCode","link":"/categories/Dev/VSCode/"},{"name":"Game","slug":"Game","link":"/categories/Game/"},{"name":"Eaasy","slug":"Eaasy","link":"/categories/Eaasy/"},{"name":"UESTC","slug":"UESTC","link":"/categories/UESTC/"},{"name":"Poems","slug":"Eaasy/Poems","link":"/categories/Eaasy/Poems/"},{"name":"ARM处理器体系结构及应用","slug":"UESTC/ARM处理器体系结构及应用","link":"/categories/UESTC/ARM%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%8F%8A%E5%BA%94%E7%94%A8/"},{"name":"Computer Networking","slug":"UESTC/Computer-Networking","link":"/categories/UESTC/Computer-Networking/"},{"name":"OS","slug":"UESTC/OS","link":"/categories/UESTC/OS/"},{"name":"数据库原理及应用","slug":"UESTC/数据库原理及应用","link":"/categories/UESTC/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"}],"pages":[{"title":"","text":"h1 { font-family: Consolas; color: #82aaff; text-align: center; font-style: bold; /* font-size: 3em; */ } div.intro-container { background-color:rgba(34, 36, 54, 0.1); border: 1px solid rgba(0, 0, 0, 0.1); /* 更改边框颜色和透明度 */ padding: 20px; width: auto; margin-left: 15px; margin-right: 15px; border-radius: 12px; box-shadow: 10px 10px 5px rgba(0, 0, 0, 0.2); } p.intro::first-letter { font-size: 3em; line-height: 0.8; float: left; padding-top: 0.1em; padding-right: 0.1em; font-style: bold; } p.intro:hover::first-letter { color: #86e1fc; font-size: 3em; line-height: 0.8; float: left; padding-top: 0.1em; padding-right: 0.1em; font-style: bold; } p.intro { color: #82aaff; line-height: 1.5; text-align: left; font-family: Consolas; font-style: bold; } .title_card { display: flex; position: relative; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); transition: 0.3s; width: auto; height: 100%; border-radius: 10px; overflow: hidden; align-items: center; justify-content: center; margin-left: 15px; margin-right: 15px; } .title_card:hover { box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2); } .title_card_text { position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; align-items: center; /* 垂直居中 */ justify-content: center; /* 水平居中 */ color: white; /* 将文字颜色设置为白色 */ opacity: 0; transition: opacity 0.3s; font-family: 'Trebuchet MS'; /* 将字体设置为Arial */ text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); /* 添加文字阴影 */ } .title_card:hover .title_card_text { opacity: 0.9; animation: jelly 0.5s; } @keyframes jelly { 0%, 100% { transform: scale(1, 1); } 25% { transform: scale(0.9, 1.1); } 50% { transform: scale(1.1, 0.9); } 75% { transform: scale(0.95, 1.05); } } ABOUT 🐳Welcome To My Website! Glad to have you here as we surf the Internet. This website is not just a platform for me to express my thoughts and ideas, but also a place where I hope to connect with people who share similar interests or are simply curious about the world. Just here, I will delve into topics that fascinate me, share stories from my personal experiences, and offer insights that I've gained along the way. Whether it's about my latest adventures, reflections on life, or thoughts on various topics, I hope to provide content that is engaging and thought-provoking. Xplore this site, leave comments, ask questions, share experiences. We can learn from each other, and I'm excited to hear from you.Once again, thank you for visiting. I hope you find something here that resonates with you, inspires you, or simply makes you think. Enjoy exploring! 🔗About This Site 📝Embark on a voyage through my educational explorations 📖Plunge into the chapters of my bookish journeys 🎮Venture into the digital landscapes of my gaming exploits 🦋Feast your eyes on the captivating imagery 💡Insights from my Tech Learning Journey","link":"/about/index.html"},{"title":"","text":"基础篇通用语法及分类 DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段） DML: 数据操作语言，用来对数据库表中的数据进行增删改 DQL: 数据查询语言，用来查询数据库中表的记录 DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限 DDL（数据定义语言）数据定义语言 数据库操作查询所有数据库：SHOW DATABASES;查询当前数据库：SELECT DATABASE();创建数据库：CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];删除数据库：DROP DATABASE [ IF EXISTS ] 数据库名;使用数据库：USE 数据库名; 注意事项 UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集 表操作查询当前数据库所有表：SHOW TABLES;查询表结构：DESC 表名;查询指定表的建表语句：SHOW CREATE TABLE 表名; 创建表： 1234567CREATE TABLE 表名( 字段1 字段1类型 [COMMENT 字段1注释], 字段2 字段2类型 [COMMENT 字段2注释], 字段3 字段3类型 [COMMENT 字段3注释], ... 字段n 字段n类型 [COMMENT 字段n注释])[ COMMENT 表注释 ]; 最后一个字段后面没有逗号 添加字段：ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];例：ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称'; 修改数据类型：ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);修改字段名和字段类型：ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];例：将emp表的nickname字段修改为username，类型为varchar(30)ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称'; 删除字段：ALTER TABLE 表名 DROP 字段名; 修改表名：ALTER TABLE 表名 RENAME TO 新表名 删除表：DROP TABLE [IF EXISTS] 表名;删除表，并重新创建该表：TRUNCATE TABLE 表名; DML（数据操作语言）添加数据指定字段：INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);全部字段：INSERT INTO 表名 VALUES (值1, 值2, ...); 批量添加数据：INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...); 注意事项 字符串和日期类型数据应该包含在引号中 插入的数据大小应该在字段的规定范围内 更新和删除数据修改数据：UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];例：UPDATE emp SET name = 'Jack' WHERE id = 1; 删除数据：DELETE FROM 表名 [ WHERE 条件 ]; DQL（数据查询语言）语法： 1234567891011121314SELECT 字段列表FROM 表名字段WHERE 条件列表GROUP BY 分组字段列表HAVING 分组后的条件列表ORDER BY 排序字段列表LIMIT 分页参数 基础查询查询多个字段：SELECT 字段1, 字段2, 字段3, ... FROM 表名;SELECT * FROM 表名; 设置别名：SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名; 去除重复记录：SELECT DISTINCT 字段列表 FROM 表名; 转义：SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'/ 之后的_不作为通配符 条件查询语法：SELECT 字段列表 FROM 表名 WHERE 条件列表; 条件： 比较运算符 功能 &gt; 大于 &gt;= 大于等于 &lt; 小于 &lt;= 小于等于 = 等于 &lt;&gt; 或 != 不等于 BETWEEN … AND … 在某个范围内（含最小、最大值） IN(…) 在in之后的列表中的值，多选一 LIKE 占位符 模糊匹配（_匹配单个字符，%匹配任意个字符） IS NULL 是NULL 逻辑运算符 功能 AND 或 &amp;&amp; 并且（多个条件同时成立） OR 或 || 或者（多个条件任意一个成立） NOT 或 ! 非，不是 例子： 123456789101112131415161718192021222324252627-- 年龄等于30select * from employee where age = 30;-- 年龄小于30select * from employee where age &lt; 30;-- 小于等于select * from employee where age &lt;= 30;-- 没有身份证select * from employee where idcard is null or idcard = '';-- 有身份证select * from employee where idcard;select * from employee where idcard is not null;-- 不等于select * from employee where age != 30;-- 年龄在20到30之间select * from employee where age between 20 and 30;select * from employee where age &gt;= 20 and age &lt;= 30;-- 下面语句不报错，但查不到任何信息select * from employee where age between 30 and 20;-- 性别为女且年龄小于30select * from employee where age &lt; 30 and gender = '女';-- 年龄等于25或30或35select * from employee where age = 25 or age = 30 or age = 35;select * from employee where age in (25, 30, 35);-- 姓名为两个字select * from employee where name like '__';-- 身份证最后为Xselect * from employee where idcard like '%X'; 聚合查询（聚合函数）常见聚合函数： 函数 功能 count 统计数量 max 最大值 min 最小值 avg 平均值 sum 求和 语法：SELECT 聚合函数(字段列表) FROM 表名;例：SELECT count(id) from employee where workaddress = &quot;广东省&quot;; 分组查询语法：SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ]; where 和 having 的区别： 执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。 判断条件不同：where不能对聚合函数进行判断，而having可以。 例子： 12345678910-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）select count(*) from employee group by gender;-- 根据性别分组，统计男性和女性数量select gender, count(*) from employee group by gender;-- 根据性别分组，统计男性和女性的平均年龄select gender, avg(age) from employee group by gender;-- 年龄小于45，并根据工作地址分组select workaddress, count(*) from employee where age &lt; 45 group by workaddress;-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3; 注意事项 执行顺序：where &gt; 聚合函数 &gt; having 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义 排序查询语法：SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2; 排序方式： ASC: 升序（默认） DESC: 降序 例子： 12345-- 根据年龄升序排序SELECT * FROM employee ORDER BY age ASC;SELECT * FROM employee ORDER BY age;-- 两字段排序，根据年龄升序排序，入职时间降序排序SELECT * FROM employee ORDER BY age ASC, entrydate DESC; 注意事项如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 分页查询语法：SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数; 例子： 1234-- 查询第一页数据，展示10条SELECT * FROM employee LIMIT 0, 10;-- 查询第二页SELECT * FROM employee LIMIT 10, 10; 注意事项 起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数 分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT 如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10 DQL执行顺序FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT DCL管理用户查询用户： 12USE mysql;SELECT * FROM user; 创建用户:CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码'; 修改用户密码：ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码'; 删除用户：DROP USER '用户名'@'主机名'; 例子： 123456789-- 创建用户test，只能在当前主机localhost访问create user 'test'@'localhost' identified by '123456';-- 创建用户test，能在任意主机访问create user 'test'@'%' identified by '123456';create user 'test' identified by '123456';-- 修改密码alter user 'test'@'localhost' identified with mysql_native_password by '1234';-- 删除用户drop user 'test'@'localhost'; 注意事项 主机名可以使用 % 通配 权限控制常用权限： 权限 说明 ALL, ALL PRIVILEGES 所有权限 SELECT 查询数据 INSERT 插入数据 UPDATE 修改数据 DELETE 删除数据 ALTER 修改表 DROP 删除数据库/表/视图 CREATE 创建数据库/表 更多权限请看权限一览表 查询权限：SHOW GRANTS FOR '用户名'@'主机名'; 授予权限：GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名'; 撤销权限：REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名'; 注意事项 多个权限用逗号分隔 授权时，数据库名和表名可以用 * 进行通配，代表所有 函数 字符串函数 数值函数 日期函数 流程函数 字符串函数常用函数： 函数 功能 CONCAT(s1, s2, …, sn) 字符串拼接，将s1, s2, …, sn拼接成一个字符串 LOWER(str) 将字符串全部转为小写 UPPER(str) 将字符串全部转为大写 LPAD(str, n, pad) 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度 RPAD(str, n, pad) 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度 TRIM(str) 去掉字符串头部和尾部的空格 SUBSTRING(str, start, len) 返回从字符串str从start位置起的len个长度的字符串 REPLACE(column, source, replace) 替换字符串 使用示例： 1234567891011121314-- 拼接SELECT CONCAT('Hello', 'World');-- 小写SELECT LOWER('Hello');-- 大写SELECT UPPER('Hello');-- 左填充SELECT LPAD('01', 5, '-');-- 右填充SELECT RPAD('01', 5, '-');-- 去除空格SELECT TRIM(' Hello World ');-- 切片（起始索引为1）SELECT SUBSTRING('Hello World', 1, 5); 数值函数常见函数： 函数 功能 CEIL(x) 向上取整 FLOOR(x) 向下取整 MOD(x, y) 返回x/y的模 RAND() 返回0~1内的随机数 ROUND(x, y) 求参数x的四舍五入值，保留y位小数 日期函数常用函数： 函数 功能 CURDATE() 返回当前日期 CURTIME() 返回当前时间 NOW() 返回当前日期和时间 YEAR(date) 获取指定date的年份 MONTH(date) 获取指定date的月份 DAY(date) 获取指定date的日期 DATE_ADD(date, INTERVAL expr type) 返回一个日期/时间值加上一个时间间隔expr后的时间值 DATEDIFF(date1, date2) 返回起始时间date1和结束时间date2之间的天数 例子： 12-- DATE_ADDSELECT DATE_ADD(NOW(), INTERVAL 70 YEAR); 流程函数常用函数： 函数 功能 IF(value, t, f) 如果value为true，则返回t，否则返回f IFNULL(value1, value2) 如果value1不为空，返回value1，否则返回value2 CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END 如果val1为true，返回res1，… 否则返回default默认值 CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END 如果expr的值等于val1，返回res1，… 否则返回default默认值 例子： 12345678select name, (case when age &gt; 30 then '中年' else '青年' end)from employee;select name, (case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'from employee; 约束分类： 约束 描述 关键字 非空约束 限制该字段的数据不能为null NOT NULL 唯一约束 保证该字段的所有数据都是唯一、不重复的 UNIQUE 主键约束 主键是一行数据的唯一标识，要求非空且唯一 PRIMARY KEY 默认约束 保存数据时，如果未指定该字段的值，则采用默认值 DEFAULT 检查约束（8.0.1版本后） 保证字段值满足某一个条件 CHECK 外键约束 用来让两张图的数据之间建立连接，保证数据的一致性和完整性 FOREIGN KEY 约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。 常用约束 约束条件 关键字 主键 PRIMARY KEY 自动增长 AUTO_INCREMENT 不为空 NOT NULL 唯一 UNIQUE 逻辑条件 CHECK 默认值 DEFAULT 例子： 1234567create table user( id int primary key auto_increment, name varchar(10) not null unique, age int check(age &gt; 0 and age &lt; 120), status char(1) default '1', gender char(1)); 外键约束添加外键： 123456789CREATE TABLE 表名( 字段名 字段类型, ... [CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名));ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);-- 例子alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id); 删除外键：ALTER TABLE 表名 DROP FOREIGN KEY 外键名; 删除/更新行为 行为 说明 NO ACTION 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致） RESTRICT 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致） CASCADE 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录 SET NULL 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null） SET DEFAULT 父表有变更时，子表将外键设为一个默认值（Innodb不支持） 更改删除/更新行为：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为; 多表查询多表关系 一对多（多对一） 多对多 一对一 一对多案例：部门与员工关系：一个部门对应多个员工，一个员工对应一个部门实现：在多的一方建立外键，指向一的一方的主键 多对多案例：学生与课程关系：一个学生可以选多门课程，一门课程也可以供多个学生选修实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键 一对一案例：用户与用户详情关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE） 查询合并查询（笛卡尔积，会展示所有组合结果）：select * from employee, dept; 笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积） 消除无效笛卡尔积：select * from employee, dept where employee.dept = dept.id; 内连接查询内连接查询的是两张表交集的部分 隐式内连接：SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...; 显式内连接：SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...; 显式性能比隐式高 例子： 12345-- 查询员工姓名，及关联的部门的名称-- 隐式select e.name, d.name from employee as e, dept as d where e.dept = d.id;-- 显式select e.name, d.name from employee as e inner join dept as d on e.dept = d.id; 外连接查询左外连接：查询左表所有数据，以及两张表交集部分数据SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;相当于查询表1的所有数据，包含表1和表2交集部分数据 右外连接：查询右表所有数据，以及两张表交集部分数据SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...; 例子： 12345-- 左select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;select d.name, e.* from dept d left outer join emp e on e.dept = d.id; -- 这条语句与下面的语句效果一样-- 右select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id; 左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept 自连接查询当前表与自身的连接查询，自连接必须使用表别名 语法：SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...; 自连接查询，可以是内连接查询，也可以是外连接查询 例子： 1234-- 查询员工及其所属领导的名字select a.name, b.name from employee a, employee b where a.manager = b.id;-- 没有领导的也查询出来select a.name, b.name from employee a left join employee b on a.manager = b.id; 联合查询 union, union all把多次查询的结果合并，形成一个新的查询集 语法： 123SELECT 字段列表 FROM 表A ...UNION [ALL]SELECT 字段列表 FROM 表B ... 注意事项 UNION ALL 会有重复结果，UNION 不会 联合查询比使用or效率高，不会使索引失效 子查询SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个 根据子查询结果可以分为： 标量子查询（子查询结果为单个值） 列子查询（子查询结果为一列） 行子查询（子查询结果为一行） 表子查询（子查询结果为多行多列） 根据子查询位置可分为： WHERE 之后 FROM 之后 SELECT 之后 标量子查询子查询返回的结果是单个值（数字、字符串、日期等）。常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;= 例子： 123456789-- 查询销售部所有员工select id from dept where name = '销售部';-- 根据销售部部门ID，查询员工信息select * from employee where dept = 4;-- 合并（子查询）select * from employee where dept = (select id from dept where name = '销售部');-- 查询xxx入职之后的员工信息select * from employee where entrydate &gt; (select entrydate from employee where name = 'xxx'); 列子查询返回的结果是一列（可以是多行）。 常用操作符： 操作符 描述 IN 在指定的集合范围内，多选一 NOT IN 不在指定的集合范围内 ANY 子查询返回列表中，有任意一个满足即可 SOME 与ANY等同，使用SOME的地方都可以使用ANY ALL 子查询返回列表的所有值都必须满足 例子： 123456-- 查询销售部和市场部的所有员工信息select * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');-- 查询比财务部所有人工资都高的员工信息select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = '财务部'));-- 查询比研发部任意一人工资高的员工信息select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = '研发部')); 行子查询返回的结果是一行（可以是多列）。常用操作符：=, &lt;, &gt;, IN, NOT IN 例子： 123-- 查询与xxx的薪资及直属领导相同的员工信息select * from employee where (salary, manager) = (12500, 1);select * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx'); 表子查询返回的结果是多行多列常用操作符：IN 例子： 1234-- 查询与xxx1，xxx2的职位和薪资相同的员工select * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');-- 查询入职日期是2006-01-01之后的员工，及其部门信息select e.*, d.* from (select * from employee where entrydate &gt; '2006-01-01') as e left join dept as d on e.dept = d.id; 事务事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。 基本操作： 1234567891011121314151617181920212223-- 1. 查询张三账户余额select * from account where name = '张三';-- 2. 将张三账户余额-1000update account set money = money - 1000 where name = '张三';-- 此语句出错后张三钱减少但是李四钱没有增加模拟sql语句错误-- 3. 将李四账户余额+1000update account set money = money + 1000 where name = '李四';-- 查看事务提交方式SELECT @@AUTOCOMMIT;-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效SET @@AUTOCOMMIT = 0;-- 提交事务COMMIT;-- 回滚事务ROLLBACK;-- 设置手动提交后上面代码改为：select * from account where name = '张三';update account set money = money - 1000 where name = '张三';update account set money = money + 1000 where name = '李四';commit; 操作方式二： 开启事务：START TRANSACTION 或 BEGIN TRANSACTION;提交事务：COMMIT;回滚事务：ROLLBACK; 操作实例： 12345start transaction;select * from account where name = '张三';update account set money = money - 1000 where name = '张三';update account set money = money + 1000 where name = '李四';commit; 四大特性ACID 原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败 一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态 隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行 持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的 并发事务 问题 描述 脏读 一个事务读到另一个事务还没提交的数据 不可重复读 一个事务先后读取同一条记录，但两次读取的数据不同 幻读 一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在 这三个问题的详细演示：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd 并发事务隔离级别： 隔离级别 脏读 不可重复读 幻读 Read uncommitted √ √ √ Read committed × √ √ Repeatable Read(默认) × × √ Serializable × × × √表示在当前隔离级别下该问题会出现 Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差 查看事务隔离级别：SELECT @@TRANSACTION_ISOLATION;设置事务隔离级别：SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效 进阶篇存储引擎MySQL体系结构： 存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。默认存储引擎是InnoDB。 相关操作： 12345678-- 查询建表语句show create table account;-- 建表时指定存储引擎CREATE TABLE 表名( ...) ENGINE=INNODB;-- 查看当前数据库支持的存储引擎show engines; InnoDBInnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。 特点： DML 操作遵循 ACID 模型，支持事务 行级锁，提高并发访问性能 支持外键约束，保证数据的完整性和正确性 文件： xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。 参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间 知识点： 查看 Mysql 变量：show variables like 'innodb_file_per_table'; 从idb文件提取表结构数据：（在cmd运行）ibd2sdi xxx.ibd InnoDB 逻辑存储结构： MyISAMMyISAM 是 MySQL 早期的默认存储引擎。 特点： 不支持事务，不支持外键 支持表锁，不支持行锁 访问速度快 文件： xxx.sdi: 存储表结构信息 xxx.MYD: 存储数据 xxx.MYI: 存储索引 MemoryMemory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。 特点： 存放在内存中，速度快 hash索引（默认） 文件： xxx.sdi: 存储表结构信息 存储引擎特点 特点 InnoDB MyISAM Memory 存储限制 64TB 有 有 事务安全 支持 - - 锁机制 行锁 表锁 表锁 B+tree索引 支持 支持 支持 Hash索引 - - 支持 全文索引 支持（5.6版本之后） 支持 - 空间使用 高 低 N/A 内存使用 高 低 中等 批量插入速度 低 高 高 支持外键 支持 - - 存储引擎的选择在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。 InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择 MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。 Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性 电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。 性能分析查看执行频次查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：SHOW GLOBAL STATUS LIKE 'Com_______'; 或者 SHOW SESSION STATUS LIKE 'Com_______';例：show global status like 'Com_______' 慢查询日志慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息： # 开启慢查询日志开关 slow_query_log=1 # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志 long_query_time=2更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log 查看慢查询日志开关状态：show variables like 'slow_query_log'; profileshow profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：SELECT @@have_profiling;profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：SET profiling = 1;查看所有语句的耗时：show profiles;查看指定query_id的SQL语句各个阶段的耗时：show profile for query query_id;查看指定query_id的SQL语句CPU的使用情况show profile cpu for query query_id; explainEXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。语法： # 直接在select语句之前加上关键字 explain / desc EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件; EXPLAIN 各字段含义： id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行） select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等 type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all possible_key：可能应用在这张表上的索引，一个或多个 Key：实际使用的索引，如果为 NULL，则没有使用索引 Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好 rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的 filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好 索引索引是帮助 MySQL 高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。 优缺点： 优点： 提高数据检索效率，降低数据库的IO成本 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗 缺点： 索引列也是要占用空间的 索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE 索引结构 索引结构 描述 B+Tree 最常见的索引类型，大部分引擎都支持B+树索引 Hash 底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询 R-Tree(空间索引) 空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少 Full-Text(全文索引) 是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES 索引 InnoDB MyISAM Memory B+Tree索引 支持 支持 支持 Hash索引 不支持 不支持 支持 R-Tree索引 不支持 支持 不支持 Full-text 5.6版本后支持 支持 不支持 B-Tree 二叉树的缺点可以用红黑树来解决：红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。 为了解决上述问题，可以使用 B-Tree 结构。B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针） B-Tree 的数据插入过程动画参照：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68演示地址：https://www.cs.usfca.edu/~galles/visualization/BTree.html B+Tree结构图： 演示地址：https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html 与 B-Tree 的区别： 所有的数据都会出现在叶子节点 叶子节点形成一个单向链表 MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。 Hash哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。 特点： Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…） 无法利用索引完成排序操作 查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引 存储引擎支持： Memory InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的 面试题 为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？ 相对于二叉树，层级更少，搜索效率高 对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低 相对于 Hash 索引，B+Tree 支持范围匹配及排序操作 索引分类 分类 含义 特点 关键字 主键索引 针对于表中主键创建的索引 默认自动创建，只能有一个 PRIMARY 唯一索引 避免同一个表中某数据列中的值重复 可以有多个 UNIQUE 常规索引 快速定位特定数据 可以有多个 全文索引 全文索引查找的是文本中的关键词，而不是比较索引中的值 可以有多个 FULLTEXT 在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种： 分类 含义 特点 聚集索引(Clustered Index) 将数据存储与索引放一块，索引结构的叶子节点保存了行数据 必须有，而且只有一个 二级索引(Secondary Index) 将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键 可以存在多个 演示图： 聚集索引选取规则： 如果存在主键，主键索引就是聚集索引 如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引 如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引 思考题1. 以下 SQL 语句，哪个执行效率高？为什么？ 123select * from user where id = 10;select * from user where name = 'Arm';-- 备注：id为主键，name字段创建的有索引 答：第一条语句，因为第二条需要回表查询，相当于两个步骤。 2. InnoDB 主键索引的 B+Tree 高度为多少？ 答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.可得公式：n * 8 + (n + 1) * 6 = 16 * 1024，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。 如果树的高度为2，那么他能存储的数据量大概为：1171 * 16 = 18736；如果树的高度为3，那么他能存储的数据量大概为：1171 * 1171 * 16 = 21939856。 另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。 语法创建索引：CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引 查看索引：SHOW INDEX FROM table_name; 删除索引：DROP INDEX index_name ON table_name; 案例： 1234567891011-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引create index idx_user_name on tb_user(name);-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引create unique index idx_user_phone on tb_user (phone);-- 为profession, age, status创建联合索引create index idx_user_pro_age_stat on tb_user(profession, age, status);-- 为email建立合适的索引来提升查询效率create index idx_user_email on tb_user(email);-- 删除索引drop index idx_user_email on tb_user; 使用规则最左前缀法则如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将部分失效（后面的字段索引失效）。 联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。 索引失效情况 在索引列上进行运算操作，索引将失效。如：explain select * from tb_user where substring(phone, 10, 2) = '15'; 字符串类型字段使用时，不加引号，索引将失效。如：explain select * from tb_user where phone = 17799990015;，此处phone的值没有加引号 模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：explain select * from tb_user where profession like '%工程';，前后都有 % 也会失效。 用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。 如果 MySQL 评估使用索引比全表更慢，则不使用索引。 SQL 提示是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。 例如，使用索引：explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;不使用哪个索引：explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;必须使用哪个索引：explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;; use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。 覆盖索引&amp;回表查询尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。 explain 中 extra 字段含义：using index condition：查找使用了索引，但是需要回表查询数据using where; using index;：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询 如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如select id, name from xxx where name='xxx';，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如select id, name, gender from xxx where name='xxx'; 所以尽量不要用select *，容易出现回表查询，降低效率，除非有联合索引包含了所有字段 面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：select id, username, password from tb_user where username='itcast'; 解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引 前缀索引当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。 语法：create index idx_xxxx on table_name(columnn(n));前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。求选择性公式： 12select count(distinct email) / count(*) from tb_user;select count(distinct substring(email, 1, 5)) / count(*) from tb_user; show index 里面的sub_part可以看到接取的长度 单列索引&amp;联合索引单列索引：即一个索引只包含单个列联合索引：即一个索引包含了多个列在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。 单列索引情况：explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';这句只会用到phone索引字段 注意事项 多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询 设计原则 针对于数据量较大，且查询比较频繁的表建立索引 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高 如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询 SQL 优化插入数据普通插入： 采用批量插入（一次插入的数据不建议超过1000条） 手动提交事务 主键顺序插入 大批量插入：如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。 1234567# 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）mysql --local-infile -u root -p# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关set global local_infile = 1;select @@local_infile;# 执行load指令将准备好的数据，加载到表结构中load data local infile '/root/sql1.log' into table 'tb_user' fields terminated by ',' lines terminated by '\\n'; 主键优化数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT） 页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。 MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定 文字说明不够清晰明了，具体可以看视频里的PPT演示过程：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90 主键设计原则： 满足业务需求的情况下，尽量降低主键的长度 插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键 尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号 业务操作时，避免对主键的修改 order by优化 Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序 Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高 如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是Using index, Using filesort，如果要优化掉Using filesort，则需要另外再创建一个索引，如：create index idx_user_age_phone_ad on tb_user(age asc, phone desc);，此时使用select id, age, phone from tb_user order by age asc, phone desc;会全部走索引 总结： 根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则 尽量使用覆盖索引 多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC） 如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k） group by优化 在分组操作时，可以通过索引来提高效率 分组操作时，索引的使用也是满足最左前缀法则的 如索引为idx_user_pro_age_stat，则句式可以是select ... where profession order by age，这样也符合最左前缀法则 limit优化常见的问题如limit 2000000, 10，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化 例如： 12345678-- 此语句耗时很长select * from tb_sku limit 9000000, 10;-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询select id from tb_sku order by id limit 9000000, 10;-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id; count优化MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis count的几种用法： 如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值 用法：count(*)、count(主键)、count(字段)、count(1) count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0 各种用法的性能： count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空） count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加 count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加 count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加 按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*) update优化（避免行锁升级为表锁）InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。 如以下两条语句：update student set no = '123' where id = 1;，这句由于id有主键索引，所以只会锁这一行；update student set no = '123' where name = 'test';，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引 数据类型整型 类型名称 取值范围 大小 TINYINT -128〜127 1个字节 SMALLINT -32768〜32767 2个宇节 MEDIUMINT -8388608〜8388607 3个字节 INT (INTEGHR) -2147483648〜2147483647 4个字节 BIGINT -9223372036854775808〜9223372036854775807 8个字节 无符号在数据类型后加 unsigned 关键字。 浮点型 类型名称 说明 存储需求 FLOAT 单精度浮点数 4 个字节 DOUBLE 双精度浮点数 8 个字节 DECIMAL (M, D)，DEC 压缩的“严格”定点数 M+2 个字节 日期和时间 类型名称 日期格式 日期范围 存储需求 YEAR YYYY 1901 ~ 2155 1 个字节 TIME HH:MM:SS -838:59:59 ~ 838:59:59 3 个字节 DATE YYYY-MM-DD 1000-01-01 ~ 9999-12-3 3 个字节 DATETIME YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59 8 个字节 TIMESTAMP YYYY-MM-DD HH:MM:SS 1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC 4 个字节 字符串 类型名称 说明 存储需求 CHAR(M) 固定长度非二进制字符串 M 字节，1&lt;=M&lt;=255 VARCHAR(M) 变长非二进制字符串 L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255 TINYTEXT 非常小的非二进制字符串 L+1字节，在此，L&lt;2^8 TEXT 小的非二进制字符串 L+2字节，在此，L&lt;2^16 MEDIUMTEXT 中等大小的非二进制字符串 L+3字节，在此，L&lt;2^24 LONGTEXT 大的非二进制字符串 L+4字节，在此，L&lt;2^32 ENUM 枚举类型，只能有一个枚举字符串值 1或2个字节，取决于枚举值的数目 (最大值为65535) SET 一个设置，字符串对象可以有零个或 多个SET成员 1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员） 二进制类型 类型名称 说明 存储需求 BIT(M) 位字段类型 大约 (M+7)/8 字节 BINARY(M) 固定长度二进制字符串 M 字节 VARBINARY (M) 可变长度二进制字符串 M+1 字节 TINYBLOB (M) 非常小的BLOB L+1 字节，在此，L&lt;2^8 BLOB (M) 小 BLOB L+2 字节，在此，L&lt;2^16 MEDIUMBLOB (M) 中等大小的BLOB L+3 字节，在此，L&lt;2^24 LONGBLOB (M) 非常大的BLOB L+4 字节，在此，L&lt;2^32 权限一览表 具体权限的作用详见官方文档 GRANT 和 REVOKE 允许的静态权限 Privilege Grant Table Column Context ALL [PRIVILEGES] Synonym for “all privileges” Server administration ALTER Alter_priv Tables ALTER ROUTINE Alter_routine_priv Stored routines CREATE Create_priv Databases, tables, or indexes CREATE ROLE Create_role_priv Server administration CREATE ROUTINE Create_routine_priv Stored routines CREATE TABLESPACE Create_tablespace_priv Server administration CREATE TEMPORARY TABLES Create_tmp_table_priv Tables CREATE USER Create_user_priv Server administration CREATE VIEW Create_view_priv Views DELETE Delete_priv Tables DROP Drop_priv Databases, tables, or views DROP ROLE Drop_role_priv Server administration EVENT Event_priv Databases EXECUTE Execute_priv Stored routines FILE File_priv File access on server host GRANT OPTION Grant_priv Databases, tables, or stored routines INDEX Index_priv Tables INSERT Insert_priv Tables or columns LOCK TABLES Lock_tables_priv Databases PROCESS Process_priv Server administration PROXY See proxies_priv table Server administration REFERENCES References_priv Databases or tables RELOAD Reload_priv Server administration REPLICATION CLIENT Repl_client_priv Server administration REPLICATION SLAVE Repl_slave_priv Server administration SELECT Select_priv Tables or columns SHOW DATABASES Show_db_priv Server administration SHOW VIEW Show_view_priv Views SHUTDOWN Shutdown_priv Server administration SUPER Super_priv Server administration TRIGGER Trigger_priv Tables UPDATE Update_priv Tables or columns USAGE Synonym for “no privileges” Server administration GRANT 和 REVOKE 允许的动态权限 Privilege Context APPLICATION_PASSWORD_ADMIN Dual password administration AUDIT_ABORT_EXEMPT Allow queries blocked by audit log filter AUDIT_ADMIN Audit log administration AUTHENTICATION_POLICY_ADMIN Authentication administration BACKUP_ADMIN Backup administration BINLOG_ADMIN Backup and Replication administration BINLOG_ENCRYPTION_ADMIN Backup and Replication administration CLONE_ADMIN Clone administration CONNECTION_ADMIN Server administration ENCRYPTION_KEY_ADMIN Server administration FIREWALL_ADMIN Firewall administration FIREWALL_EXEMPT Firewall administration FIREWALL_USER Firewall administration FLUSH_OPTIMIZER_COSTS Server administration FLUSH_STATUS Server administration FLUSH_TABLES Server administration FLUSH_USER_RESOURCES Server administration GROUP_REPLICATION_ADMIN Replication administration GROUP_REPLICATION_STREAM Replication administration INNODB_REDO_LOG_ARCHIVE Redo log archiving administration NDB_STORED_USER NDB Cluster PASSWORDLESS_USER_ADMIN Authentication administration PERSIST_RO_VARIABLES_ADMIN Server administration REPLICATION_APPLIER PRIVILEGE_CHECKS_USER for a replication channel REPLICATION_SLAVE_ADMIN Replication administration RESOURCE_GROUP_ADMIN Resource group administration RESOURCE_GROUP_USER Resource group administration ROLE_ADMIN Server administration SESSION_VARIABLES_ADMIN Server administration SET_USER_ID Server administration SHOW_ROUTINE Server administration SYSTEM_USER Server administration SYSTEM_VARIABLES_ADMIN Server administration TABLE_ENCRYPTION_ADMIN Server administration VERSION_TOKEN_ADMIN Server administration XA_RECOVER_ADMIN Server administration 图形化界面工具 Workbench(免费): http://dev.mysql.com/downloads/workbench/ navicat(收费，试用版30天): https://www.navicat.com/en/download/navicat-for-mysql Sequel Pro(开源免费，仅支持Mac OS): http://www.sequelpro.com/ HeidiSQL(免费): http://www.heidisql.com/ phpMyAdmin(免费): https://www.phpmyadmin.net/ SQLyog: https://sqlyog.en.softonic.com/ 安装小技巧 在SQL语句之后加上\\G会将结果的表格形式转换成行文本形式 查看Mysql数据库占用空间：1234SELECT table_schema &quot;Database Name&quot; , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;FROM information_schema.TABLESGROUP BY table_schema; 后续内容后续内容因为跟当前学习、工作计划有冲突，所以后续课程的学习计划会无限期推后。目前的工作重点放在重做一个学习笔记网站，当然这是边做边学的，开发过程中遇到的难点和知识点我也会记录下来供大家学习。在此感谢B站同样爱学习的同学 @守心-人 提供的后续课程笔记，大家有条件一定要去给个star，你的每一个star和点赞都是我们前进的动力https://github.com/Buildings-Lei/mysql_note/blob/main/README.md","link":"/MySQL.html"},{"title":"","text":".title_card { display: flex; position: relative; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); transition: 0.3s; width: auto; height: 100%; border-radius: 10px; overflow: hidden; align-items: center; justify-content: center; margin-left: 15px; margin-right: 15px; } .title_card:hover { box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2); } .title_card_text { position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; align-items: center; /* 垂直居中 */ justify-content: center; /* 水平居中 */ color: white; /* 将文字颜色设置为白色 */ opacity: 0; transition: opacity 0.3s; font-family: 'Trebuchet MS'; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); /* 添加文字阴影 */ } .title_card:hover .title_card_text { opacity: 0.9; animation: jelly 0.5s; } @keyframes jelly { 0%, 100% { transform: scale(1, 1); } 25% { transform: scale(0.9, 1.1); } 50% { transform: scale(1.1, 0.9); } 75% { transform: scale(0.95, 1.05); } } h1 { text-align: center; font-size: 4em; font-family: 'Trebuchet MS'; color: teal; } GALLERY Photography Miscellaneous Anime","link":"/gallery/index.html"}]}