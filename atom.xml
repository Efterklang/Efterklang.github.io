<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Efterklang</title>
  
  
  <link href="https://efterklang.github.io/atom.xml" rel="self"/>
  
  <link href="https://efterklang.github.io/"/>
  <updated>2024-02-16T04:52:40.652Z</updated>
  <id>https://efterklang.github.io/</id>
  
  <author>
    <name>Efterklang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Physical Layer</title>
    <link href="https://efterklang.github.io/Tech/Network/PhysicalLayer/"/>
    <id>https://efterklang.github.io/Tech/Network/PhysicalLayer/</id>
    <published>2024-02-13T15:45:32.000Z</published>
    <updated>2024-02-16T04:52:40.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="物理层的基本概念-Overview"><a href="#物理层的基本概念-Overview" class="headerlink" title="物理层的基本概念 Overview"></a>物理层的基本概念 Overview</h2><ul><li><strong>物理层的任务</strong><br>屏蔽掉不同传输媒体和通信手段间的差异，使数据链路层感受不到这种差异</li><li><strong>五种信道复用方式</strong><br>时分复用、频分复用、统计时分复用、码分复用、波分复用</li><li><strong>三种宽带接入方式</strong><br>非对称数字用户线（ADSL 技术，基于电话用户线改造）、光纤同轴混合网（HFC 网）、FTTx 技术（光纤到 x 技术）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-13-36-05.png" alt="PhysicalLayer"></p><h2 id="物理层下面的传输媒体-Transmission-Media"><a href="#物理层下面的传输媒体-Transmission-Media" class="headerlink" title="物理层下面的传输媒体 Transmission Media"></a>物理层下面的传输媒体 Transmission Media</h2><p>传输媒体也称为传输介质或传输媒介，它就是数据传输系统中在发送器和接收器之间的物理通路。<br>传输媒体可分为两大类，即导引型传输媒体和非导引型传输媒体。在导引型传输媒体中，电磁波被导引沿着固体媒体（铜线或光纤）传播，而非导引型传输媒体就是指自由空间，在非导引型传输媒体中电磁波的传输常称为无线传输</p><p>传输媒体不属于计算机网络体系结构的任何一层。如果非要将它添加到体系结构中，只能将其放置到物理层之下。</p><h3 id="导引型传输媒体-Guided-Transmission-Media"><a href="#导引型传输媒体-Guided-Transmission-Media" class="headerlink" title="导引型传输媒体 Guided Transmission Media"></a>导引型传输媒体 Guided Transmission Media</h3><h4 id="Coaxial-Cable"><a href="#Coaxial-Cable" class="headerlink" title="Coaxial Cable"></a>Coaxial Cable</h4><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-13-40-08.png" alt="PhysicalLayer-Coaxial cable"></p><h4 id="Twisted-Pair"><a href="#Twisted-Pair" class="headerlink" title="Twisted Pair"></a>Twisted Pair</h4><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-13-40-47.png" alt="PhysicalLayer-Twisted pair"></p><h4 id="Optical-Fiber"><a href="#Optical-Fiber" class="headerlink" title="Optical Fiber"></a>Optical Fiber</h4><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-13-49-54.png" alt="PhysicalLayer-Optical fiber1"><br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-13-51-21.png" alt="PhysicalLayer-Optical fiber2"></p><h4 id="Power-Line"><a href="#Power-Line" class="headerlink" title="Power Line"></a>Power Line</h4><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-13-42-42.png" alt="PhysicalLayer-Power line"></p><h3 id="非导引型传输媒体-Unguided-Transmission-Media"><a href="#非导引型传输媒体-Unguided-Transmission-Media" class="headerlink" title="非导引型传输媒体 Unguided Transmission Media"></a>非导引型传输媒体 Unguided Transmission Media</h3><blockquote><p>若通信线路要通过一些高山或岛屿，有时就很难施工。即使是在城市中，挖开马路敷设电缆也不是一件很容易的事。当通信距离很远时，敷设电缆既昂贵又费时。但利用无线电波在自由空间的传播就可较快地实现多种通信。由于这种通信方式不使用上一节所介绍的各种导引型传输媒体，因此就将自由空间称为“非导引型传输媒体”。<br>特别要指出的是，由于信息技术的发展，社会各方面的节奏变快了。人们不仅要求能够在运动中进行电话通信（即移动电话通信），而且还要求能够在运动中进行计算机数据通信（俗称上网）。因此在最近十几年无线电通信发展得特别快，因为<strong>利用无线信道进行信息的传输，是在运动中通信的唯一手段</strong><br>短波通信质量较差，速率较低。无限电微波通信可传输电话、图像、数据等信息。紫外线及更高波段目前还不能用于通信。卫星通信的优点是通信距离远，缺点是传播时延高，保密性差。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-14-05-46.png" alt="Unguided Transmission Media"><br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-14-06-57.png" alt="Unguided Transmission Media"></p><h4 id="Radio-wave"><a href="#Radio-wave" class="headerlink" title="Radio wave"></a>Radio wave</h4><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-14-11-14.png" alt="PhysicalLayer-Radio wave"></p><h4 id="Microwave"><a href="#Microwave" class="headerlink" title="Microwave"></a>Microwave</h4><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-14-11-21.png" alt="PhysicalLayer-Microwave"></p><h4 id="Infrared"><a href="#Infrared" class="headerlink" title="Infrared"></a>Infrared</h4><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-14-11-43.png" alt="PhysicalLayer-Infrared"></p><h4 id="Visible-light"><a href="#Visible-light" class="headerlink" title="Visible light"></a>Visible light</h4><p><a href="https://baike.baidu.com/item/%E5%8F%AF%E8%A7%81%E5%85%89%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1/16268518?fromtitle=LiFi&fromid=5675729&fr=aladdin">baibu 百科-LIFI</a></p><h2 id="传输方式-Transmission-Mode"><a href="#传输方式-Transmission-Mode" class="headerlink" title="传输方式 Transmission Mode"></a>传输方式 Transmission Mode</h2><ul><li>串行传输和并行传输</li><li>同步传输和异步传输</li><li>单工通信(单向通信)、半双工通信(双向交替通信)和全双工通信(双向同时通信)</li></ul><h3 id="串行和并行传输-Serial-and-Parallel-Transmission"><a href="#串行和并行传输-Serial-and-Parallel-Transmission" class="headerlink" title="串行和并行传输 Serial and Parallel Transmission"></a>串行和并行传输 Serial and Parallel Transmission</h3><p><strong>串行传输</strong><br>数据是一个比特一个比特依次发送的，因此在发送端与接收端之间，只需要一条数据传输线路即可<br><strong>并行传输</strong><br>一次发送 n 个比特，因此，在发送端和接收端之间需要有 n 条传输线路<br>并行传输的优点是比串行传输的速度 n 倍，但成本高<br>数据在传输线路上的传输采用是串行传输，计算机内部的数据传输常用并行传输</p><h3 id="同步和异步传输-Synchronous-and-Asynchronous-Transmission"><a href="#同步和异步传输-Synchronous-and-Asynchronous-Transmission" class="headerlink" title="同步和异步传输 Synchronous and Asynchronous Transmission"></a>同步和异步传输 Synchronous and Asynchronous Transmission</h3><p><strong>同步传输</strong></p><ul><li>数据块以稳定的比特流的形式传输。字节之间没有间隔</li><li>接收端在每个比特信号的中间时刻进行检测，以判别接收到的是 0 还是 1</li><li>由于不同设备的时钟频率存在一定差异，不可能做到完全相同，在传输大量数据的过程中，所产生的判别时刻的累计误差，会导致接收端对比特信号的判别错位,所以要使收发双发时钟保持同步</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-14-17-25.png" alt="PhysicalLayer-Synchronous Tranmission"></p><p><strong>异步传输</strong></p><ul><li>以字节为单位传输，字节之间的时间间隔不固定</li><li>接收端仅在每个字节的起始处对字节内的 bit 实现同步</li><li>通常再每个字节的前后加上起始位和结束位<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-14-18-08.png" alt="PhysicalLayer-Asynchronous Tranmission"></li></ul><h3 id="单工、半双工和全双工通信-Simplex-Half-Duplex-and-Full-Duplex-Communication"><a href="#单工、半双工和全双工通信-Simplex-Half-Duplex-and-Full-Duplex-Communication" class="headerlink" title="单工、半双工和全双工通信 Simplex, Half-Duplex, and Full-Duplex Communication"></a>单工、半双工和全双工通信 Simplex, Half-Duplex, and Full-Duplex Communication</h3><p>信道[[GlossaryOfNetwork#Physical Layer]]和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此，一条通信电路往往包含一条发送信道和一条接收信道。<br>从通信的双方信息交互的方式来看，可以有以下三种基本方式：</p><ul><li><strong>单工通信</strong>（Simplex Communication）<br>又称<strong>单向通信</strong>,即只能有一个方向的通信而没有反方向的交互。无线电广播或有线电以及电视广播就属于这种类型<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-15-23-46-14.png" alt="Simplex Communication"></li><li><strong>半双工通信</strong>（Half-Duplex Communication）<br>又称<strong>双向交替通信</strong>,通信的双发可以交替地发送和接收信息，但不能同时进行。对讲机就是这种通信方式<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-16-10-38-44.png" alt="Half-Duplex Communication"></li><li><strong>全双工通信</strong>（Full-Duplex Communication）<br>又称<strong>双向同时通信</strong>,通信的双方可以同时发送和接收信息。电话就是这种通信方式<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/PhysicalLayer-2024-02-16-10-39-36.png" alt="Full-Duplex Communication"></li></ul><blockquote><p>单向通信只需要一条信道，而双向交替通信或双向同时通信则需要两条信道（每个方向各一条）<br>双向同时通信的传输效率最高</p></blockquote><h2 id="编码和调制-Encoding-and-Modulation"><a href="#编码和调制-Encoding-and-Modulation" class="headerlink" title="编码和调制 Encoding and Modulation"></a>编码和调制 Encoding and Modulation</h2>]]></content>
    
    
    <summary type="html">Physical Layer</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="Network" scheme="https://efterklang.github.io/categories/Tech/Network/"/>
    
    
    <category term="Network" scheme="https://efterklang.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Glossary Of Networks</title>
    <link href="https://efterklang.github.io/Tech/Network/GlossaryOfNetwork/"/>
    <id>https://efterklang.github.io/Tech/Network/GlossaryOfNetwork/</id>
    <published>2024-02-13T14:39:43.000Z</published>
    <updated>2024-02-16T04:55:07.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OSI-Model"><a href="#OSI-Model" class="headerlink" title="OSI Model"></a>OSI Model</h2><p><strong>实体</strong> 任何可发送或接受信息的硬件或软件进程<br><strong>对等实体</strong> 收发双方层次相同中的实体<br><strong>协议 Protocol</strong> 控制两个对等实体进行逻辑通信的规则的集合<br><strong>协议三要素</strong>：</p><ul><li>语法：定义所交换信息的格式</li><li>语义：定义收发双方所要完成的操作</li><li>同步：定义收发双发的时序关系<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/GlossaryOfNetwork-2024-02-13-23-27-42.png" alt="Protocol"><br><strong>服务 Service</strong> 在协议的控制下,两个对等实体间的逻辑通信使得本层能够向上层提供的功能;要实现本层的功能,又需要使用下层提供的服务<br><strong>服务访问点</strong> 在统一系统中相邻两层的实体交换信息的逻辑接口,用于区分不同的服务类型;</li><li>数据链路层的服务访问点为帧的类型字段</li><li>网络层的服务访问点为 IP 数据报首部中的协议字段</li><li>运输层的服务访问点为端口号<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/GlossaryOfNetwork-2024-02-13-23-33-14.png" alt="Service"><br><strong>协议数据单元 PDU</strong> 对等层次之间传送的数据包<br><strong>服务数据单元 SDU</strong> 同一系统内,层间交换的数据包<br>多个 SDU 可以组成一个 PDU,也可以将一个 SDU 分成多个 PDU<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/GlossaryOfNetwork-2024-02-13-23-32-57.png" alt="SDU,PDU"></li></ul><h2 id="Physical-Layer"><a href="#Physical-Layer" class="headerlink" title="Physical Layer"></a>Physical Layer</h2><p><strong>机械特性</strong> Mechanical Characteristics 定义物理连接特性,包括 采用的规格,接口形状,引线数目,排列情况,引脚数量<br><strong>电气特性</strong> Electrical Characteristics 传输二进制时,传输信号的电压范围,阻抗匹配,传输速率,距离限制<br><strong>功能特性</strong> Functional Characteristics 描述电平的意义,接口部件,信号线用途等<br><strong>过程特性</strong> Procedural Characteristics 规定 各个物理线路工作规程,时序关系</p><blockquote><p>电气特性根据电压确定电平,功能特性则是根据电平确定信号的意义</p></blockquote><p><strong>信道</strong> Channel,信道不等于电路，信道表示<strong>向某一方向传送信息的媒体</strong>，一条通信电路通常包含一条发送信道和一条接受信道。</p><ul><li><strong>数据</strong> (data) —— 运送消息的实体</li><li><strong>信号</strong> (signal) —— 数据的电气的或电磁的表现</li><li><strong>模拟信号</strong> (analogous signal) —— 代表消息的参数的取值是连续的</li><li><strong>数字信号</strong> (digital signal) —— 代表消息的参数的取值是离散的</li><li><strong>码元</strong> (code) —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形</li><li><strong>基带信号</strong>（即基本频带信号）—— 来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号<br>基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行调制 (modulation)</li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p><strong>URL</strong>,Uniform Resource Locator,统一资源定位符,互联网上用来标识资源的地址。网络上的所有资源都靠 URL 来定位，每一个文件就对应着一个 URL，就像是路径地址。理论上，文件资源和 URL 一一对应。实际上也有例外，比如某些 URL 指向的文件已经被重定位到另一个位置，这样就有多个 URL 指向同一个文件。</p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/GlossaryOfNetwork-2024-02-13-23-02-09.png" alt="URL"></p>]]></content>
    
    
    <summary type="html">计算机网路相关术语</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="Network" scheme="https://efterklang.github.io/categories/Tech/Network/"/>
    
    
    <category term="Glossary" scheme="https://efterklang.github.io/tags/Glossary/"/>
    
  </entry>
  
  <entry>
    <title>Computer networks and the Internet</title>
    <link href="https://efterklang.github.io/Tech/Network/ComputerNetwork01/"/>
    <id>https://efterklang.github.io/Tech/Network/ComputerNetwork01/</id>
    <published>2024-02-13T14:22:52.000Z</published>
    <updated>2024-02-14T15:20:42.630Z</updated>
    
    <content type="html"><![CDATA[<style>p {    text-indent: 2em;}</style><h2 id="计算机网络在信息时代的作用"><a href="#计算机网络在信息时代的作用" class="headerlink" title="计算机网络在信息时代的作用"></a>计算机网络在信息时代的作用</h2><p>计算机网络已经由<strong>通信基础设施</strong>发展成为一种重要的<strong>信息服务基础设施</strong></p><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01node-2024-01-29-23-35-08.png" alt="NetWork and Internet"></p><ul><li><strong>NetWork</strong> <strong>网络</strong>,由若干<strong>结点</strong>(Node)和<strong>链路</strong>(Link)组成</li><li><strong>internet</strong> <strong>互联网&#x2F;互连网</strong>,多个网络可以通过<strong>路由器</strong>(Router)互联起来,形成一个覆盖范围更大的网络,互联网是由<strong>网络和网络之间</strong>互联而成的,是<strong>网络的网络</strong>(Network of Networks)</li><li><strong>Internet</strong> <strong>因特网</strong>世界上最大的互联网络.</li><li><strong>Host</strong> <strong>主机</strong>,连接到因特网上的计算机</li></ul><article class="message is-info"><div class="message-header"><p>internet 和 Internet 的区别</p></div><div class="message-body"><ul><li><strong>internet</strong>(互联网或互连网)是一个通用名词，它泛指多个计算机网络互连而成的网络。在这些网络之间的通信协议可以是任意的。</li><li><strong>Internet</strong>（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络互连而成的特定计算机网络，它采用 TCP&#x2F;IP 协议族作为通信的规则，其前身是美国的 ARPANET。</li></ul><p>任意把几个计算机网络互连起来（不管采用什么协议），并能够相互通信，这样构成的是一个互连网(internet) ，而不是互联网(Internet)。</p></div></article><h3 id="Internet-发展的三个阶段"><a href="#Internet-发展的三个阶段" class="headerlink" title="Internet 发展的三个阶段"></a>Internet 发展的三个阶段</h3><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/Internet%E5%8F%91%E5%B1%95%E9%98%B6%E6%AE%B5.png" alt="Internet发展阶段"></p><h4 id="ISP-互联网服务提供商"><a href="#ISP-互联网服务提供商" class="headerlink" title="ISP(互联网服务提供商)"></a><strong>ISP(互联网服务提供商)</strong></h4><p><strong>Internet</strong>上的主机通过<strong>ISP</strong>接入<strong>Internet</strong>,之后才能互相通信;<strong>ISP</strong>可以从因特网管理机构申请到成块的 IP 地址,同时拥有通信线路以及路由器等联网设备.<strong>机构&#x2F;个人</strong>缴纳一定的费用,就可以从<strong>ISP</strong>租用<strong>IP 地址</strong>,并通过<strong>ISP</strong>接入<strong>Internet</strong>。中国的主流<strong>ISP</strong>有:中国电信、中国移动、中国联通等</p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-01-29-23-48-41.png" alt="ISP"></p><blockquote><p><strong>第一层 ISP</strong>（Tier 1 ISP）：这些是全球互联网的主干网络运营商，它们拥有遍布全球的网络基础设施。这些公司的网络通常覆盖了全球的主要地区和城市，包括北美、欧洲、亚洲、澳大利亚等。。第一层 ISP 之间通过免费的互联网络（Peering）协议进行数据交换，不需要向其他 ISP 支付费用。<br>以下是一些知名的第一层 ISP 及其总部所在地：</p><ul><li>AT&amp;T：总部位于美国德克萨斯州达拉斯。</li><li>Verizon：总部位于美国纽约州纽约。</li><li>Level 3 Communications：总部位于美国科罗拉多州布隆菲尔德，现已被 CenturyLink（现为 Lumen Technologies）收购。</li><li>NTT Communications：总部位于日本东京。</li><li>Telia Company：总部位于瑞典斯德哥尔摩。</li></ul><hr><p><strong>第二层 ISP</strong>（Tier 2 ISP）：这些 ISP 拥有自己的网络基础设施，但是不足以覆盖全球，所以它们需要购买第一层 ISP 的服务，以便将数据传输到全球的其他地方。第二层 ISP 通常会向本地或区域的客户提供服务。</p><hr><p><strong>第三层 ISP</strong>（Tier 3 ISP）：这些 ISP 通常没有自己的网络基础设施，而是购买第二层 ISP 的服务，然后将其转售给最终用户。第三层 ISP 通常会提供一些增值服务，如电子邮件、网页托管和虚拟专用网络（VPN）。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-01-30-00-00-56.png" alt="基于ISP的三层结构Internet示意图"></p><h3 id="Internet-的标准化工作"><a href="#Internet-的标准化工作" class="headerlink" title="Internet 的标准化工作"></a>Internet 的标准化工作</h3><ul><li>因特网的标准化工作对因特网的发展起到了非常重要的作用。</li><li>因特网在指定其标准上的一个很大的特点是<strong>面向公众</strong>。<ul><li>因特网所有的 RFC(Request For Comments)技术文档都可从因特网上<a href="http://www.ietf.org/rfc.html">免费下载</a>；</li><li>任何人都可以随时用电子邮件发表对某个文档的意见或建议。</li></ul></li><li><strong>因特网协会 ISOC 是一个国际性组织</strong>，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。<ul><li><strong>因特网体系结构委员会 IAB</strong>，负责管理因特网有关协议的开发；</li><li><strong>因特网工程部 IETF</strong>，负责研究中短期工程问题，主要针对协议的开发和标准化；</li><li><strong>因特网研究部 IRTF</strong>，从事理论方面的研究和开发一些需要长期考虑的问题。</li></ul></li><li>制定因特网的正式标准需要四个阶段:<ul><li>因特网草案</li><li>建议标准(该阶段的标准会开始写入 RFC 文档)</li><li>草案标准</li><li>因特网标准<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-01-30-18-53-28.png" alt="ISOC,IAB,IETF,IRTF"></li></ul></li></ul><h3 id="Internet-的组成"><a href="#Internet-的组成" class="headerlink" title="Internet 的组成"></a>Internet 的组成</h3><p><strong>边缘部分</strong> 由所有连接在因特网上的<strong>主机</strong>组成.这部分是用户直接使用的,用于通信和资源共享.<br><strong>核心部分</strong> 由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成,这部分是为边缘部分提供服务的(提供连通性和交换).</p><blockquote><p><strong>路由器</strong>是一种专用计算机，但我们不称它为主机，路由器是实现分组交换的关键构建，其任务是转发收到的分组，这是网络核心最重要的部分。<br>处在互联网边缘的部分就是连接在互联网上的所有的主机。这些主机又称为<strong>端系统</strong>(end system)<br>端系统在功能上可能有很大的差别：</p><ol><li>小的端系统可以是一台普通个人电脑，具有上网功能的智能手机，甚至是一个很小的网络摄像头。</li><li>大的端系统则可以是一台非常昂贵的大型计算机。</li><li>端系统的拥有者可以是个人，也可以是单位（如学校、企业、政府机关等），当然也可以是某个 ISP。</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-01-31-13-58-21.png" alt="Internet的组成"></p><h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><p>网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。</p><p>在网络核心部分起特殊作用的是路由器(router)。路由器是实现分组交换 (packet switching) 的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。</p><h3 id="电路交换-Circuit-Switching"><a href="#电路交换-Circuit-Switching" class="headerlink" title="电路交换 Circuit Switching"></a>电路交换 Circuit Switching</h3><p>传统的电话两两相连,但当用户很多时,这种方式就不可行了,因此引入中间设备(电话交换机),使用电话交换机接通电话线的方式称为电路交换。</p><p>从通信资源的分配角度来看,交换就是按照某种方式动态地分配传输线路的资源</p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-01-31-17-18-53.png" alt="Circuit Switching"></p><p>电路交换的三个步骤是:建立连接(分配通信资源),传输数据(一直占用通信资源),释放连接<br>(归还通信资源)</p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-01-31-19-41-51.png" alt="Circuit Switching"></p><p>而当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。这是因为计算机数据是突发式地出现在传输线路上的。所以计算机通常采用的是<strong>分组交换</strong>，而不是线路交换</p><h3 id="分组交换-Packet-Switching"><a href="#分组交换-Packet-Switching" class="headerlink" title="分组交换 Packet Switching"></a>分组交换 Packet Switching</h3><ul><li><strong>报文</strong>: 信息交换的基本单位,在网络中传输的信息单位</li><li><strong>分组</strong>: 为了传输方便,将报文划分为固定长度的数据块(分组,packet),在每一个数据段前面,加上一些由必要的控制信息组成的首部(报头),称为分组。</li></ul><hr><ul><li><strong>发送方</strong>:构造分组,发送分组</li><li><strong>路由器</strong>:缓存分组,转发分组(分组转发)</li><li><strong>接收方</strong>:接受分组,还原报文</li></ul><blockquote><p>在路由器的输入和输出端口之间没有直接连线,路由器处理分组的过程是:把收到的分组先放入缓存,查找转发表,找出某个目的地址的最佳输出端口,然后从缓存中取出该分组,通过输出端口转发出去.</p><p>在分组交换中，每个packet独立地通过网络进行传输。这意味着分组可以通过不同的路径到达目的地，并且可能会在不同的时间到达。在接收端，这些分组会被重新组装成原始的报文。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-01-31-20-06-03.png" alt="Packet Switching"></p><h3 id="报文交换-Message-Switching"><a href="#报文交换-Message-Switching" class="headerlink" title="报文交换 Message Switching"></a>报文交换 Message Switching</h3><p>在报文交换中，整个报文作为一个单元进行发送，并且在整个传输过程中保持其完整性。报文在发送前需要完全准备好，并且在传输过程中不会被分割。这种方式的优点是简单，但缺点是如果报文很大，那么它可能会占用网络资源一段很长的时间，导致网络拥塞。报文交换主要用于早期的电报通信网，现在较少使用，通常被较先进的分组交换方式所取代。</p><h3 id="三种交换方式对比"><a href="#三种交换方式对比" class="headerlink" title="三种交换方式对比"></a>三种交换方式对比</h3><p><strong>电路交换</strong></p><ul><li>通信之前首先要建立连接；连接建立好之后，就可以使用已建立好的连接进行数据传送；数据传送后，需释放连接，以归还之前建立连接所占用的通信线路资源。</li><li>一旦建立连接，中间的各结点交换机就是直通形式的，比特流可以直达终点；</li></ul><hr><p><strong>报文交换</strong></p><ul><li>可以随时发送报文，而不需要事先建立连接；整个报文先传送到相邻结点交换机，全部存储下来后进行查表转发，转发到下一个结点交换机。</li><li>整个报文需要在各结点交换机上进行存储转发，由于不限制报文大小，因此需要各结点交换机都具有较大的缓存空间。</li></ul><hr><p><strong>分组交换</strong></p><ul><li>可以随时发送分组，而不需要事先建立连接。构成原始报文的一个个分组，依次在各结点交换机上存储转发。各结点交换机在发送分组的同时，还缓存接收到的分组。</li><li>构成原始报文的一个个分组，在各结点交换机上进行存储转发，相比报文交换，减少了转发时延，还可以避免过长的报文长时间占用链路，同时也有利于进行差错控制。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-01-31-20-29-36.png" alt="交换方式对比"></p><h2 id="计算机网络的定义和分类"><a href="#计算机网络的定义和分类" class="headerlink" title="计算机网络的定义和分类"></a>计算机网络的定义和分类</h2><h3 id="计算机网络的定义"><a href="#计算机网络的定义" class="headerlink" title="计算机网络的定义"></a>计算机网络的定义</h3><p>计算机网络的最简单的定义是：一些<strong>互相连接的</strong>、<strong>自治</strong>的计算机的<strong>集合</strong></p><ul><li><strong>互联</strong> 计算机之间可以通过<strong>有线或无线</strong>的方式进行数据通信</li><li><strong>自治</strong> 指计算机有独立性,有自己的软硬件,可以单独允许使用</li><li><strong>集合</strong> 至少两台计算机组成</li></ul><hr><p>计算机网络较好的定义是: 计算机网络主要是由一些<strong>通用的，可编程的硬件（一定包含有中央处理机 CPU）互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用。</strong></p><ul><li>计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。</li><li>计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用）。</li></ul><h3 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h3><ul><li><strong>按交换技术分类</strong>: 电路交换网络 报文交换网络 分组交换网络</li><li><strong>按使用者分类</strong>: 公用网 专用网</li><li><strong>按传输介质分类</strong>: 有线网络 无线网络</li><li><strong>按覆盖范围分类</strong>: Wide&#x2F;Metropolitan&#x2F;Local&#x2F;Personal Area Network</li><li><strong>按拓扑结构分类</strong> 总线型 环型 星型 网状型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-01-31-23-38-14.png" alt="拓扑结构分类"></p><h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><h3 id="速率-Rate"><a href="#速率-Rate" class="headerlink" title="速率 Rate"></a>速率 Rate</h3><p><strong>bit</strong> 比特.计算机中数据量的单位,也是信息论中信息量的单位.一个 bit 即是一个二进制数字,它只能取 0 或 1 两个值<code>8bit = 1Byte; KB=1024B,MB=1024KB,GB=1024MB,TB=1024GB</code></p><p><strong>rate</strong> 比特率,数据率.连接在计算机网络上的主机在数字信道上传送数据位数的速率,单位为 bit&#x2F;s,也称为 bps(bit per second)<code>1kbs=1000bps,1Mbps=1000kbs,1Gbps=1000Mbps</code></p><blockquote><p>100MB 的数据块,网卡的发送速率为 100Mbps,求发送所需时间?</p><div>$$\frac{100MB}{100Mbps}=\frac{MB}{Mbps}=\frac{2^{20}B}{10^6bps}=\frac{2^{20}\times8}{10^6s^{-1}}=8.388608s$$</div></blockquote><h3 id="带宽-Bandwidth"><a href="#带宽-Bandwidth" class="headerlink" title="带宽 Bandwidth"></a>带宽 Bandwidth</h3><p><strong>Bandwidth</strong>在模拟信号系统中,表示<strong>信号</strong>所包含的各种不同频率成分所占据的<strong>频率范围</strong>(即最高频率与最低频率之差),单位为 Hz;在计算机网络中,表示网络中的<strong>通信线路</strong>所能传输数据的能力,网络带宽表示在单位时间内从网络中的某一点到另一点所能通过的<strong>最高数据率</strong>(即网络设备所支持的最高速度),单位为 bps.</p><p>带宽的这两种表述之间有着密切的联系,一条通信线路的频带宽度越宽，理论上所能传输的最高数据率也越高。(具体可自行查阅信号与系统相关知识,例如香农定理)</p><h3 id="吞吐量-Throughput"><a href="#吞吐量-Throughput" class="headerlink" title="吞吐量 Throughput"></a>吞吐量 Throughput</h3><p>吞吐量是指单位时间内实际通过某个网络(或信道、接口)的数据量,单位为 bps.</p><p>吞吐量受网络的带宽或或额定速率的限制(吞吐量往往小于带宽),同时还受到网络中其他因素的影响,例如网络拥塞、路由器转发速率、主机处理速度等.<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-01-23-30-42.png" alt="Throughput"></p><h3 id="时延-Delay"><a href="#时延-Delay" class="headerlink" title="时延 Delay"></a>时延 Delay</h3><p><strong>时延</strong>时指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。<br>网络时延由以下几部分组成</p><ul><li><strong>发送时延</strong><br>主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</li><li><strong>传播时延</strong><br>电磁波在信道中传播一定的距离需要花费的时间。</li><li><strong>处理时延</strong><br>主机或路由器在收到分组时要花费一定时间进行处理</li><li><strong>排队时延</strong><br>常被看作是处理时延的一部分。分组在进过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-04-10-31-44.png" alt="delay"></p><p>总时延 &#x3D; 发送时延 + 传播时延 + 处理时延(处理时延 + 排队时延)</p><h3 id="时延带宽积-Delay-Bandwidth-Product"><a href="#时延带宽积-Delay-Bandwidth-Product" class="headerlink" title="时延带宽积 Delay-Bandwidth Product"></a>时延带宽积 Delay-Bandwidth Product</h3><p>时延带宽积(bit) &#x3D; 传播时延(s) * 带宽(bps)</p><blockquote><p>类比带宽为水管的横切面面积,传播时延理解为水流经过水管的时间,时延带宽积就是水管的容量,即水管中能够容纳的水的数量.<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-04-10-44-48.png" alt="DBP"></p></blockquote><h3 id="往返时间-Round-Trip-Time"><a href="#往返时间-Round-Trip-Time" class="headerlink" title="往返时间 Round Trip Time"></a>往返时间 Round Trip Time</h3><p>互联网上的信息不仅仅单方向传输而是双向交互的。因此，往返时间(RTT)也是一个重要的性能指标<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-04-10-49-44.png" alt="RTT"></p><h3 id="利用率-Utilization"><a href="#利用率-Utilization" class="headerlink" title="利用率 Utilization"></a>利用率 Utilization</h3><p>利用率分为<strong>信道利用率</strong>和<strong>网络利用率</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-05-00-45-34.png" alt="Utilization"></p><h3 id="丢包率-Packet-Loss-Rate"><a href="#丢包率-Packet-Loss-Rate" class="headerlink" title="丢包率 Packet Loss Rate"></a>丢包率 Packet Loss Rate</h3><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-05-00-46-50.png" alt="PLR"></p><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><h3 id="常见的计算机网络体系结构"><a href="#常见的计算机网络体系结构" class="headerlink" title="常见的计算机网络体系结构"></a>常见的计算机网络体系结构</h3><p>计算机网络是一个复杂的系统,早在 ARPANET 时代,就已经意识到了网络的复杂性,因此提出了分层的思想。分层将复杂问题分解为若干较小的局部问题,使得网络的设计和管理变得更加容易。</p><blockquote><p>各层之间相互独立：各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）。这个和我们对开发时系统进行分层是一个道理。<br>提高了灵活性和可替换性：每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。并且，每一层都可以根据需要进行修改或替换，而不会影响到整个网络的结构。这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。<br>大问题化小：分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 这个和我们平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义。<br><a href="https://javaguide.cn/cs-basics/network/other-network-questions.html">JavaGuide</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-06-23-37-58.png" alt="Network architecture"><br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-14-23-02-01.png" alt="Network architecture"><br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-14-22-59-23.png" alt="Network architecture"><br>OSI(Open System Interconnection)七层模型是国际标准化组织(ISO)制定的一个通信系统的框架,它将通信系统划分为七层,每一层都有自己的功能,并且每一层的功能都是相对独立的,只与相邻的两层进行通信。但由于 OSI 模型过于复杂,实际应用中并不常用,而是使用 TCP&#x2F;IP 四层模型</p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-05-19-46-15.png" alt="OSI Model"></p><p>TCP&#x2F;IP 体系结构相当于将 OSI 体系结构的<strong>物理层和数据链路层</strong>合并为了<strong>网络接口层</strong>，并去掉了<strong>会话层和表示层</strong>。</p><p>在用户主机的操作系统中，通常都带有符合 TCP&#x2F;IP 体系结构标准的 TCP&#x2F;IP 协议族。而用于网络互连的路由器中，也带有符合 TCP&#x2F;IP 体系结构标准的 TCP&#x2F;IP 协议族。只不过路由器一般只包含网络接口层和网际层。</p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/ComputerNetwork01-2024-02-06-23-35-10.png" alt="TCP/IP"></p><p><strong>Reference</strong><br><a href="https://javaguide.cn/cs-basics/network/osi-and-tcp-ip-model.html">JavaGuide-Network-OSI and TCP&#x2F;IP</a><br><a href="https://www.bilibili.com/video/BV1c4411d7CQ/?p=9">bilibili-计网体系结构分层思想举例</a><br><a href="https://www.bilibili.com/video/BV1c4411d7CQ?p=12">bilibili-习题 1</a><br><a href="https://www.bilibili.com/video/BV1c4411d7CQ?p=13">bilibili-习题 2</a></p>]]></content>
    
    
    <summary type="html">计算机网络概述</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="Network" scheme="https://efterklang.github.io/categories/Tech/Network/"/>
    
    
    <category term="Network" scheme="https://efterklang.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>DataBase Advance 存储引擎与性能分析</title>
    <link href="https://efterklang.github.io/Tech/DataBase/DataBase04/"/>
    <id>https://efterklang.github.io/Tech/DataBase/DataBase04/</id>
    <published>2024-02-13T04:41:37.000Z</published>
    <updated>2024-02-13T07:34:09.795Z</updated>
    
    
    <summary type="html">数据库学习笔记</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="DataBase" scheme="https://efterklang.github.io/categories/Tech/DataBase/"/>
    
    
    <category term="DataBase" scheme="https://efterklang.github.io/tags/DataBase/"/>
    
  </entry>
  
  <entry>
    <title>DataBase Base 多表查询&amp;事务</title>
    <link href="https://efterklang.github.io/Tech/DataBase/DataBase03/"/>
    <id>https://efterklang.github.io/Tech/DataBase/DataBase03/</id>
    <published>2024-02-12T15:46:06.000Z</published>
    <updated>2024-02-13T07:36:15.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多表查询-Multi-Table-Query"><a href="#多表查询-Multi-Table-Query" class="headerlink" title="多表查询 Multi-Table Query"></a>多表查询 Multi-Table Query</h1><h2 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h2><p>项目开发中,在进行数据库表结构设计时,会根据业务需求及业务模块之间的关系,分析并设计表结构,由于业务之间相互关联所以各个表结构之间也存在着各种联系,基本上分为三种：<br><strong>一对一</strong> one to one<br>如用户与用户详情的关系<br>多用于单表拆分,将一张表的基础字段和扩展字段分开存储,减少数据冗余,提高数据库性能.可在任意一方添加外键关联另一方的主键,并且外键字段设置 UNIQUE 约束.<br><strong>一对多(多对一)</strong> one to many<br>如一个部门对应多个员工,一个员工只能对应一个部门.<br>这种关系一般是通过在多的一方添加外键来实现的.(员工表中设置部门 id 作为外键,指向部门表中的主键)<br><strong>多对多</strong> many to many<br>如一个学生可以选择多个课程,一个课程也可以被多个学生选择.<br>这种关系一般是通过添加第三张表来实现的.(学生表,课程表,学生课程表),中间表中设置学生 id 和课程 id 作为外键,指向学生表和课程表的主键.</p><blockquote><p>为方便理解,以下以员工表和部门表为例进行说明.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> Name  <span class="operator">|</span> DepartmentID <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> John  <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Alice <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Bob   <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> David <span class="operator">|</span>          <span class="number">300</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> departments;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+</span></span><br><span class="line"><span class="operator">|</span> ID  <span class="operator">|</span> Name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">200</span> <span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">300</span> <span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h2><p>合并查询(笛卡尔积,显示所有组合结果,不常用)<br><code>SELECT * FROM table1,table2;</code><br>消除无效组合(内连接)<br><code>SELECT * FROM employee, department WHERE employee.dept_id = department.id;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees,departments;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------------+-----+-----------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> Name  <span class="operator">|</span> DepartmentID <span class="operator">|</span> ID  <span class="operator">|</span> Name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------------+-----+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> John  <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span> <span class="number">300</span> <span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> John  <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span> <span class="number">200</span> <span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> John  <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Alice <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span> <span class="number">300</span> <span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Alice <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span> <span class="number">200</span> <span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Alice <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Bob   <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span> <span class="number">300</span> <span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Bob   <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span> <span class="number">200</span> <span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Bob   <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> David <span class="operator">|</span>          <span class="number">300</span> <span class="operator">|</span> <span class="number">300</span> <span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> David <span class="operator">|</span>          <span class="number">300</span> <span class="operator">|</span> <span class="number">200</span> <span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> David <span class="operator">|</span>          <span class="number">300</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------------+-----+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees,departments <span class="keyword">WHERE</span> employees.DepartmentID <span class="operator">=</span> departments.ID;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------------+-----+-----------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> Name  <span class="operator">|</span> DepartmentID <span class="operator">|</span> ID  <span class="operator">|</span> Name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------------+-----+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> John  <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Alice <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span> <span class="number">200</span> <span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Bob   <span class="operator">|</span>          <span class="number">100</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> David <span class="operator">|</span>          <span class="number">300</span> <span class="operator">|</span> <span class="number">300</span> <span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------------+-----+-----------+</span></span><br></pre></td></tr></table></figure><h2 id="内连接查询-Inner-Join"><a href="#内连接查询-Inner-Join" class="headerlink" title="内连接查询 Inner Join"></a>内连接查询 Inner Join</h2><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code><br>显式内连接(性能较高)<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工姓名,以及对应的部门名称</span></span><br><span class="line"><span class="comment">-- 隐式</span></span><br><span class="line"><span class="keyword">SELECT</span> e.Name,d.Name <span class="keyword">FROM</span> employees <span class="keyword">AS</span> e, departments <span class="keyword">AS</span> d <span class="keyword">WHERE</span> e.DepartmentID <span class="operator">=</span> d.ID;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Name  <span class="operator">|</span> Name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+</span></span><br><span class="line"><span class="operator">|</span> John  <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alice <span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bob   <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> David <span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+</span></span><br><span class="line"><span class="comment">-- 显式</span></span><br><span class="line"><span class="keyword">SELECT</span> e.Name,d.Name <span class="keyword">FROM</span> employees <span class="keyword">AS</span> e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments <span class="keyword">AS</span> d <span class="keyword">ON</span> e.DepartmentID <span class="operator">=</span> d.ID;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Name  <span class="operator">|</span> Name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+</span></span><br><span class="line"><span class="operator">|</span> John  <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alice <span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bob   <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> David <span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+</span></span><br></pre></td></tr></table></figure><blockquote><p>sql inner join 3 tables example<br><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/DataBase03-2024-02-12-10-09-03.png" alt="SQL Inner Join"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">job_title,</span><br><span class="line">department_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j <span class="keyword">ON</span> j.job_id <span class="operator">=</span> e.job_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e.department_id <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/DataBase03-2024-02-12-10-10-40.png" alt="SQL Inner Join"></p></blockquote><h2 id="外连接查询-Outer-Join"><a href="#外连接查询-Outer-Join" class="headerlink" title="外连接查询 Outer Join"></a>外连接查询 Outer Join</h2><p>分为<strong>左外连接、右外连接、全外连接</strong>(Left Join, Right Join, Full Join)</p><p>左连接查询：查询左表的所有数据,右表中符合条件的数据<br>右连接查询：查询右表的所有数据,左表中符合条件的数据<br>全连接查询：查询两个表的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- left join</span></span><br><span class="line"><span class="keyword">SELECT</span> e.Name,d.Name <span class="keyword">FROM</span> employees <span class="keyword">AS</span> e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments <span class="keyword">AS</span> d <span class="keyword">ON</span> e.DepartmentID <span class="operator">=</span> d.ID;</span><br><span class="line"><span class="comment">-- right join</span></span><br><span class="line"><span class="keyword">SELECT</span> e.Name,d.Name <span class="keyword">FROM</span> departments <span class="keyword">AS</span> d <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> employees <span class="keyword">AS</span> e <span class="keyword">ON</span> e.DepartmentID <span class="operator">=</span> d.ID;</span><br><span class="line"><span class="comment">-- 以上两句等价</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Name  <span class="operator">|</span> Name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+</span></span><br><span class="line"><span class="operator">|</span> John  <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alice <span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bob   <span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> David <span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+</span></span><br></pre></td></tr></table></figure><p><a href="https://www.sqltutorial.org/sql-left-join/">sqltutorial-left-join</a><br><a href="https://www.sqltutorial.org/sql-full-outer-join/">sqltutorial-full-outer-join</a></p><h2 id="自连接查询-Self-Join"><a href="#自连接查询-Self-Join" class="headerlink" title="自连接查询 Self Join"></a>自连接查询 Self Join</h2><p>当前表与自身的连接查询，自连接必须使用表别名;自连接查询，可以是内连接查询，也可以是外连接查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.Name,B.Name</span><br><span class="line"><span class="keyword">FROM</span> employees A</span><br><span class="line"><span class="keyword">JOIN</span> employees B</span><br><span class="line"><span class="keyword">ON</span> A.DepartmentID <span class="operator">=</span> B.DepartmentID <span class="operator">&amp;&amp;</span> A.Name <span class="operator">&lt;</span> B.Name;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> Name <span class="operator">|</span> Name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> Bob  <span class="operator">|</span> John <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br></pre></td></tr></table></figure><p><a href="https://www.sqltutorial.org/sql-self-join/">sqltutorial-self-join</a></p><h2 id="联合查询-Union"><a href="#联合查询-Union" class="headerlink" title="联合查询 Union"></a>联合查询 Union</h2><p>把多次<code>SELECT</code>查询的结果合并，形成一个新的查询集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表A ...</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表B ...</span><br></pre></td></tr></table></figure><p><strong>Note</strong>: UNION 会自动去重, UNION ALL 不会去重;联合查询比使用 or 效率高，不会使索引失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Name <span class="keyword">FROM</span> employees <span class="keyword">UNION</span> <span class="keyword">SELECT</span> Name <span class="keyword">FROM</span> departments;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> Name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> John      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alice     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bob       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> David     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sales     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Marketing <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> HR        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br></pre></td></tr></table></figure><h2 id="子查询-Subquery"><a href="#子查询-Subquery" class="headerlink" title="子查询 Subquery"></a>子查询 Subquery</h2><p><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br>在 SQL 中，子查询（Subquery）是嵌入在其他 SQL 查询中的查询,又称嵌套查询。<br>子查询可以用在各种 SQL 语句中，如 <code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>，以及在 <code>WHERE</code> 或 <code>HAVING</code> 子句中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EmployeeName, Salary</span><br><span class="line"><span class="keyword">FROM</span> Employees</span><br><span class="line"><span class="keyword">WHERE</span> Salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Salary) <span class="keyword">FROM</span> Employees);</span><br></pre></td></tr></table></figure><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询返回值为单个值,数字,String,Date）<br>常用操作符：<code>- &lt; &gt; &gt; &gt;= &lt; &lt;=</code></li><li>列子查询（子查询返回值为一列）<br>常用操作符:<code>IN,NOT IN,SOME,ANY,ALL</code>(<code>SOME</code>和<code>ANY</code>是等价的,只要子查询返回的任意一个值满足条件即可,<code>ALL</code>是所有值都满足条件才返回结果)</li><li>行子查询（子查询返回值为一行）<br>常用操作符:<code>=, &lt;, &gt;, IN, NOT IN</code></li><li>表子查询（子查询返回值为多行多列）<br>常用操作符:<code>IN</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标量子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> Salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Salary) <span class="keyword">FROM</span> employees);</span><br><span class="line"><span class="comment">-- 列子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> Salary <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> DepartmentID <span class="operator">=</span> <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> Salary <span class="operator">&gt;</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> Salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> DepartmentID <span class="operator">=</span> <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> Salary <span class="operator">&gt;</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> Salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> DepartmentID <span class="operator">=</span> <span class="number">100</span>);</span><br><span class="line"><span class="comment">-- 行子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (salary, manager) <span class="operator">=</span> (<span class="keyword">SELECT</span> salary,manager <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"><span class="comment">-- 表子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> e.<span class="operator">*</span>, d.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) <span class="keyword">AS</span> e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">ON</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><hr><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h1 id="事务-Transaction"><a href="#事务-Transaction" class="headerlink" title="事务 Transaction"></a>事务 Transaction</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在 SQL 中，事务（Transaction）是作为单个逻辑工作单元执行的一系列操作，这些操作要么完全完成，要么完全不完成。事务是数据库完整性的关键，它确保了数据库从一个一致的状态转换到另一个一致的状态。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Manual transaction</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> ID <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> Salary <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> ID <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> Salary <span class="operator">=</span> <span class="number">2000</span> <span class="keyword">WHERE</span> ID <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果出现错误,可以使用 ROLLBACK 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用START/BEGIN TRANSACTION</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION; <span class="comment">-- 或者 BEGIN;</span></span><br><span class="line">statement1;</span><br><span class="line">statement2;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p><strong>ACID</strong></p><ul><li><strong>原子性</strong>（Atomicity）：事务中的所有操作要么全部完成，要么全部不完成。如果事务中的某个操作失败，那么整个事务将被回滚，数据库状态不会改变。</li><li><strong>一致性</strong>（Consistency）：事务确保数据库从一个一致的状态转换到另一个一致的状态。事务开始和结束时，所有的业务规则都必须保持一致。</li><li><strong>隔离性</strong>（Isolation）：每个事务都在一个独立的工作区中执行，事务之间不会互相影响。这意味着并发事务的修改必须被隔离，直到事务提交，其他事务才能看到这些修改。</li><li><strong>持久性</strong>（Durability）：一旦事务被提交，它对数据库的更改就是永久性的。即使发生系统故障，更改也不会丢失。</li></ul><h2 id="并发事务-Concurrent-Transaction"><a href="#并发事务-Concurrent-Transaction" class="headerlink" title="并发事务 Concurrent Transaction"></a>并发事务 Concurrent Transaction</h2><h3 id="事务并发问题"><a href="#事务并发问题" class="headerlink" title="事务并发问题"></a>事务并发问题</h3><p>多用户并发访问数据库时,可能会出现以下问题：</p><ul><li><p><strong>dirty read</strong><br>A transaction reads data written by a concurrent uncommitted transaction.</p></li><li><p><strong>nonrepeatable read</strong><br>A transaction re-reads data it has previously read and finds that data has been modified by another transaction (that committed since the initial read).</p></li><li><p><strong>phantom read</strong><br>A transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows satisfying the condition has changed due to another recently-committed transaction.</p></li><li><p><strong>serialization anomaly</strong><br>The result of successfully committing a group of transactions is inconsistent with all possible orderings of running those transactions one at a time.</p></li></ul><h3 id="Transaction-Isolation-Level"><a href="#Transaction-Isolation-Level" class="headerlink" title="Transaction Isolation Level"></a>Transaction Isolation Level</h3><table><thead><tr><th>Isolation Level</th><th>Dirty Read</th><th>Nonrepeatable Read</th><th>Phantom Read</th><th>Serialization Anomaly</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>Allowed, but not in PG</td><td>Possible</td><td>Possible</td><td>Possible</td></tr><tr><td>Read committed</td><td>Not possible</td><td>Possible</td><td>Possible</td><td>Possible</td></tr><tr><td>Repeatable read</td><td>Not possible</td><td>Not possible</td><td>Allowed, but not in PG</td><td>Possible</td></tr><tr><td>Serializable</td><td>Not possible</td><td>Not possible</td><td>Not possible</td><td>Not possible</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置事务隔离级别</span></span><br><span class="line"><span class="keyword">SET</span> <span class="operator">&lt;</span>SESSION<span class="operator">|</span><span class="keyword">GLOBAL</span><span class="operator">&gt;</span> TRANSACTION ISOLATION LEVEL <span class="operator">&lt;</span>READ UNCOMMITTED<span class="operator">|</span>READ COMMITTED<span class="operator">|</span>REPEATABLE READ<span class="operator">|</span>SERIALIZABLE<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>Reference:<br><a href="https://www.postgresql.org/docs/9.5/transaction-iso.html">postgresql-transaction-isolation-levels</a><br><a href="https://zhuanlan.zhihu.com/p/254453080">zhihu</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数据库学习笔记，本篇主要记录SQL多表查询以及Transaction相关的知识点。</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="DataBase" scheme="https://efterklang.github.io/categories/Tech/DataBase/"/>
    
    
    <category term="DataBase" scheme="https://efterklang.github.io/tags/DataBase/"/>
    
    <category term="SQL" scheme="https://efterklang.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SAM Interface</title>
    <link href="https://efterklang.github.io/Tech/Java/functionalInterface/"/>
    <id>https://efterklang.github.io/Tech/Java/functionalInterface/</id>
    <published>2024-02-09T16:57:54.000Z</published>
    <updated>2024-02-13T07:33:46.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SAM-Interface"><a href="#SAM-Interface" class="headerlink" title="SAM Interface"></a>SAM Interface</h2><p><strong>Single Abstract Method Interfaces (SAM Interfaces)</strong> are also known as <strong>Functional Interfaces</strong>.A functional interface in Java is an interface that contains only one abstract method. They can have any number of default or static methods.</p><p>The main roles of functional interfaces are:</p><ul><li>Support for <strong>Lambda Expressions</strong> and <strong>Method References</strong></li><li>Support for <strong>Stream API</strong></li></ul><p>Here’s an example of a functional interface which is implemented using a lambda expression:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GreetingService</span> <span class="variable">greetService</span> <span class="operator">=</span> (message) -&gt; &#123;System.out.println(<span class="string">&quot;Hello &quot;</span> + message)&#125;;</span><br><span class="line">        greetService.sayHello(<span class="string">&quot;Efterklang&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🪧Note:</p><ul><li>The <code>@FuncitonalInterface</code> annotation is optional.</li><li>The parentheses <code>()</code> are optional if there is only one parameter.</li><li>The curly braces <code>&#123;&#125;</code> are optional if there is only one statement.</li></ul><h2 id="Create-SAM-Interface-Instances"><a href="#Create-SAM-Interface-Instances" class="headerlink" title="Create SAM Interface Instances"></a>Create SAM Interface Instances</h2><p>Instances of functional interfaces can be created with lambda expressions, method references, or constructor references.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// λ Expressions</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> (name) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Sending email&quot;</span> + name);</span><br><span class="line">        &#125;;</span><br><span class="line">        message.send(<span class="string">&quot;Efterklang&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Method References</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * In this example, System.out::println is a method reference that refers to the println method of the System.out object.</span></span><br><span class="line"><span class="comment"> * The method reference is equivalent to the lambda expression x -&gt; System.out.println(x).</span></span><br><span class="line"><span class="comment"> * Here this reference acts as Consumer functional interface instance.</span></span><br><span class="line"><span class="comment"> * void java.lang.Iterable.forEach(Consumer&lt;? super String&gt; action)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Cherry&quot;</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructor References</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Person(String name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonFactory</span> &#123;</span><br><span class="line">    Person <span class="title function_">create</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">PersonFactory</span> <span class="variable">factory</span> <span class="operator">=</span> Person::<span class="keyword">new</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> factory.create(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">System.out.println(person.getName());  <span class="comment">// Outputs: John</span></span><br></pre></td></tr></table></figure><h2 id="Examples-of-SAM-Interfaces"><a href="#Examples-of-SAM-Interfaces" class="headerlink" title="Examples of SAM Interfaces"></a>Examples of SAM Interfaces</h2><p>Java’s standard library includes many commonly used SAM interfaces, such as <code>Runnable</code>, <code>Callable</code>, <code>Comparable</code>,<code>Consumer</code>, and many others in the <code>java.util.function</code> package.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Runs this operation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Callable</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> computed result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception if unable to compute a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(T o)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Consumer&lt;T&gt; <span class="title function_">andThen</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here’s an example of using the <code>Comparator</code> and <code>Consumer</code> interfaces with lambda expressions:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;John&quot;</span>, <span class="number">20</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">22</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">18</span>)</span><br><span class="line">         );</span><br><span class="line">        <span class="comment">//Here comparator is a functional interface(Comparator&lt;Student&gt;) instance</span></span><br><span class="line">        Comparator&lt;Student&gt; comparator = Comparator.comparing(Student::getAge);</span><br><span class="line">        students.stream().sorted(comparator);</span><br><span class="line">        students.forEach(student -&gt; &#123;</span><br><span class="line">            System.out.println(student.getName()+  <span class="string">&quot;,&quot;</span> + student.getAge());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Single Abstract Method Interfaces (SAM Interfaces) are also known as Functional Interfaces. This article explains how to create and use SAM interfaces in Java.</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="Java" scheme="https://efterklang.github.io/categories/Tech/Java/"/>
    
    
    <category term="Java" scheme="https://efterklang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《新台》</title>
    <link href="https://efterklang.github.io/Reading/Poems/%E3%80%8A%E6%96%B0%E5%8F%B0%E3%80%8B/"/>
    <id>https://efterklang.github.io/Reading/Poems/%E3%80%8A%E6%96%B0%E5%8F%B0%E3%80%8B/</id>
    <published>2024-02-02T12:43:58.000Z</published>
    <updated>2024-02-02T13:28:37.509Z</updated>
    
    <content type="html"><![CDATA[<style>p {    text-indent: 2em;}</style><center> 诗经·国风·邶风</center><center><strong>新台有泚 河水弥弥</strong></center><center><strong>燕婉之求 蘧篨不鲜</strong></center><center><strong>新台有洒 河水浼浼</strong></center><center><strong>燕婉之求 蘧篨不殄</strong></center><center><strong>鱼网之设 鸿则离之</strong></center><center><strong>燕婉之求 得此戚施</strong></center><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>新台：台名，卫宣公为纳宣姜所筑，故址在今山东省甄城县黄河北岸。台：台基，宫基，新建的房子。</li><li>有：语助词，做形容词词头，无实义。</li><li>有泚（cǐ）：鲜明的样子。</li><li>河：指黄河。弥（mí）弥：水盛大的样子。</li><li>燕婉：指夫妇和好。燕，安；婉，顺。</li><li>籧（qú）篨（chú）：不能俯者。古代钟鼓架下兽形的柎，其兽似豕，蹲其后足，以前足据持其身，仰首不能俯视。喻身有残疾不能俯视之人，此处讥讽卫宣公年老体衰腰脊僵硬状。一说指癞蛤蟆一类的东西。鲜（xiǎn）：少，指年少。一说善。</li><li>洒（cuǐ）：高峻的样子。</li><li>浼（měi）浼：水盛大的样子。</li><li>殄（tiǎn）：通“腆”，丰厚，美好。</li><li>设：设置。</li><li>鸿：蛤蟆，一说大雁。离：离开。一说离通“丽”，附着，遭遇。一说离通“罹”，遭受，遭遇，这里指落网。</li><li>戚施（shī）：蟾蜍，蛤蟆，其四足据地，无须，不能仰视，喻貌丑驼背之人</li></ul><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>新台明丽又辉煌，河水洋洋东流淌。本想嫁个如意郎，却是丑得蛤蟆样。</p><p>新台高大又壮丽，河水漫漫东流去。本想嫁个如意郎，却是丑得不成样。</p><p>设好鱼网把鱼捕，没想蛤蟆网中游。本想嫁个如意郎，得到却是如此丑。</p><h2 id="鉴赏"><a href="#鉴赏" class="headerlink" title="鉴赏"></a>鉴赏</h2><p>此诗若按旧说理解，一、二章赋陈其事，第三章起兴以比。诗开篇即夸耀卫宣公建造的新台是多么宏伟华丽，其下奔流的淇河之水是多么丰盈浩瀚。这都是极力渲染卫宣公的赫赫威势和装点门面，也可以看作是姜氏（宣姜）眼中所见，已被宣公的表面现象迷惑了。她本为是嫁过来追求燕婉之好，想过一种郎才女貌、琴瑟和谐的幸福生活的，却不料成了一个糟老头子的掌中玩物。</p><p>全诗三章，前两章叠咏。叠咏的两章前二句是兴语，但兴中有赋：卫宣公欲夺未婚之儿媳，先造“新台”，来表示事件的合法性，其实是障眼法。好比唐明皇欲夺其子寿王妃即杨玉环，先让她入道观做女观一样，好像这一来，一切就合理合法了。然而丑行就是丑行，丑行是欲盖弥彰的。诗人大赞“新台有泚”“新台有洒”，正言欲反，其兴味在于，新台是美的，但遮不住老头子干的丑事。这里是运用反形（或反衬）的修辞手法，使美愈美，丑愈丑。</p><p>“新台”之事的直接受害者是宣姜：美丽的少女配了个糟老头，而且还是个驼背鸡胸，本来该做她老公公的人。“鱼网之设，鸿则离之。”打鱼打个癞虾蟆，是非常倒楣，非常丧气，又非常无奈的事。按照闻一多《诗经通义》中的说法：“《国风》中凡言鱼者，皆两性间互称其对方之虞语（隐语），无一实拾鱼者。”古今诗歌中以捕鱼、钓鱼喻男女求偶之事的民歌很多。例如汉乐府民歌《江南曲》：“江南可采莲，莲叶何田田，鱼戏莲叶间。鱼戏莲叶东，鱼戏莲叶西，鱼戏莲叶南，鱼戏莲叶北。”《僮人情歌》：“天上无风燕子飞，江河无水现沙磊。鱼在深塘空得见，哄哥空把网来围。”即是显例。此诗中所写的就是女子对婚姻的幻想和现实的相悖，构成异常强烈的对比，产生了异乎寻常的艺术效果。这里强烈地表明：宣姜可真是倒楣透了。诗中“河水弥弥”“河水浼浼”，亦似有暗喻宣姜泪流不止之意，就如《卫风·氓》“淇水汤汤，渐车帷裳”以及辛弃疾《菩萨蛮·书江西造口壁》“郁孤台下清江水，中间多少行人泪”所表现的那样，渲染出一种浓厚的悲剧氛围</p>]]></content>
    
    
    <summary type="html">新台有泚 河水弥弥</summary>
    
    
    
    <category term="Reading" scheme="https://efterklang.github.io/categories/Reading/"/>
    
    <category term="Poems" scheme="https://efterklang.github.io/categories/Reading/Poems/"/>
    
    
    <category term="中国古代诗词" scheme="https://efterklang.github.io/tags/%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BB%A3%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>《二子乘舟》</title>
    <link href="https://efterklang.github.io/Reading/Poems/%E3%80%8A%E4%BA%8C%E5%AD%90%E4%B9%98%E8%88%9F%E3%80%8B/"/>
    <id>https://efterklang.github.io/Reading/Poems/%E3%80%8A%E4%BA%8C%E5%AD%90%E4%B9%98%E8%88%9F%E3%80%8B/</id>
    <published>2024-02-02T06:41:28.000Z</published>
    <updated>2024-02-11T15:48:09.942Z</updated>
    
    <content type="html"><![CDATA[<style>p {    text-indent: 2em;}</style><center> 诗经·国风·邶风</center><center><strong>二子乘舟 泛泛其景</strong></center><center><strong>愿言思子 中心养养</strong></center><center><strong>二子乘舟 泛泛其逝</strong></center><center><strong>愿言思子 不瑕有害</strong></center><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>二子: 卫宣公的两个异母子，公子伋和公子寿</li><li>泛泛: 飘荡貌。王先谦《集疏》：“泛，浮貌。重言之曰泛泛。”</li><li>景: 通憬，远行貌 闻一多《诗经通义》“景读为‘迥’，言漂流渐远也”。</li><li>愿：思念貌</li><li>中心: 心中</li><li>养(yáng 羊) 心中烦躁不安。</li><li>瑕：训“胡”，通“无”。</li><li>不瑕，犹言“不无”，疑惑、揣测之词</li></ul><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>两人乘一叶孤舟，渐渐向远处漂流。深深思念你们俩，我心中充满忧愁。</p><p>两人乘一叶小船，渐渐地越行越远。深深思念你们俩，愿你们顺利平安。</p><h2 id="鉴赏"><a href="#鉴赏" class="headerlink" title="鉴赏"></a>鉴赏</h2><p>《毛诗序》云：“《二子乘舟》，思伋、寿也。卫宣公之二子，争相为死，国人伤而思之，作是诗也。宣公为伋取于齐女而美，公夺之，生寿及朔。朔与其母诉伋于公，公令伋使齐，使贼先待于隘而杀之。寿知之，以告伋，使去之。伋曰：‘君命也，不可以逃。’寿窃其节而先往，贼杀之。伋至，曰：‘君命杀我，寿有何罪？’又杀之。”。</p><p>刘向《新序·节士》云:“寿知其母阴谋，遂与伋同舟，使舟人不得杀伋，方乘舟时，伋傅母恐其死也，闵而作诗”。</p><h2 id="轶事典故"><a href="#轶事典故" class="headerlink" title="轶事典故"></a>轶事典故</h2><p>卫宣公，姬姓卫氏名晋，为卫庄公之子。卫庄公死后，公子晋的哥哥太子完继位，是为卫桓公。卫桓公十六年，卫宣公的另一个兄弟公子州吁聚集从卫国逃走的流民袭击杀害卫桓公，自立为君，史称卫前废公。卫国人因卫前废公杀害卫桓公，而且喜好打仗，所以都不拥护他。同年九月，卫国大臣石碏联合陈桓公杀死卫前废公。十二月，石碏将公子晋从邢国迎回卫国，并拥立公子晋继位，是为卫宣公。</p><p>卫宣公和父亲卫庄公的姬妾夷姜私通，生子名伋，卫宣公把公子伋托给右公子。卫宣公很宠爱夷姜，因此将公子伋立为太子，并让右公子教导他。伋长大成人后，卫宣公为他聘娶齐女，只因新娘子是个大美人，便改变主意，在河上高筑新台，把齐女截留下来，霸为己有，就是后来的宣姜。国人恶之而作《新台》p><p>卫宣公得到宣姜后，宣姜生下两个儿子公子寿和公子朔，卫宣公让左公子教导他们。夷姜自缢。宣姜与公子朔在宣公跟前诬陷急子。宣公派遣急子出使齐国，派人伪装强盗等在莘地，准备杀死他。</p><p>太子伋将要动身时，公子寿知道公子朔仇恨太子伋，而卫宣公想杀掉太子伋，于是对太子伋说：“边境上的强盗看见你手中的白色旄节，就会杀死你，你可不要前去。”并让太子伋赶快逃走。太子伋不同意说：“弃父之命，恶用子矣！有无父之国则可也。”等到太子伋临走时，公子寿用酒把太子伋灌醉，然后偷走太子伋的白色旄节。公子寿车上插着白色旄节奔驰到莘地，莘地的强盗看见来人果真手持白色旄节，就杀死公子寿。公子寿死后，太子伋赶到，对强盗说：“我之求也，此何罪？请杀我乎！”强盗一并杀掉太子伋，然后报告卫宣公。卫宣公于是立公子朔为太子，即后来的卫惠公。</p>]]></content>
    
    
    <summary type="html">二子乘舟 泛泛其景</summary>
    
    
    
    <category term="Reading" scheme="https://efterklang.github.io/categories/Reading/"/>
    
    <category term="Poems" scheme="https://efterklang.github.io/categories/Reading/Poems/"/>
    
    
    <category term="中国古代诗词" scheme="https://efterklang.github.io/tags/%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BB%A3%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>Java Evaluation Strategy</title>
    <link href="https://efterklang.github.io/Tech/Java/java%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5/"/>
    <id>https://efterklang.github.io/Tech/Java/java%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5/</id>
    <published>2024-02-01T12:42:59.000Z</published>
    <updated>2024-02-01T14:51:41.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><strong>Parameter</strong>: 形式参数,是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数。<br><strong>Argument</strong>: 实际参数,在调用有参函数时，主调函数和被调函数之间有数据传递关系。在主调函数中调用一个函数时，函数名后面括号中的参数称为“实际参数”<br><strong>Pass By Value</strong>: 值传递,是指在调用函数时将实际参数<strong>复制</strong>一份传递到函数中,这样在函数中如果对参数进行修改,将不会影响到实际参数。</p><ul><li>In Pass by value, the function is called by directly passing the value of the variable as an argument. So any changes made inside the function do not affect the original value.</li><li>In Pass by value, parameters passed as arguments create their own copy. So any changes made inside the function are made to the copied value not to the original value</li></ul><p><strong>Pass by Reference</strong>: 引用传递,是指在调用函数时将实际参数的地址直接传递到函数中,那么在函数中对参数所进行的修改,将影响到实际参数。</p><ul><li>In Pass by Reference, Function is called by directly passing the reference&#x2F;address of the variable as an argument. So changing the value inside the function also change the original value. In JavaScript array and Object follows pass by reference property.</li><li>In Pass by reference, parameters passed as an arguments does not create its own copy, it refers to the original value so changes made inside function affect the original value.</li></ul><p>Call by value和call by reference的重要区别在于，call by value是将实际参数的副本传递给函数，而call by reference是将实际参数的地址传递给函数。在call by value中，函数对参数的修改不会影响到实际参数，而在call by reference中，函数对参数的修改会影响到实际参数。</p><blockquote><p>在计算机科学中，求值策略（英语：Evaluation strategy）是确定编程语言中表达式的求值的一组（通常确定性的）规则。重点典型的位于函数或算子上——求值策略定义何时和以何种次序求值给函数的实际参数，什么时候把它们代换入函数，和代换以何种形式发生。经常使用用来研究函数的形式系统λ演算来建模求值策略，这里它们通常叫做归约策略。求值策略分为两大基本类，严格的和非严格的，基于如何处理给函数的实际参数<br><em>from wikipedia</em></p></blockquote><hr><h2 id="Java中的参数传递"><a href="#Java中的参数传递" class="headerlink" title="Java中的参数传递"></a>Java中的参数传递</h2><p>那么为什么在Java中只有call by value呢？</p><p>这主要是因为Java中的所有参数传递都是通过值传递的。在Java中，对象引用作为参数传递时，实际上是将对象在<strong>堆</strong>(heap)中地址值的<strong>copy</strong>传递给函数，而不是对象本身。基本类型的参数传递也是如此，传递的是基本类型字面量值的copy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        changePrimitive(x);</span><br><span class="line">        System.out.println(x);  <span class="comment">// 输出 10，因为 x 的值没有被改变</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line">        changeReference(y);<span class="comment">// num 是 y 的copy</span></span><br><span class="line">        System.out.println(y);  <span class="comment">// 输出 10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] z = &#123;<span class="number">10</span>&#125;;</span><br><span class="line">        changeArray(z);<span class="comment">// num 为 z 的 copy</span></span><br><span class="line">        System.out.println(z[<span class="number">0</span>]);  <span class="comment">// 输出 20，因为 z[0] 的值被改变</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changePrimitive</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        num = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeReference</span><span class="params">(Integer num)</span> &#123;</span><br><span class="line">        num = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">20</span>);<span class="comment">//num本来指向y对象,现在指向另一个Integer对象,此后num和y没有任何关系.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeArray</span><span class="params">(<span class="type">int</span>[] num)</span> &#123;</span><br><span class="line">        num[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">为什么说Java中只有值传递</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="Java" scheme="https://efterklang.github.io/categories/Tech/Java/"/>
    
    
    <category term="Java" scheme="https://efterklang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hashtable如何插入键值对?</title>
    <link href="https://efterklang.github.io/Tech/Java/hashTable/"/>
    <id>https://efterklang.github.io/Tech/Java/hashTable/</id>
    <published>2024-01-28T07:19:50.000Z</published>
    <updated>2024-01-28T12:41:43.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>如果你已了解 HashTable 相关的基本概念, 可以跳过本节.<a href="#%E6%8F%92%E5%85%A5%E9%94%AE%E5%80%BC%E5%AF%B9%E6%B5%81%E7%A8%8B">Next Part</a></p><p>Hashtable 是一种数据结构, 用于存储键值对, 通过 key 来计算 index, 从而快速查找 value.</p><p>它以数组+链表或者数组+红黑树的形式来存储数据（在 Java 8 之后，当链表的长度超过一定阈值时，链表会转换为红黑树以提高性能）, 通过 key 的 hashcode 来计算 index, 从而快速查找 value.</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li><strong>Buckets</strong> HashTable 内部有一个数组(Buckets),存放多个 Bucket，每个元素（也称为 bucket）存储键值对组（Key-Value Pairs）,每个 Bucket 中存放着所有 HashKey 相同的(Key, Value);<br>ps:hash bucket 是一个概念,在 JDK 中其数据结构可为链表或者红黑树.引入 bucket 的目的是为了解决 hash 冲突.</li><li><strong>Hash collision</strong> 哈希冲突&#x2F;哈希碰撞,指不同的 key 通过哈希函数计算出相同的 index,这种情况称为哈希冲突。</li><li><code>hashCode()</code> 哈希函数,它接受一个键作为输入，并返回一个整数，该整数用作在数组中存储键值对的索引。设计哈希函数时,应使得哈希函数尽可能地均匀地分布,尽量让不同的 key 得到不同的 hashCode。</li><li><strong>Key-Value Pair</strong> 这是存储在 HashTable 中的数据。每个键都是唯一的，并映射到一个值。</li><li><strong>index</strong> 索引.本文中指 通过 key 的 hashcode 计算出来的 index(index 应该小于 buckets 的长度), 用于定位 key-value pair 所在的 bucket</li></ul><center><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/hashTable-2024-01-28-17-17-27" alt="hashTable-dataStruct"></p></center><h2 id="插入键值对流程"><a href="#插入键值对流程" class="headerlink" title="插入键值对流程"></a>插入键值对流程</h2><h3 id="计算-index"><a href="#计算-index" class="headerlink" title="计算 index"></a>计算 index</h3><center><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/hashTable-2024-01-28-20-40-44" alt="hashTable-getIndex"><br>在 Java 中，<code>Object</code> 类提供了一个方法 <code>hashCode()</code>，它返回对象的哈希码值。帮助确定对象应该存储在哈希表的哪个位置。</p></center><blockquote><p><code>hashCode()</code> 的具体实现取决于对象的类。例如，对于 <code>String</code> 类，<code>hashCode()</code> 方法计算字符串中每个字符的哈希码值，并将它们组合在一起。</p><p><strong>请注意</strong>，Objects 规范中,如果两个对象相等（根据 <code>equals(Object)</code> 方法），那么它们的哈希码值必须相同。但是，两个对象的哈希码值相同时，两个对象不一定相等。这是因为可能存在哈希冲突，即两个不同的对象具有相同的哈希码值。</p></blockquote><p>在哈希表中，我们首先需要通过 hashCode() 方法获取对象的哈希码，然后再通过取余操作将哈希码映射到哈希表的大小范围(即 bucketsLen)内。<br><a href="#%E5%8F%96%E4%BD%99%E5%AF%B9-HashCollision-%E7%9A%84%E5%BD%B1%E5%93%8D">取余对 HashCollision 的影响</a></p><p>JDK 源码中,取余操作的实现为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexFor</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理见<a href="#Hashtable-%E5%BF%AB%E9%80%9F%E5%8F%96%E6%A8%A1%E6%96%B9%E6%A1%88">Hashtable 快速取模方案</a></p><h3 id="解决-HashCollision"><a href="#解决-HashCollision" class="headerlink" title="解决 HashCollision"></a>解决 HashCollision</h3><p>插入键值对时,如果发生 index 相同,意味着发生了哈希冲突</p><p>冲突解决的方法有很多种，常见的有链地址法(每个 bucket 存储一个链表，新的键值对被添加到链表的末尾)和开放地址法(如果一个 bucket 被占用，HashTable 会寻找下一个可用的 bucket)。</p><p>JDK 中的 HashTable 使用的是链地址法,即每个 bucket 存储一个链表，新的键值对被添加到链表的末尾。JDK 1.8 之后,当链表的长度超过一定阈值时，链表会转换为红黑树以提高性能。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="取余对-HashCollision-的影响"><a href="#取余对-HashCollision-的影响" class="headerlink" title="取余对 HashCollision 的影响"></a>取余对 HashCollision 的影响</h3><p><strong>基本概念</strong></p><ul><li><code>被除数 ÷ 除数 = 商 ... 余数</code></li><li><code>被除数 mod|% 除数 = 余数</code> 除数&gt;被除数,余数&#x3D;被除数</li><li>被除数: dividend</li><li>除数: divisor</li><li>商: quotient</li><li>余数: remainder</li><li>素数&#x2F;质数: prime number, 除了 1 和它本身以外不再有其他的因数</li><li>因子: factor, 一个数的因子是能够整除它的数,例如 2 是 4 的因子,因为 4&#x2F;2&#x3D;2</li><li>合数: composite number, 除了 1 和它本身以外还有其他的因数</li></ul><p>在哈希函数中，取余操作通常用于将大范围的哈希值映射到一个较小的范围,取余操作的结果是哈希值的分布可能会发生变化，这可能会影响哈希碰撞的频率。</p><p>给定数列作为 keys, 以及模数(被除数) n 作为 buckets 长度, 通过取余操作, 可以将数列的值映射到[0, n)的范围内。<br>$$a_n &#x3D; 1+n*step, n \in N$$</p><p>取余操作可能会影响哈希碰撞的频率。除数选取素数可以减少哈希碰撞的频率。</p><p>​ 如果 step 是 n 的因子,那么就容易发生哈希碰撞,哈希碰撞的间隔即为 step 的值。<br>例如,n &#x3D; 6, step &#x3D; 2, 那么哈希碰撞的间隔为 2, 即 index &#x3D; 1, 3, 5 处会发生哈希碰撞.见代码示例</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">step = 2, n = 6;</span><br><span class="line">array:  1, 3, 5, 7, 9,11,13,15,17,19,21,23,25,27,29,31</span><br><span class="line">index:  1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1</span><br></pre></td></tr></table></figure><p>数列的冲突分布间隔为因子大小，对于同样的随机数列，n 的因子越多，发生冲突的可能性就越大.故而，我们应该尽量避免因子过多的情况,如果情况允许,尽量选择素数作为除数。</p><h3 id="Hashtable-快速取模方案"><a href="#Hashtable-快速取模方案" class="headerlink" title="Hashtable 快速取模方案"></a>Hashtable 快速取模方案</h3><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>对于二进制的位运算，整除 8(2 的三次方) 等价于右移三位</p><p>\(0110 0100 &gt;&gt; 3 &#x3D; (0000 1100)_2 &#x3D; 12\) 即为商</p><p>而<code>01100100</code>的后三位\((100)_2 &#x3D; 4\)即为余数</p><p>已知\(n &#x3D; 2^m\)，商为<code>hash</code>二进制数右移 m 位，而余数为<code>hash</code>的后 m 位</p><p>要求<code>hash % n</code>，即求<code>hash</code>的后 m 位，而<code>n-1</code>的二进制表示恰为 m 个 1，可推得<code>hash &amp; (n-1)</code>等与<code>hash % n</code></p><div>$$\begin{align}\nonumber& 2 = (10)_2 \quad 2 -1 = (1)_2 \\& 4 = (100)_2 \quad 4 -1 = (11)_2 \\& 8 = (1000)_2 \quad 8 - 1 = (111)_2 \\& ...... \\&归纳得到:\\& 2^m = (1000...0)_2 最高位为1，其后有m个零\\& 2^m-1 = (111..1)_2 共有m个1\end{align}$$</div><p><strong>例题验证</strong></p><p><code>(n-1) &amp; hash</code>，不妨设<code>hash</code> &#x3D; 45367，二进制为 0100 1010 1111 0111，求<code>hash % 8</code></p><p><code>45367 % 8 = 45367 &amp; 7</code></p><div>$$\begin{align}&8 = (1000)_2 \quad7 = (111)_2 \quad hash = \ (0100\ 1010\ 1111\ 0111)_2 \\&45367 \ \%\  8 = 7 \\&(0100 1010 1111 0111)_2 \ \&\  (0000\ 0000\ 0000\ \ 0111)_2 = (111)_2 = 7\end{align}$$</div><h4 id="为什么-java-中哈希表的大小是-2-的幂次方"><a href="#为什么-java-中哈希表的大小是-2-的幂次方" class="headerlink" title="为什么 java 中哈希表的大小是 2 的幂次方?"></a>为什么 java 中哈希表的大小是 2 的幂次方?</h4><h4 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h4><p>在 JDK 中,<code>Hashtable</code>求模的方式为 <code>hash &amp; (n-1)</code>,这种方式的前提是 n 为 2 的幂次方,其他情况下未必成立.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bucketsLen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>).hashCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;hashCode = &quot;</span> + hashCode);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hashCode &amp; (bucketsLen - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;index = &quot;</span> + index);</span><br><span class="line">        index = hashCode % bucketsLen;</span><br><span class="line">        System.out.println(<span class="string">&quot;index = &quot;</span> + index);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">isEqual</span> <span class="operator">=</span> (hashCode % bucketsLen) == (hashCode &amp; (bucketsLen - <span class="number">1</span>)) ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;hashCode % bucketLen == hashCode &amp; (bucketsLen - 1) is &quot;</span> + isEqual);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">INPUT</span> = <span class="number">16</span>]</span><br><span class="line">[<span class="type">OUTPUT</span>]</span><br><span class="line">hashCode = <span class="number">69609650</span></span><br><span class="line">index = <span class="number">2</span></span><br><span class="line">index = <span class="number">2</span></span><br><span class="line">hashCode % <span class="number">16</span> == hashCode &amp; (bucketsLen - <span class="number">1</span>) is true</span><br><span class="line"><span class="literal">----------------------------------------</span></span><br><span class="line">[<span class="type">INPUT</span> = <span class="number">47</span>]</span><br><span class="line">hashCode = <span class="number">69609650</span></span><br><span class="line">index = <span class="number">34</span></span><br><span class="line">index = <span class="number">18</span></span><br><span class="line">hashCode % bucketLen == hashCode &amp; (bucketsLen - <span class="number">1</span>) is false</span><br></pre></td></tr></table></figure><blockquote><p>hashMap 中的哈希函数 <code>hash &amp; (n - 1)</code> 跟取余运算 <code>hash % n</code> 结果是一致的。极端情况下，如果 hashMap 中存了几千万的数据。当某次插入数据引发扩容时，需要重新计算下标值，此时用位运算可以提高性能；<br>平常代码中使用，对于代码性能提升优化微乎其微，且会影响代码可读性</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.csdn.net/zhishengqianjun/article/details/79087525">算法分析：哈希表的大小为何是素数</a><br><a href="https://blog.csdn.net/lovehang99/article/details/101997405">哈希函数除数的选取为什么是质数？哈希冲突解决方法,闭散列&amp;开散列</a></p>]]></content>
    
    
    <summary type="html">介绍Java Hashtable的数据结构;插入键值对的流程分析</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="Java" scheme="https://efterklang.github.io/categories/Tech/Java/"/>
    
    
    <category term="Java" scheme="https://efterklang.github.io/tags/Java/"/>
    
    <category term="Hashtable" scheme="https://efterklang.github.io/tags/Hashtable/"/>
    
  </entry>
  
  <entry>
    <title>禁用系统快捷键</title>
    <link href="https://efterklang.github.io/Tech/Others/DisableShortcuts/"/>
    <id>https://efterklang.github.io/Tech/Others/DisableShortcuts/</id>
    <published>2024-01-28T05:05:01.000Z</published>
    <updated>2024-02-13T14:50:05.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>windows 系统中存在一些快捷键，比如 <code>win+space</code> 切换 <code>keyboard layout</code>,这些快捷键在某些情况下会造成不必要的麻烦，我尝试在<code>Time &amp; language &gt; Typing &gt; Advanced keyboard settings &gt; Input language hot keys</code>中弃用<code>win+space</code>快捷键,但d对于我的电脑而言,这并没有效果</p><p>因此,本文介绍通过 PowerToys Keyboardmanager 禁用这些快捷键。</p><blockquote><p>The PowerToys Keyboard Manager enables you to redefine keys on your keyboard.<br>For example, you can exchange the letter <code>A</code> for the letter <code>B</code> on your keyboard. When you press the <code>A</code> key, a <code>B</code> will be inserted.</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>下载安装<a href="https://github.com/microsoft/PowerToys/releases">PowerToys</a></p></li><li><p>打开 PowerToys，在左侧边栏中选择<code>键盘管理器</code>，点击<code>重新映射快捷键</code>.进入如下页面</p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/DisableShortcuts-2024-01-28-13-17-12" alt="remapping"></p></li><li><p>在页面中,点击<code>Add shortcut remapping</code>重新映射快捷键，你可以将<code>win+space</code>映射为<code>undefined</code>，在<code>Target app</code>中你可以填写你想要在哪个app中应用这一映射.这里我将其映射为<code>PowerToysRun</code>的快捷键</p></li><li><p>单击<code>ok</code>,成功添加映射</p></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>PowerToys 还有很多其他的功能，比如<code>PowerToysRun</code>，<code>FancyZones</code>等，可以根据自己的需求进行配置。<br>关于Keyboard-manager的更多信息，可以参考<br><a href="https://learn.microsoft.com/en-us/windows/powertoys/keyboard-manager">Keyboard-manager文档</a></p>]]></content>
    
    
    <summary type="html">windows系统中存在一些快捷键，比如win+space切换keyboard layout,这些快捷键在某些情况下会造成不必要的麻烦,并且有时缺少便捷的方法弃用这些快捷键,本文介绍通过PowerToys禁用这些快捷键。</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="Others" scheme="https://efterklang.github.io/categories/Tech/Others/"/>
    
    
    <category term="Shortcuts" scheme="https://efterklang.github.io/tags/Shortcuts/"/>
    
    <category term="Windows" scheme="https://efterklang.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>2077任务名中的彩蛋</title>
    <link href="https://efterklang.github.io/Gaming/CyberPunk2077/2077%E4%BB%BB%E5%8A%A1%E5%90%8D%E4%B8%AD%E7%9A%84%E5%BD%A9%E8%9B%8B/"/>
    <id>https://efterklang.github.io/Gaming/CyberPunk2077/2077%E4%BB%BB%E5%8A%A1%E5%90%8D%E4%B8%AD%E7%9A%84%E5%BD%A9%E8%9B%8B/</id>
    <published>2024-01-28T02:30:31.000Z</published>
    <updated>2024-01-28T04:18:00.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h1><p><strong>再见杰克</strong>|再见杰克 痛仰乐队<br><strong>飞翔鸟</strong>|飞翔鸟 唐朝乐队<br><strong>杀死那个石家庄人</strong>|直到大厦崩塌 万能青年旅店<br><strong>黑梦</strong>|黑梦,高级动物 窦唯<br><strong>梦缠绕的时候</strong>|梦缠绕的时侯 超载乐队<br><strong>火车驶向云外，梦安魂于九霄</strong>|梦安眠于九霄 刺猬乐队<br><strong>白日梦蓝</strong>|伤害的比赛 刺猬乐队<br><strong>公路之歌</strong>|公路之歌 痛仰乐队<br><strong>快让我再雪地上撒点野</strong>|让我们在云顶撒点野,我的病就是没有感觉 崔健<br><strong>垃圾场</strong>|垃圾场 何勇<br><strong>没有理想的人不伤心</strong>|没有理想不伤心 新裤子乐队<br><strong>别来纠缠我</strong>|别来纠缠我 黑豹乐队<br><strong>一万次悲伤</strong>|一万次悲伤 逃跑计划<br><strong>花火</strong>|没有结局的表演 汪峰<br><strong>钟鼓楼</strong>|全都是正确答案 何勇<br><strong>花</strong>|根已经枯萎 花儿乐队<br><strong>山雀</strong>|不息的身体 万能青年旅店<br><strong>两天</strong>|一天用来希望,一天用来绝望 许巍<br><strong>火车快开</strong>|生活往哪开 二手玫瑰</p><hr><h1 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h1><p><strong>《All Along the Watchtower》</strong> Bob Dylan<br><strong>《A Little Help From My Friends》</strong> The Beatles<br><strong>《A Like Supreme》</strong> A Like Supreme</p><p><strong>《Beat on the Brat》</strong> Ramones<br><strong>《Belly Of The Beast》</strong> Anthrax<br><strong>《Boat Drinks》</strong> Jimmy Buffett<br><strong>《Both Sides Now》</strong> Joni Mitchell</p><p><strong>《Disasterpiece》</strong> Slipknot<br><strong>《(Don’t Fear) The Reaper》</strong> Blue Oyster Cult<br><strong>《Down on the Street》</strong> The Stooges</p><p><strong>《Every Breath You Take》</strong> The Police<br><strong>《Ex-Factor》</strong> Lauryn Hill</p><p><strong>《Following the River》</strong> The Rolling Stones<br><strong>《Forward to Death》</strong> Dead Kennedy<br><strong>《Fourtunate Son》</strong> Creedence Clearwater Revival</p><p><strong>《Gimme Danger》</strong> The Stooges<br><strong>《Ghost Town》</strong> The Specials</p><p><strong>《I Fought the Law》</strong> The Clash<br><strong>《I Don’t Wanna Hear It》</strong> Minor Threat<br><strong>《I Walk The Line》</strong> Jonny Cash<br><strong>《Imagine》</strong> John Lennon</p><p><strong>《Killing In The Name》</strong> Rage Against the Machine<br><strong>《Knockin’ on Heaven’s Door》</strong> Bob Dylan</p><p><strong>《Last Caress》</strong> Misfits<br><strong>《Life During Wartime》</strong> Talking Heads<br><strong>《Love Like Fire》</strong> Generation X<br><strong>《Lightening Breaks》</strong> Plasmatics</p><p><strong>《Meeting Alone the Edge》</strong> Pink Floyd</p><p><strong>《Nocturnes Op.55 No.1》</strong> Chopin<br><strong>《New Dawn Fades》</strong> Joy Division</p><p><strong>《Pyramid song》</strong> Radiohead<br><strong>《Psycho Killer》</strong> Talking Heads<br><strong>《Playing For Time》</strong> Madleen Kane<br><strong>《Play it Safe》</strong> Iggy Pop<br><strong>《Path of Glory》</strong> Plasmatics<br><strong>《Paid in Full》</strong> Fire B. &amp; Rakim<br><strong>《Pisces》</strong> JINJER</p><p><strong>《Riders On the Storm》</strong> The Doors<br><strong>《Rebel Rebel》</strong> David Bowie</p><p><strong>《Space Oddity》</strong> David Bowie<br><strong>《Serach&amp;Destroy》</strong> The Stooges<br><strong>《Smoke On The Water》</strong> Deep Purple<br><strong>《Stairway to Heaven》</strong> Led Zeppelin</p><p><strong>《Tapeworm》</strong> Pigface<br><strong>《The Beast In Me》</strong> Jonny Cash<br><strong>《Transmission》</strong> Joy Division<br><strong>《Totalimmortal》</strong> A.F.I<br><strong>《The Fool On The Hill》</strong> The Beatles<br><strong>《Talkin’ about a Revolution》</strong> Tracy Chapman<br><strong>《The Space In Between》</strong> How To Destroy Angels</p><p><strong>《Venus in Furs》</strong> The Velvet Underground</p><p><strong>《We Gotta Live Together》</strong> Dead Kennedys<br><strong>《Where is My Mind》</strong> Pixies</p><hr><h1 id="文学作品"><a href="#文学作品" class="headerlink" title="文学作品"></a>文学作品</h1><p><strong>For Whom the Bell Tolls</strong> 海明威的长篇小说,丧钟为谁而鸣;以美国人参加西班牙人民反法西斯战争为题材,1940 年首次出版</p><p><strong>比远方更远,只身打马</strong> 海子诗作,九月</p><blockquote><p>目击众神死亡的草原上野花一片<br>远在远方的风比远方更远<br>我的琴声呜咽　泪水全无<br>我把这远方的远归还草原<br>一个叫马头　一个叫马尾<br>我的琴声呜咽　泪水全无<br>远方只有在死亡中凝聚野花一片<br>明月如镜高悬草原映照千年岁月<br>我的琴声呜咽　泪水全无<br>只身打马过草原</p></blockquote>]]></content>
    
    
    <summary type="html">2077任务名中出现的彩蛋,不完全收集</summary>
    
    
    
    <category term="Gaming" scheme="https://efterklang.github.io/categories/Gaming/"/>
    
    <category term="CyberPunk2077" scheme="https://efterklang.github.io/categories/Gaming/CyberPunk2077/"/>
    
    
    <category term="CDPR" scheme="https://efterklang.github.io/tags/CDPR/"/>
    
    <category term="Music" scheme="https://efterklang.github.io/tags/Music/"/>
    
    <category term="Games" scheme="https://efterklang.github.io/tags/Games/"/>
    
    <category term="CyberPunk2077" scheme="https://efterklang.github.io/tags/CyberPunk2077/"/>
    
    <category term="Rock" scheme="https://efterklang.github.io/tags/Rock/"/>
    
  </entry>
  
  <entry>
    <title>DataBase Base_函数&amp;约束</title>
    <link href="https://efterklang.github.io/Tech/DataBase/DataBase02/"/>
    <id>https://efterklang.github.io/Tech/DataBase/DataBase02/</id>
    <published>2024-01-27T14:23:27.000Z</published>
    <updated>2024-02-13T07:36:09.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="AggregateFunction"><a href="#AggregateFunction" class="headerlink" title="AggregateFunction"></a>AggregateFunction</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><blockquote><p>An SQL aggregate function calculates on a set of values and returns a single value<br>Because an aggregate function operates on a set of values, it is often used with the GROUP BY clause of the SELECT statement. The GROUP BY clause divides the result set into groups of values and the aggregate function returns a single value for each group.<br><a href="https://www.sqltutorial.org/sql-aggregate-functions/"><em>SQL Tutorial</em></a></p></blockquote><p>The following are the commonly used SQL aggregate functions:</p><ul><li><code>AVG()</code> – returns the average of a set</li><li><code>COUNT()</code> – returns the number of items in a set</li><li><code>COUNT(*)</code> – returns the number of items in a set (including NULL values)</li><li><code>MAX()</code> – returns the maximum value in a set</li><li><code>MIN()</code> – returns the minimum value in a set</li><li><code>SUM()</code> – returns the sum of all or distinct values in a set</li></ul><p>Except for the <code>COUNT()</code> function, SQL aggregate functions ignore null.</p><p>You can use aggregate functions as expressions only in the following:</p><ul><li>The select list of a SELECT statement, either a subquery or an outer query.</li><li>A HAVING clause</li></ul><h2 id="StringFunction"><a href="#StringFunction" class="headerlink" title="StringFunction"></a>StringFunction</h2><p>Functions that allow you to manipulate string data more effectively.</p><ul><li><code>CONCAT(s1,s2,...,sn)</code> – return the result of concatenation two strings together.</li><li><code>LOWER(str),UPPER(str)</code> – converts a string to lower case or upper case.</li><li><code>LPAD(str,n,padstr),RPAD(str,n,padstr)</code> – left&#x2F;right pads a string with another string to a certain length.</li><li><code>TRIM(str),LTRIM(str),RTRIM(str)</code> – removes all spaces from a string or from the left or right side of a string.</li><li><code>REPLACE(str,source,replace)</code> – replaces all occurrences of a substring within a string with another substring.</li><li><code>SUBSTRING(str,pos,len)</code> – returns a substring from a string starting at a specified position with a specified length.<br>Reference:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;SQL&#x27;</span>,<span class="string">&#x27; is&#x27;</span>,<span class="string">&#x27; fun!&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> CONCAT(&quot;HELLO&quot;,&quot;WORLD&quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> HELLOWORLD              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(&quot;Hello,World&quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">LOWER</span>(&quot;Hello,World&quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> hello,world          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="keyword">SELECT</span> RPAD(&quot;1&quot;,<span class="number">5</span>,&quot;Z&quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> RPAD(&quot;1&quot;,<span class="number">5</span>,&quot;Z&quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>ZZZZ           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="keyword">SELECT</span> RTRIM(&quot;  HELLO   &quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> RTRIM(&quot;  HELLO   &quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span>   HELLO             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(&quot;Hello,World&quot;,&quot;World&quot;,&quot;SQL&quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPLACE(&quot;Hello,World&quot;,&quot;World&quot;,&quot;SQL&quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Hello,<span class="keyword">SQL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(&quot;Hello,World&quot;,<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">SUBSTRING</span>(&quot;Hello,World&quot;,<span class="number">1</span>,<span class="number">5</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Hello                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br></pre></td></tr></table></figure><h2 id="Math-Functions"><a href="#Math-Functions" class="headerlink" title="Math Functions"></a>Math Functions</h2><p>SQL has many mathematical functions that allow you to perform business and engineering calculations.</p><ul><li><code>ABS(x)</code> – returns the absolute value of x.</li><li><code>CEIL(x)</code> – returns the smallest integer that is greater than or equal to x.</li><li><code>FLOOR(x)</code> – returns the largest integer that is less than or equal to x.</li><li><code>RAND()</code> – returns a random floating-point value.</li><li><code>MOD(x,y)</code> – returns the remainder(modulo) of x divided by y, <code>MOD(10,7)</code> returns 3. e.g.</li><li><code>ROUND(x,d)</code> – returns a number rounded to d decimal places. <code>ROUND(2.6666,3)</code> returns 2.667 e.g.</li></ul><p><strong>Exercise</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- randomly generate 6 digits</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(ROUND(RAND(),<span class="number">6</span>),<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">SUBSTRING</span>(ROUND(RAND(),<span class="number">6</span>),<span class="number">3</span>,<span class="number">6</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">578207</span>                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br></pre></td></tr></table></figure><h2 id="Date-Functions"><a href="#Date-Functions" class="headerlink" title="Date Functions"></a>Date Functions</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURDATE(); <span class="comment">-- YYYY-MM-DD</span></span><br><span class="line"><span class="keyword">SELECT</span> CURTIME(); <span class="comment">-- HH:MM:SS</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW(); <span class="comment">-- YYYY-MM-DD HH:MM:SS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">YEAR</span>(<span class="type">date</span>); <span class="keyword">MONTH</span>(<span class="type">date</span>); <span class="keyword">DAY</span>(<span class="type">date</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(&quot;2023-1-2&quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">YEAR</span>(&quot;2023-1-2&quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">2023</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"></span><br><span class="line">DATEADD(<span class="type">date</span>,<span class="type">INTERVAL</span> expr type);</span><br><span class="line">DATEDIFF(date1,date2); <span class="comment">-- date1 - date2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(now(),<span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> DATE_ADD(now(),<span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">DAY</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2024</span><span class="number">-04</span><span class="number">-06</span> <span class="number">20</span>:<span class="number">09</span>:<span class="number">20</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(now(),&quot;2023-1-20&quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> DATEDIFF(now(),&quot;2023-1-20&quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+</span></span><br><span class="line"><span class="operator">|</span>                         <span class="number">372</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+</span></span><br></pre></td></tr></table></figure><p><strong>Exercises</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询每个员工的入职天数，并按照入职天数降序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> Name,DATEDIFF(now(),entrydate) <span class="keyword">AS</span> days <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> days <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="Control-Flow-Functions"><a href="#Control-Flow-Functions" class="headerlink" title="Control Flow Functions"></a>Control Flow Functions</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  if value is true, return if_true_expr, else return if_false_expr</span></span><br><span class="line">IF(<span class="keyword">value</span>,if_true_expr,if_false_expr)</span><br><span class="line"><span class="comment">-- if expr1 IS NULL, return expr2, else return expr1</span></span><br><span class="line">IFNULL(expr1,expr2)</span><br><span class="line"><span class="comment">-- condition1为真，返回result1，condition2为真，返回result2，否则返回result</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="operator">&lt;</span>condition1<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>result1<span class="operator">&gt;</span> <span class="keyword">WHEN</span> <span class="operator">&lt;</span>condition2<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>result2<span class="operator">&gt;</span> <span class="keyword">ELSE</span> <span class="operator">&lt;</span><span class="keyword">result</span><span class="operator">&gt;</span> <span class="keyword">END</span></span><br><span class="line"><span class="comment">-- expr = value1, return result1, expr = value2, return result2, else return result</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="operator">&lt;</span>expr<span class="operator">&gt;</span> <span class="keyword">WHEN</span> value1 <span class="keyword">THEN</span> result1 <span class="keyword">WHEN</span> value2 <span class="keyword">THEN</span> result2 <span class="keyword">ELSE</span> <span class="keyword">result</span> <span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><strong>Exercises</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表的员工的name,addr,如果addr为Beijing/Shanghai,则显示为一线城市，否则显示为二线城市</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> name,</span><br><span class="line"> (<span class="keyword">CASE</span> addr <span class="keyword">WHEN</span> <span class="string">&#x27;Beijing&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;一线城市&#x27;</span>  <span class="keyword">WHEN</span> &quot;Shanghai&quot; <span class="keyword">THEN</span> &quot;一线城市&quot; <span class="keyword">ELSE</span> <span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">END</span>) <span class="keyword">AS</span> addrTag</span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生成绩表，如果成绩大于等于60，显示及格，否则显示不及格</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> name.</span><br><span class="line"> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span>) math,</span><br><span class="line"> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> english <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span>) english,</span><br><span class="line"><span class="keyword">FROM</span> score;</span><br></pre></td></tr></table></figure><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h2><p><strong>概念</strong>: 约束是作用于表中字段上的规则,用于限制存储在表中的数据(类型、格式和范围等等)<br><strong>目的</strong>: 保证数据的正确性、有效性和完整性<br><strong>分类</strong>:</p><table><thead><tr><th align="left">约束</th><th align="left">描述</th><th align="left">关键字</th></tr></thead><tbody><tr><td align="left">非空约束</td><td align="left">限制该字段的数据不能为 null</td><td align="left">NOT NULL</td></tr><tr><td align="left">唯一约束</td><td align="left">保证该字段的所有数据都是唯一、不重复的</td><td align="left">UNIQUE</td></tr><tr><td align="left">主键约束</td><td align="left">主键是一行数据的唯一标识，要求非空且唯一</td><td align="left">PRIMARY KEY</td></tr><tr><td align="left">默认约束</td><td align="left">保存数据时，如果未指定该字段的值，则采用默认值</td><td align="left">DEFAULT</td></tr><tr><td align="left">检查约束（8.0.1 版本后）</td><td align="left">保证字段值满足某一个条件</td><td align="left">CHECK</td></tr><tr><td align="left">外键约束</td><td align="left">用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td align="left">FOREIGN KEY</td></tr></tbody></table><p><strong>Example</strong></p><p>[[DataBase01#DML]] <a href="https://efterklang.github.io/Tech/DataBase/DataBase01/#DML">Review DML Syntax</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>(</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  age TINYINT UNSIGNED <span class="keyword">CHECK</span>(age<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">AND</span> age<span class="operator">&lt;</span><span class="number">120</span>),</span><br><span class="line">  gender ENUM(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;保密&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;保密&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p><strong>概念</strong> : 外键是表中的一个字段，它指向另一个表的主键，用来建立两张表之间的联系，保证数据的<strong>一致性和完整性</strong></p><p><strong>语法</strong> : <code>FOREIGN KEY (&lt;foreignKey&gt;) REFERENCES &lt;tableName&gt;(&lt;primaryKey&gt;)</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建了两张表，Company表(主表,父表)中的Id字段是主键，Department表(子表,从表)中的depa_id字段是外键，指向Company表中的Id字</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Company (</span><br><span class="line">    Id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (Id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Department (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    salary <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    depa_id <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (depa_id) <span class="keyword">REFERENCES</span> Company(Id)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Department <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_depa_id <span class="keyword">FOREIGN</span> KEY (depa_id) <span class="keyword">REFERENCES</span> Company(Id);</span><br><span class="line"><span class="comment">-- 删除外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Department <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_depa_id;</span><br></pre></td></tr></table></figure><h2 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h2><table><thead><tr><th align="left">行为</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">NO ACTION</td><td align="left">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与RESTRICT一致）</td></tr><tr><td align="left">RESTRICT</td><td align="left">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与NO ACTION一致）</td></tr><tr><td align="left">CASCADE</td><td align="left">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td align="left">SET NULL</td><td align="left">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td align="left">SET DEFAULT</td><td align="left">父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>设置删除&#x2F;更新行为的语法：<code>ON DELETE/UPDATE &lt;action&gt;</code><br>例如 <code>ALTER TABLE Department ADD CONSTRAINT fk_depa_id FOREIGN KEY (depa_id) REFERENCES Company(Id) ON DELETE CASCADE ON UPDATE CASCADE;</code></p>]]></content>
    
    
    <summary type="html">数据库学习笔记，本篇主要记录SQL函数以及约束相关的知识点。</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="DataBase" scheme="https://efterklang.github.io/categories/Tech/DataBase/"/>
    
    
    <category term="DataBase" scheme="https://efterklang.github.io/tags/DataBase/"/>
    
    <category term="SQL" scheme="https://efterklang.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Glossary Of SQL</title>
    <link href="https://efterklang.github.io/Tech/DataBase/Glossary%20Of%20SQL/"/>
    <id>https://efterklang.github.io/Tech/DataBase/Glossary%20Of%20SQL/</id>
    <published>2024-01-26T14:30:18.000Z</published>
    <updated>2024-02-13T14:48:53.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-Structure-of-SQL-Server-syntax"><a href="#Basic-Structure-of-SQL-Server-syntax" class="headerlink" title="Basic Structure of SQL Server syntax"></a>Basic Structure of SQL Server syntax</h2><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><blockquote><p>Generally speaking, the real difference between statements, clauses, batches, etc., is determined by how you use them at the time.<br><a href="https://www.mssqltips.com/sqlservertip/7575/sql-clause-statement-command-expression-batch-definition/"><em>The Difference Between SQL Statement,Command, Clause, Batch, etc by Aubrey Love</em></a></p></blockquote><p>🪧Note:日常工作中,这些术语的使用并不是很严格,不必纠结于此.但是了解这些术语的含义,帮助我们在阅读文档时更加准确的理解文档的含义.</p><p>个人对此的简单总结如下:</p><ul><li><strong>Statement</strong>：语句.是一条完整的 SQL 语句，可以是单行，也可以是多行。例如，SELECT * FROM Users; 就是一个 SQL 语句。通常用分号 ; 结尾。</li><li><strong>Command</strong>：命令.通常指对数据库或数据库对象执行的操作。例如，<code>CREATE, DROP, SELECT, INSERT, UPDATE, DELETE</code> 等都是 SQL 命令。</li><li><strong>Batch</strong>：批处理.这是<strong>一组 SQL 语句</strong>，它们作为一个单元一起发送到 SQL 服务器以便一起执行。在大多数 SQL 服务器中，批处理由一个或多个 SQL 语句组成，这些语句由分号 ; 分隔。</li><li><strong>Clause</strong>：子句.这是 SQL 语句的一部分，它用于指定 SQL 语句的某些条件或修改 SQL 语句的行为。例如，WHERE, AND, OR, NOT, FROM, ORDER BY 等都是 SQL 子句。</li><li><strong>Query</strong> : 查询.在 SQL 中，Query 是一个请求，用于从数据库中获取特定的数据。最常见的查询是 SELECT 语句，它用于从一个或多个表中选择数据。</li></ul><h3 id="SQL-Statement"><a href="#SQL-Statement" class="headerlink" title="SQL Statement"></a><strong>SQL Statement</strong></h3><p>SQL Server “statements” are the most basic unit of code that can be executed in SQL Server.A statement is typically a single line of code, although multiple lines may be combined into a single statement. You can also use a semicolon (;) as a batch terminator that separates one command statement or batch from another.</p><h3 id="SQL-Command"><a href="#SQL-Command" class="headerlink" title="SQL Command"></a><strong>SQL Command</strong></h3><p>Commands are often <strong>referred to as a STATEMENT or QUERY</strong>. However, a SQL command is any instruction set that directs SQL Server to perform an action against a given SQL Server object.</p><ul><li><strong>DDL</strong> (Data Definition Language)</li><li><strong>DML</strong> (Data Manipulation Language)</li><li><strong>DCL</strong> (Data Control Language)</li><li><strong>TCL</strong> (Transaction Control Language)</li><li><em>ps: 有时把<strong>DML</strong>中的 SELECT 单独拿出来，称为 DQL(Data Query Language)</em><table><thead><tr><th align="left">DDL</th><th align="left">DML</th><th align="left">DCL</th><th align="left">TCL</th></tr></thead><tbody><tr><td align="left"><code>CREATE</code></td><td align="left"><code>SELECT</code></td><td align="left"><code>GRANT</code></td><td align="left"><code>COMMIT</code></td></tr><tr><td align="left"><code>ALTER</code></td><td align="left"><code>INSERT</code></td><td align="left"><code>REVOKE</code></td><td align="left"><code>ROLLBACK</code></td></tr><tr><td align="left"><code>DROP</code></td><td align="left"><code>UPDATE</code></td><td align="left"></td><td align="left"><code>SAVEPOINT</code></td></tr><tr><td align="left"><code>TRUNCATE</code></td><td align="left"><code>DELETE</code></td><td align="left"></td><td align="left"><code>SET TRANSACTION</code></td></tr><tr><td align="left"><code>COMMENT</code></td><td align="left"><code>MERGE</code></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>RENAME</code></td><td align="left"><code>CALL</code></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>EXPLAIN PLAN</code></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>LOCK TABLE</code></td><td align="left"></td><td align="left"></td></tr></tbody></table></li></ul><h3 id="SQL-Batch"><a href="#SQL-Batch" class="headerlink" title="SQL Batch"></a><strong>SQL Batch</strong></h3><p>A SQL Server “batch” is a single or multi-line block of code that tells the SQL Server what action to take on a SQL Server object. Batches are typically separated by the “GO” statement at the end of a SQL query;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE AdventureWorks2019;</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">SELECT</span> \<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> HumanResources.Department;</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">SELECT</span> \<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> HumanResources.Employee;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="SQL-Query"><a href="#SQL-Query" class="headerlink" title="SQL Query"></a><strong>SQL Query</strong></h3><p>The “query” keyword in SQL Server is used to perform an action against a database or database object.</p><h3 id="SQL-Clause"><a href="#SQL-Clause" class="headerlink" title="SQL Clause"></a><strong>SQL Clause</strong></h3><p>A SQL Server “clause” is a code element that defines a particular action. Clauses are typically used to control the flow of a query or Transact-SQL program.</p><p>The most common clauses are the FROM, WHERE, and ORDER BY clauses. The SELECT clause is used to specify the columns or expressions that will be returned by a query.</p><h2 id="DataBase-Glossary"><a href="#DataBase-Glossary" class="headerlink" title="DataBase Glossary"></a>DataBase Glossary</h2><p><strong>Database,Schema</strong>：数据库，一个库可以有多个表<br><strong>Table,Relation</strong>：表（Table）是数据库中存储数据的主要结构，它由行（记录）和列（字段）组成.表的结构通常由字段名和字段类型定义<br><strong>Row,Record,Item,Tuple</strong>：行，一行可以有很多列；<br><strong>Column,Field</strong>，列，不再细分的具体值</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.mssqltips.com/sqlservertip/7575/sql-clause-statement-command-expression-batch-definition/">⭐www.mssqltips.com</a><br><a href="https://www.databasestar.com/sql-glossary/#SQL">www.databasestar.com</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/glossary.html">dev.mysql.com</a></p>]]></content>
    
    
    <summary type="html">SQL 部分术语收录</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="DataBase" scheme="https://efterklang.github.io/categories/Tech/DataBase/"/>
    
    
    <category term="Glossary" scheme="https://efterklang.github.io/tags/Glossary/"/>
    
  </entry>
  
  <entry>
    <title>tasks.json的使用</title>
    <link href="https://efterklang.github.io/Tech/VSCode/tasks.json%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://efterklang.github.io/Tech/VSCode/tasks.json%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-01-26T04:54:09.000Z</published>
    <updated>2024-01-26T12:39:11.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>tasks.json 的作用是什么呢？官方的解释是这样的：</p><blockquote><p>Lots of tools exist to automate tasks like <strong>linting</strong>, building, packaging, testing, or deploying software systems.<br>Tasks in VS Code can be configured to run scripts and start processes so that many of these existing tools can be used from within VS Code without having to enter a command line or write new code.<br><em><strong>linting</strong>: Linting is a tool that analyzes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs</em> &gt; <a href="https://code.visualstudio.com/Docs/editor/tasks"><em>Integrate with External Tools via Tasks</em></a></p></blockquote><p>简单来说，tasks.json 的作用就是可以在 VSCode 中编写一些脚本，用于执行一些任务，比如编译代码，运行代码，打包代码等等。</p><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><p>The task’s properties have the following semantic:</p><ul><li><strong>label</strong>: The task’s label used in the user interface.</li><li><strong>type</strong>: The task’s type. For a custom task, this can either be shell or process. If shell is specified, the command is interpreted as a shell command (for example: bash, cmd, or PowerShell). If process is specified, the command is interpreted as a process to execute.</li><li><strong>command</strong>: The actual command to execute.</li><li><strong>windows</strong>: Any Windows specific properties. Will be used instead of the default properties when the command is executed on the Windows operating system.</li><li><strong>group</strong>: Defines to which group the task belongs. In the example, it belongs to the test group. Tasks that belong to the test group can be executed by running Run Test Task from the Command Palette.</li><li><strong>presentation</strong>: Defines how the task output is handled in the user interface. In this example, the Integrated Terminal showing the output is always revealed and a new terminal is created on every task run.</li><li><strong>options</strong>: Override the defaults for cwd (current working directory), env (environment variables), or shell (default shell). Options can be set per task but also globally or per platform. Environment variables configured here can only be referenced from within your task script or process and will not be resolved if they are part of your args, command, or other task attributes.</li><li><strong>runOptions</strong>: Defines when and how a task is run.</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><code>tasks.json</code>的功能十分丰富，这里只列举一些常用的功能，更多的功能可以参考<a href="https://code.visualstudio.com/Docs/editor/tasks">官方文档</a>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile c file(Windows)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile c file(Linux)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.out&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;run exe file(Windows)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile and run c file(Windows)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc -g $&#123;file&#125; -o $&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe &amp;&amp; $&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$gcc&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>compile c file(Windows)</code>和<code>compile c file(Linux)</code>：用于编译 c 文件</li><li><code>run exe file(Windows)</code>用于运行编译好的 exe 文件，代码没有改动时，可以直接运行 exe 文件，避免重新编译。</li><li><code>compile and run c file(Windows)</code>用于编译并运行 c 文件。</li></ul><p><em>ps: 为<code>workbench.action.tasks.runTask</code>设置快捷键,可显示 tasks 列表</em></p><center><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/tasks.json%E7%9A%84%E4%BD%BF%E7%94%A8-2024-01-26-13-25-29" alt="tasks"></p></center>]]></content>
    
    
    <summary type="html">简述VSCode中tasks.json的使用</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="VSCode" scheme="https://efterklang.github.io/categories/Tech/VSCode/"/>
    
    
    <category term="VSCode" scheme="https://efterklang.github.io/tags/VSCode/"/>
    
    <category term="Productivity" scheme="https://efterklang.github.io/tags/Productivity/"/>
    
    <category term="json" scheme="https://efterklang.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>《过松原晨炊漆公店六首》</title>
    <link href="https://efterklang.github.io/Reading/Poems/%E3%80%8A%E8%BF%87%E6%9D%BE%E5%8E%9F%E6%99%A8%E7%82%8A%E6%BC%86%E5%85%AC%E5%BA%97%E5%85%AD%E9%A6%96%E3%80%8B/"/>
    <id>https://efterklang.github.io/Reading/Poems/%E3%80%8A%E8%BF%87%E6%9D%BE%E5%8E%9F%E6%99%A8%E7%82%8A%E6%BC%86%E5%85%AC%E5%BA%97%E5%85%AD%E9%A6%96%E3%80%8B/</id>
    <published>2024-01-25T12:18:28.000Z</published>
    <updated>2024-02-02T13:12:43.300Z</updated>
    
    <content type="html"><![CDATA[<center><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/%E3%80%8A%E8%BF%87%E6%9D%BE%E5%8E%9F%E6%99%A8%E7%82%8A%E6%BC%86%E5%85%AC%E5%BA%97%E5%85%AD%E9%A6%96%E3%80%8B-2024-01-25-20-24-23" alt="江西弋阳 Yiyang, Jiangxi"></p></center><br><center>[宋] 杨万里</center><center>侧塞千山缝也无，上天下井万崎岖。</center><center>昨朝曾过芙蓉渡，寻到溪源一线初。</center><hr><center>山北溪声一路迎，山南溪响送人行。</center><center>也知流向金陵去，若过金陵莫寄声。</center><hr><center>后山勒水向东驰，却被前山勒向西。</center><center>道是水柔无性气，急声声怒慢声悲。</center><hr><center>日高谷底始微暄，岚翠依然透骨寒。</center><center>说与行人忙底事？金鸡声里促银鞍。</center><hr><center>莫言下岭便无难，赚得行人错喜欢。</center><center>政入万山围子里，一山放出一山拦。</center><hr><center>政是行人肠断时，子规得得向人啼。</center><center>若能泪得居人脸，始信春愁总为伊。</center><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>松源、漆公店：地名，当今在今皖南山区（在今江西弋阳与余江之间）</li><li>侧塞：积满充塞貌（积满充塞的样子）</li><li>昨朝：昨天</li><li>寄声：托人传话</li><li>勒：约束</li><li>暄：温暖</li><li>岚翠：苍翠色的山雾(三十六峰晴，雪销岚翠生——白居易《早春题少华东岩》)</li><li>底事：何事</li><li>银鞍：银饰的马鞍。代指骏马</li><li>政入：恰好进入</li><li>子规：杜鹃鸟的别名。传说为蜀帝杜宇的魂魄所化。常夜鸣，声音凄切，故借以抒悲苦哀怨之情</li><li>得得：频频，频仍</li><li>居人：家居的人，留居的人(妻子)</li><li>伊：第三人称代词，它</li></ul><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><blockquote><p><a href="https://so.gushiwen.cn/authorv_677ad0bb97e7.aspx">杨万里</a>一生力主抗战，反对屈膝投降，所以一直不得重用。宋孝宗登基后，便被外放做官。<a href="https://so.gushiwen.cn/authorv_b4738d3929d7.aspx">宋光宗</a>绍熙元年（1190）十一月，杨万里以直龙图阁出为江东转运副使，权领淮西、江东军马钱粮，治所在建康（今江苏南京）。绍熙三年（1192）八月，改知赣州，不赴，乞祠。《过松源晨炊漆公店六首》这组诗第六首中“政是行人肠断时，子规得得向人啼”与《午憩马家店》中“生衣兼草靸，年例试春风”正相合，既称“年例”（每年如此），可知非绍熙二年事，当作于绍熙三年春，诗人时年六十六岁。他外出途经松源时，见群山环绕，感慨不已，于是写下《过松源晨炊漆公店六首》这组诗。</p></blockquote><h2 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h2><blockquote><p>杨万里（1127年10月29日－1206年6月15日），字廷秀，号诚斋。吉州吉水（今江西省吉水县黄桥镇湴塘村）人。南宋著名诗人、大臣，与陆游、尤袤、范成大并称为“中兴四大诗人”。因宋光宗曾为其亲书“诚斋”二字，故学者称其为“诚斋先生”。杨万里一生作诗两万多首，传世作品有四千二百首，被誉为一代诗宗。他创造了语言浅近明白、清新自然，富有幽默情趣的“诚斋体”。杨万里的诗歌大多描写自然景物，且以此见长。他也有不少篇章反映民间疾苦、抒发爱国感情的作品。著有《诚斋集》等</p></blockquote>]]></content>
    
    
    <summary type="html">莫言下岭便无难，赚得行人错喜欢</summary>
    
    
    
    <category term="Reading" scheme="https://efterklang.github.io/categories/Reading/"/>
    
    <category term="Poems" scheme="https://efterklang.github.io/categories/Reading/Poems/"/>
    
    
    <category term="中国古代诗词" scheme="https://efterklang.github.io/tags/%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BB%A3%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>Base64 Encoding</title>
    <link href="https://efterklang.github.io/Tech/Others/Base64Encoding/"/>
    <id>https://efterklang.github.io/Tech/Others/Base64Encoding/</id>
    <published>2024-01-24T11:08:02.000Z</published>
    <updated>2024-02-12T14:56:33.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="叠甲"><a href="#叠甲" class="headerlink" title="叠甲"></a>叠甲</h2><p>限于知识水平，文章中可能存在错误，欢迎指正。</p><h2 id="What-is-Base64"><a href="#What-is-Base64" class="headerlink" title="What is Base64?"></a>What is Base64?</h2><blockquote><p><strong>Base64</strong> is a binary-to-text encoding scheme. It represents binary data in a printable ASCII string format by translating it into a radix-64 representation.<br>Base64 encoding is commonly used when there is a need to transmit binary data over media that do not correctly handle binary data and is designed to deal with textual data belonging to the 7-bit US-ASCII charset only.<br>One example of such a system is Email (SMTP), which was traditionally designed to work with plain text data in the 7-bit US-ASCII character set. Although, It was later extended to support non US-ASCII text messages as well as non-text messages such as audio and images, It is still recommended to encode the data to ASCII charset for backward compatibility.<br><a href="https://www.base64encoder.io/learn/"><em>What is Base64 Encoding and How does it work?</em></a></p></blockquote><ul><li>Base64 用 6 个 bit 来表示一个字符，输入流中每 3 个 Bytes 由 4 个 Base64 字符表示<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> Bytes = <span class="number">3</span> * <span class="number">8</span> bits = <span class="number">24</span> bits = <span class="number">4</span> * <span class="number">6</span> bits</span><br><span class="line">Base64 Encoding算法会在<span class="number">4</span>组<span class="number">6b</span>it各自的头部添<span class="number">0</span>：</span><br><span class="line"><span class="number">4</span> * <span class="number">6</span> bit -&gt; <span class="number">4</span> * <span class="number">8</span> bits = <span class="number">4</span> Bytes</span><br><span class="line">这即是Base64编码后数据长度增加<span class="number">1</span>/<span class="number">3</span>的原因</span><br></pre></td></tr></table></figure></li><li>Base64 包含 64 个字符(26 个大写字母，26 个小写字母，10 个数字，2 个特殊字符+，&#x2F;)</li><li>Base64 常用于在 URL、Cookie、网页中传输少量二进制数据。</li></ul><h2 id="How-does-Base64-Encoding-work"><a href="#How-does-Base64-Encoding-work" class="headerlink" title="How does Base64 Encoding work?"></a>How does Base64 Encoding work?</h2><p>Base64 encoding works with a 65-character subset of the US-ASCII charset. The first 64 characters out of the 65-character subset are mapped to an equivalent 6-bit binary sequence \(2^6 &#x3D; 64\). The extra 65th character (&#x3D;) is used for padding.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">## The Base64 Alphabet</span><br><span class="line"></span><br><span class="line">Value Encoding  Value Encoding  Value Encoding  Value Encoding</span><br><span class="line">    0 A            17 R            34 i            51 z</span><br><span class="line">    1 B            18 S            35 j            52 0</span><br><span class="line">    2 C            19 T            36 k            53 1</span><br><span class="line">    3 D            20 U            37 l            54 2</span><br><span class="line">    4 E            21 V            38 m            55 3</span><br><span class="line">    5 F            22 W            39 n            56 4</span><br><span class="line">    6 G            23 X            40 o            57 5</span><br><span class="line">    7 H            24 Y            41 p            58 6</span><br><span class="line">    8 I            25 Z            42 q            59 7</span><br><span class="line">    9 J            26 a            43 r            60 8</span><br><span class="line">   10 K            27 b            44 s            61 9</span><br><span class="line">   11 L            28 c            45 t            62 +</span><br><span class="line">   12 M            29 d            46 u            63 /</span><br><span class="line">   13 N            30 e            47 v</span><br><span class="line">   14 O            31 f            48 w         (pad) =</span><br><span class="line">   15 P            32 g            49 x</span><br><span class="line">   16 Q            33 h            50 y</span><br></pre></td></tr></table></figure><p><strong>Steps</strong></p><ol><li><strong>以 6 bit 为单位将二进制数据分组</strong>，不足 6 个 bit 的在末尾补 0，得到 8 组二进制数据：<br>以ASCII编码的字符串<code>HelloWorld\n</code>为例，其二进制数据为：<br><code>01001000 01100101 01101100 01101100 01101111 01010111 01101111 01110010 01101100 01100100 00001010</code><br>分组后为：<br><code>010010 000110 010101 101100 011011 000110 111101 010111 011011 110111 001001 101100 011001 000000 1010</code></li><li><strong>将各组二进制转成十进制，根据映射关系得到 Base64 编码</strong><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">18 6  21 44 27 6  61 23 27 55 9  44 25 0  40</span><br><span class="line">S  G  V  s  b  G  9  X  b  3  J  s  Z  A  o</span><br></pre></td></tr></table></figure></li><li><strong>将 Base64 编码拼接起来，最终结果应为 4 的倍数，不足则在末尾补<code>=</code></strong><br><code>SGVs bG9X b3Js ZAO= </code></li></ol><h2 id="Why-Base64？"><a href="#Why-Base64？" class="headerlink" title="Why Base64？"></a>Why Base64？</h2><p>在早期的互联网协议中，设计者们主要考虑的是发送文本数据，因此这些协议通常只能处理 ASCII 字符集中的字符。然而，二进制文件（如图片、音频、视频等）包含的数据通常超出了 ASCII 字符集的范围。如果直接发送这些二进制数据，可能有部分字节被解释为控制字符，例如换行符、回车符、制表符等。这些控制字符在传输过程中可能会被解释为其他含义，从而导致数据传输错误。</p><p>Base64 编码出现是为了就是解决在网络上发送<strong>二进制数据</strong>的问题。Base64 选取 US-ASCII 中的<strong>64 个可打印字符</strong>作为编码后的字符集，这样就可以保证数据在传输过程中不会被解释为控制字符，从而确保数据传输的安全和可靠。</p><p>不过，Base64 编码会导致数据膨胀，大约增加 1&#x2F;3 的大小。</p><h2 id="Base64’s-Applications"><a href="#Base64’s-Applications" class="headerlink" title="Base64’s Applications"></a>Base64’s Applications</h2><p>Base64 的应用非常广泛，包括但不限于：</p><ul><li><p>电子邮件：在 MIME（多用途互联网邮件扩展）协议中，Base64 用于编码电子邮件的附件，使其可以通过电子邮件系统发送。电子邮件系统主要设计用于处理文本，而不是二进制数据，因此需要将二进制附件（如图片或文档）转换为文本格式。</p></li><li><p>数据 URI：在网页中，可以使用 Base64 编码的数据 URI 来内嵌图片或其他资源。这样可以减少 HTTP 请求的数量，从而提高页面加载速度。数据 URI 的格式为 <code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code>，其中 <mediatype> 是资源的 MIME 类型，<data> 是 Base64 编码的资源数据。</p></li><li><p>URL 编码：在某些情况下，URL 可能需要包含二进制数据。由于 URL 只能包含 ASCII 字符，因此需要使用 Base64 编码来编码这些数据。标准的 Base64 编码在 URL 中有特殊含义的字符(+ 和 &#x2F;)，于是 + 和 &#x2F; 分别被替换为 - 和 _。</p></li><li><p>证书和密钥：在 SSL&#x2F;TLS 和其他安全协议中，证书和密钥通常使用 Base64 编码，以便在文本格式的配置文件中使用。这样可以避免二进制数据在处理或传输过程中可能出现的问题。</p></li><li><p>编码用户凭据：在 HTTP 基本认证中，用户的用户名和密码会被拼接成一个字符串，然后使用 Base64 编码，最后将编码后的字符串放在 HTTP 头的 Authorization 字段中发送给服务器。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;叠甲&quot;&gt;&lt;a href=&quot;#叠甲&quot; class=&quot;headerlink&quot; title=&quot;叠甲&quot;&gt;&lt;/a&gt;叠甲&lt;/h2&gt;&lt;p&gt;限于知识水平，文章中可能存在错误，欢迎指正。&lt;/p&gt;
&lt;h2 id=&quot;What-is-Base64&quot;&gt;&lt;a href=&quot;#What-is-B</summary>
      
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="Others" scheme="https://efterklang.github.io/categories/Tech/Others/"/>
    
    
    <category term="Others" scheme="https://efterklang.github.io/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>DataBase Base_基础概念&amp;SQL语法</title>
    <link href="https://efterklang.github.io/Tech/DataBase/DataBase01/"/>
    <id>https://efterklang.github.io/Tech/DataBase/DataBase01/</id>
    <published>2024-01-21T10:37:07.000Z</published>
    <updated>2024-02-13T07:36:00.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-Overview"><a href="#MySQL-Overview" class="headerlink" title="MySQL Overview"></a>MySQL Overview</h1><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><p>[[Glossary Of SQL]]-&gt;<a href="https://efterklang.github.io/Tech/DataBase/Glossary%20Of%20SQL/">SeeMore</a></p><p><strong>数据库</strong> : 数据库(DataBase,Scheme)就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。</p><p><strong>数据库管理系统</strong> : 数据库管理系统(Database Management System)是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。</p><p><strong>数据库系统</strong> : 数据库系统(Database System)通常由软件、数据库和数据管理员(DBA)组成。</p><p><strong>数据库管理员</strong> : 数据库管理员(Database Administrator)负责全面管理和控制数据库系统。</p><h2 id="启动-客户端连接"><a href="#启动-客户端连接" class="headerlink" title="启动 &amp; 客户端连接"></a>启动 &amp; 客户端连接</h2><p>MySQL80 服务将开始监听特定的端口（默认是 3306），等待客户端的连接请求。一旦接收到请求，它就会处理这些请求，执行 SQL 查询，返回查询结果</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动&amp;停止 Service</span></span><br><span class="line">net <span class="built_in">start</span> mysql80</span><br><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure><p>客户端连接数据库的方式：</p><ul><li>命令行：<code>mysql -h 主机名 -P 端口号 -u 用户名 -p 密码</code></li><li>图形化工具：Navicat、SQLyog、SQL Server Management Studio</li></ul><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>数据模型可以分为两种.关系型数据模型和非关系型数据模型</p><h3 id="关系型数据模型"><a href="#关系型数据模型" class="headerlink" title="关系型数据模型"></a>关系型数据模型</h3><p><strong>关系型数据模型</strong>（RDBMS,Relational Database Management System）：关系型数据库模型是基于关系（表）的数据模型，使用表格来组织和存储数据。最常见的关系型数据库是 MySQL、Oracle、SQL Server 等。</p><blockquote><p>ps:table 是关系型数据库的术语，对应的中文是表，也可以称为关系，由行和列组成。<br>在 SQL 中，”record”和”field”是两个基本的概念，它们分别对应于数据库表中的行和列。</p></blockquote><p><strong>Record</strong>：在数据库中，一个 record（也被称为 row 或 tuple）代表一组相关的数据，例如一个用户的信息或一个订单的详情。一个 record 包含了一组 field，每个 field 存储了一项特定的信息，例如用户的名字或订单的价格。</p><p><strong>Field</strong>：在数据库中，一个 field（也被称为 field 或 attribute）代表一种类型的数据，例如所有用户的名字或所有订单的价格。一个 field 在一个表中是垂直的，它包含了一个特定类型的所有值。</p><p>例如，考虑一个简单的 table，它有两个 field（”User ID”和”User Name”）和两个 record：</p><table><thead><tr><th>User ID</th><th>User Name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr></tbody></table><p>在这个例子中，”1”和”Alice”是第一个 record，”2”和”Bob”是第二个 record。”User ID”和”User Name”是两个 field。</p><h3 id="非关系型数据模型"><a href="#非关系型数据模型" class="headerlink" title="非关系型数据模型"></a>非关系型数据模型</h3><p><strong>非关系型数据模型</strong>（NoSQL）：非关系型数据库模型是一种非结构化的数据模型，不使用表格来组织和存储数据。它们可以是键值对存储、文档存储、列存储、图形数据库等。常见的非关系型数据库有 MongoDB、Redis、Cassandra 等。</p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/DataBase01-2024-01-21-20-34-41" alt="MySQL-RDBMS"></p><hr><h1 id="SQL-Grammer"><a href="#SQL-Grammer" class="headerlink" title="SQL Grammer"></a>SQL Grammer</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><blockquote><p>单行或多行书写，以分号结尾<br>SQL 语句可以用空格和缩进来增强可读性<br>SQL 语句不区分大小写，关键字建议使用大写<br>Comment：单行注释（– comment）；多行注释（&#x2F;_ comment _&#x2F;）<br>Category：DDL,DML,DQL,DCL</p></blockquote><h2 id="Data-type"><a href="#Data-type" class="headerlink" title="Data type"></a>Data type</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><table><thead><tr><th>数据类型</th><th>内存大小(Byte)</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>1</td></tr><tr><td><code>SMALLINT</code></td><td>2</td></tr><tr><td><code>MEDIUMINT</code></td><td>3</td></tr><tr><td><code>INT</code></td><td>4</td></tr><tr><td><code>BIGINT</code></td><td>8</td></tr><tr><td><code>FLOAT</code></td><td>4</td></tr><tr><td><code>DOUBLE</code></td><td>8</td></tr><tr><td><code>DECIMAL(M, N)</code></td><td>取决于<code>M</code>和<code>N</code></td></tr></tbody></table><p>数据类型后面可加<code>UNSIGNED</code>修饰，例如<code>age TINYINT UNSIGNED</code></p><p>对于<code>DECIMAL(M, N)</code>类型，<code>M</code>是数字的最大总位数，<code>N</code>是小数点后的位数。数值范围取决于<code>M</code>和<code>N</code>的值。如<code>123.45</code>，<code>M=5,N=2</code></p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><table><thead><tr><th>数据类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255Bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535Bytes</td><td>变长字符串</td></tr><tr><td>BLOB</td><td>0-65535Bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65535Bytes</td><td>长文本数据</td></tr></tbody></table><blockquote><p>char(10) 会占用 10 个字符的存储空间，不足 10 个字符会使用空格补齐；性能高于 varchar<br>varchar(10) 会根据实际存储的字符数来占用存储空间，不会浪费空间</p></blockquote><h3 id="Date-Time"><a href="#Date-Time" class="headerlink" title="Date &amp; Time"></a>Date &amp; Time</h3><table><thead><tr><th>类型</th><th>格式</th><th>范围</th></tr></thead><tbody><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 到 9999-12-31</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 到 838:59:59</td></tr><tr><td>YEAR</td><td>YYYY</td><td>1901 到 2155, 以及 0000</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 到 9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 00:00:01 UTC 到 2038-01-19 03:14:07 UTC</td></tr></tbody></table><h2 id="SQL-Syntax"><a href="#SQL-Syntax" class="headerlink" title="SQL Syntax"></a>SQL Syntax</h2><h3 id="CATEGORY"><a href="#CATEGORY" class="headerlink" title="CATEGORY"></a>CATEGORY</h3><table><thead><tr><th>分类</th><th>全称</th><th align="center">说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td align="center">定义数据库对象（数据库，表，字段）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td align="center">对数据表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td align="center">查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td align="center">创建数据库用户，控制数据库的访问权限</td></tr><tr><td>TCL</td><td>Transaction Control Language</td><td align="center">用于保存或恢复对数据库对象执行的操作</td></tr></tbody></table><p>[[Glossary Of SQL#Basic Structure of SQL Server syntax]]-&gt;<a href="https://efterklang.github.io/Tech/DataBase/Glossary%20Of%20SQL/##BasicStructureofSQLServersyntax">SeeMore</a></p><blockquote><p><strong>DML 语句和 DDL 语句区别</strong>：DML 是数据库操作语言（Data Manipulation Language）的缩写，是指对数据库中表记录的操作，主要包括表记录的插入、更新、删除和查询，是开发人员日常使用最频繁的操作。DDL （Data Definition Language）是数据定义语言的缩写，简单来说，就是对数据库内部的对象进行创建、删除、修改的操作语言。它和 DML 语言的最大区别是 DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改，更不会涉及到其他对象。DDL 语句更多的被数据库管理员（DBA）所使用，一般的开发人员很少使用。另外，由于 select 不会对表进行破坏，所以有的地方也会把 select 单独区分开叫做数据库查询语言 DQL（Data Query Language）。# 执行速度不同<br><em>节选自 JavaGuide——SnailClimb</em></p></blockquote><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="Database-Manipulation"><a href="#Database-Manipulation" class="headerlink" title="Database Manipulation"></a>Database Manipulation</h4><ul><li>创建：<code>CREATE DATABASE &lt;DATABASE_NAME&gt;;</code></li><li>删除：<code>DROP DATABASE &lt;DATABASE_NAME&gt;;</code></li><li>查看：<code>SHOW DATABASES;</code></li><li>使用：<code>USE &lt;DATABASE_NAME&gt;;</code></li><li>查询当前数据库： <code>SELECT DATABASE();</code></li></ul><h4 id="Table-Manipulation"><a href="#Table-Manipulation" class="headerlink" title="Table Manipulation"></a>Table Manipulation</h4><ul><li>删除：<code>DROP TABLE &lt;TABLE_NAME&gt;;</code></li><li>创建：<code>CREATE TABLE &lt;TABLE_NAME&gt; (field_name field_type, ...);</code></li><li>重命名：<code>ALTER TABLE &lt;TABLE_NAME&gt; RENAME TO &lt;NEW_TABLE_NAME&gt;;</code></li><li>删除重建：<code>TRUNCATE TABLE &lt;TABLE_NAME&gt;;</code></li><li>描述表结构：<code>DESC &lt;TABLE_NAME&gt;;</code></li><li>查询当前数据库中的表：<code>SHOW TABLES;</code></li><li>查看表的创建语句：<code>SHOW CREATE TABLE &lt;TABLE_NAME&gt;;</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student RENAME <span class="keyword">TO</span> student_info;</span><br><span class="line"><span class="keyword">DROP</span> student_info;</span><br></pre></td></tr></table></figure><hr><ul><li>Add&#x2F;Modify Field： <code>ALETR TABLE &lt;TABLE_NAME&gt; &lt;ADD|MODIFY&gt; &lt;FIELD_NAME&gt; &lt;FIELD_TYPE&gt;;</code></li><li>Change Field：<code>ALTER TABLE &lt;TABLE_NAME&gt; CHANGE &lt;FIELD_NAME&gt; &lt;NEW_FIELD_NAME&gt; &lt;FIELD_TYPE&gt;;</code></li><li>Drop Field：<code>ALTER TABLE &lt;TABLE_NAME&gt; DROP &lt;FIELD_NAME&gt;;</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Field Manipulation Examples</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> age <span class="type">int</span> UNSIGNED;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY age tinyint UNSIGNED;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student CHANGE nickname username tinyint UNSIGNED;</span><br></pre></td></tr></table></figure><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><h4 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h4><p>基本的 INSERT 语句的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (field1, field2, field3, ...) <span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure><p>例如，如果你有一个名为 users 的表，它有 id，name 和 email,gender 四个 field，你可以使用以下的 INSERT 语句来插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (id, name, email) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;123@gmail.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>可以省略列的名称，但必须提供<strong>所有 field</strong>的值，并且顺序必须与表中的列的顺序相同：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;222@gmail.com&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><p>批量插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (id, name, email)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;alice@example.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;bob@example.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;charlie@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student; <span class="comment">-- 删除表中所有数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 删除id为1的数据</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> student; <span class="comment">-- 删除表中所有数据，但不删除表结构</span></span><br></pre></td></tr></table></figure><hr><p>🪧<code>drop</code>,<code>delete</code>,<code>truncate</code>的区别：</p><ul><li><code>DROP TABLE</code> is a <code>DDL</code> command. It is used to delete a table and free space associated with the table. It also deletes the table structure.</li><li><code>TRUNCATE TABLE</code> is a <code>DDL</code> command. It is used to delete all the rows from a table and free the space used by those rows. It does not generate any undo logs, so it is <strong>faster</strong> than the DELETE command. However, you <strong>CANNOT</strong> roll back a TRUNCATE operation. Also, TRUNCATE TABLE <strong>resets</strong> the identity of the table.</li><li><code>DELETE FROM</code> is a <code>DML</code> command. It is used to delete <strong>all the rows</strong> from a table or <strong>certain rows</strong> that match a condition. It generates undo logs for every deleted row, so you <strong>CAN</strong> roll back a DELETE operation. It does <strong>not reset</strong> the identity of the table. DELETE FROM without a WHERE clause behaves like TRUNCATE TABLE.</li></ul><p>PS:<code>identity</code> is a property of a column that is used to generate a sequence of numbers(id <em>e.g.</em>). The identity column is commonly used as a primary key.</p><blockquote><p>可参考如下文章补充学习<br><a href="https://javaguide.cn/database/basis.html#drop%E3%80%81delete-%E4%B8%8E-truncate-%E5%8C%BA%E5%88%AB">JavaGuide</a> &gt; <a href="https://zhuanlan.zhihu.com/p/270331768">ZhiHu</a></p></blockquote><hr><h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">18</span>; <span class="comment">-- <span class="doctag">Note:</span>affects all rows in the table.</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><h4 id="OVERVIEW"><a href="#OVERVIEW" class="headerlink" title="OVERVIEW"></a>OVERVIEW</h4><p>数据查询语言（Data Query Language）用于从数据库中检索数据。</p><h5 id="Sequence-Of-DQL"><a href="#Sequence-Of-DQL" class="headerlink" title="Sequence Of DQL"></a>Sequence Of DQL</h5><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/DataBase01-2024-01-23-23-35-21" alt="DQL Cmd"></p><p><strong>编写顺序：</strong> <code>SELECT-&gt;FROM-&gt;WHERE-&gt;GROUP BY-&gt;HAVING-&gt;ORDER BY-&gt;LIMIT&gt;</code><br><strong>执行顺序：</strong> <code>FROM-&gt;WHERE-&gt;GROUP BY-&gt;HAVING-&gt;SELECT-&gt;ORDER BY-&gt;LIMIT</code></p><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- table name: emp</span></span><br><span class="line"><span class="comment">-- 1.查询年龄为20，21，22，23的女性员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> gender<span class="operator">=</span><span class="string">&#x27;女&#x27;</span> <span class="operator">&amp;&amp;</span> age <span class="keyword">IN</span> (<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>);</span><br><span class="line"><span class="comment">-- 2.查询性别为男，并且年属于[20,40]，名字为3个字的员工。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="operator">&amp;&amp;</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span> <span class="operator">&amp;&amp;</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;___&#x27;</span>;</span><br><span class="line"><span class="comment">-- 3.查询年龄小于60岁的男员工人数和女员工人数</span></span><br><span class="line"><span class="keyword">SELECT</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender</span><br><span class="line"><span class="comment">-- 4.查询所有年小于等于 35 员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> name,age,entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&lt;=</span> <span class="number">35</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>,entrydate <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 5.查询性别为男，且年龄属于[20,40]的前5个员工，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> name,age,entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="operator">&amp;&amp;</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>,entrydate <span class="keyword">DESC</span> LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">table</span>: student</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+-----------+------+</span></span><br><span class="line"><span class="operator">|</span> Sid <span class="operator">|</span> Sname <span class="operator">|</span> Sage      <span class="operator">|</span> Ssex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+-----------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">01</span>  <span class="operator">|</span> 赵雷   <span class="operator">|</span> <span class="number">1</span><span class="operator">/</span><span class="number">1</span><span class="operator">/</span><span class="number">1990</span>  <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">02</span>  <span class="operator">|</span> 钱电   <span class="operator">|</span> <span class="number">21</span><span class="operator">/</span><span class="number">12</span><span class="operator">/</span><span class="number">1990</span><span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">03</span>  <span class="operator">|</span> 孙风   <span class="operator">|</span> <span class="number">20</span><span class="operator">/</span><span class="number">5</span><span class="operator">/</span><span class="number">1990</span> <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">04</span>  <span class="operator">|</span> 李云   <span class="operator">|</span> <span class="number">6</span><span class="operator">/</span><span class="number">8</span><span class="operator">/</span><span class="number">1990</span>  <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">05</span>  <span class="operator">|</span> 周梅   <span class="operator">|</span> <span class="number">1</span><span class="operator">/</span><span class="number">12</span><span class="operator">/</span><span class="number">1991</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">06</span>  <span class="operator">|</span> 吴兰   <span class="operator">|</span> <span class="number">1</span><span class="operator">/</span><span class="number">3</span><span class="operator">/</span><span class="number">1992</span>  <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">07</span>  <span class="operator">|</span> 郑竹   <span class="operator">|</span> <span class="number">1</span><span class="operator">/</span><span class="number">7</span><span class="operator">/</span><span class="number">1989</span>  <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">08</span>  <span class="operator">|</span> 王菊   <span class="operator">|</span> <span class="number">20</span><span class="operator">/</span><span class="number">1</span><span class="operator">/</span><span class="number">1990</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+-----------+------+</span></span><br></pre></td></tr></table></figure><p><strong>Basic Syntax</strong></p><ul><li>查询指定字段<code>SELECT field1, field2, ... FROM table_name;</code></li><li>查询所有字段<code>SELECT * FROM table_name;</code></li><li>指定条件查询<code>SELECT field1, field2, ... FROM table_name WHERE condition;</code></li><li>查询结果去重<code>SELECT DISTINCT field1, field2, ... FROM table_name;</code></li></ul><p><strong>Condition Syntax</strong><br><em>List of Comparison Operators</em></p><ul><li><code>=, !=,&lt;&gt;, &lt; &lt;=, &gt;, &gt;= 🪧Note:&lt;&gt; is the same as !=</code></li><li><code>BETWEEN ... AND ...</code></li><li><code>IN(...)</code></li><li><code>LIKE 🪧Note:pattern matching,placeholders:%,_</code></li><li><code>IS NULL,IS NOT NULL</code></li></ul><p><em>List of Logical Operators</em></p><ul><li><code>AND,&amp;&amp;,OR,||,NOT,!</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student; <span class="comment">-- 查询表中所有field数据</span></span><br><span class="line"><span class="keyword">SELECT</span> id,name <span class="keyword">FROM</span> student; <span class="comment">-- 查询表中指定field的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span><span class="number">30</span>; <span class="comment">-- &amp;&amp; 可以用 AND 代替</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="operator">||</span> age <span class="operator">&lt;=</span><span class="number">30</span>; <span class="comment">-- || 可以用 OR 代替</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sid <span class="keyword">BETWEEN</span> <span class="number">01</span> <span class="keyword">AND</span> <span class="number">20</span>; <span class="comment">-- BETWEEN 用于范围查询[01,20]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sid <span class="keyword">IN</span> (<span class="number">01</span>,<span class="number">02</span>,<span class="number">03</span>); <span class="comment">-- IN 用于范围查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Ssex <span class="keyword">FROM</span> student; <span class="comment">-- DISTINCT 用于去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> enligh <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>; <span class="comment">-- IS NULL 用于判断是否为空</span></span><br><span class="line"><span class="comment">-- =================================</span></span><br><span class="line"><span class="comment">-- *            LIKE               *</span></span><br><span class="line"><span class="comment">-- =================================</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;赵%&#x27;</span>; <span class="comment">-- % 多个任意字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;赵_&#x27;</span>; <span class="comment">-- _ 单个任意字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;赵__&#x27;</span>; <span class="comment">-- __ 两个任意字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;%子%&#x27;</span>; <span class="comment">-- Sname中包含子的record</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- example 1</span></span><br><span class="line"><span class="keyword">SELECT</span> Sid,Sname <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Ssex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+</span></span><br><span class="line"><span class="operator">|</span> Sid <span class="operator">|</span> Sname <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">01</span>  <span class="operator">|</span> 赵雷  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">02</span>  <span class="operator">|</span> 钱电  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">03</span>  <span class="operator">|</span> 孙风  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">04</span>  <span class="operator">|</span> 李云  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+</span></span><br><span class="line"><span class="comment">-- example 2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Ssex <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> Ssex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>聚合函数（Aggregate Functions）用于计算表中列的值(如果为 NULL，则不参与计算)，返回一个单一的值。常用的聚合函数有：</p><ul><li><code>AVG()</code>：返回某列的平均值</li><li><code>COUNT()</code>：返回某列的行数</li><li><code>MAX()</code>：返回某列的最大值</li><li><code>MIN()</code>：返回某列的最小值</li><li><code>SUM()</code>：返回某列值之和</li></ul><blockquote><p><code>COUNT(*)</code> 表示计算所有行的数量，包括 NULL 值<br><code>COUNT(field)</code> 表示计算指定列的行数，不包括 NULL 值<br><code>COUNT(DISTINCT field)</code> 表示计算指定列的不同值的数量，不包括 NULL 值<br>[[database02#AggregateFunction]]-&gt;<a href="https://efterklang.github.io/Tech/DataBase/DataBase02/##AggregateFunction">See more</a></p></blockquote><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(Sid) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(Sid) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">8</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">avg</span>(Sage) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">avg</span>(Sage)     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">19903121.3750</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">avg</span>(Sage) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Ssex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">avg</span>(Sage)     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">19900662.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br></pre></td></tr></table></figure><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>分组查询（Group By）用于结合聚合函数，根据一个或多个列对结果集进行分组。</p><p>Syntax:<code>SELECT field1, field2, ... FROM table_name GROUP BY field1, field2, ... HAVE condition;</code></p><p><code>Difference between WHERE and HAVING</code></p><ul><li>执行时机不同：<code>WHERE</code> 在数据分组前的 record 进行过滤，<code>HAVING</code> 在数据分组后的 record 进行过滤<br>执行顺序：where -&gt; aggregate -&gt; having</li><li>可选参数不同：<code>WHERE</code> 后面只能跟条件表达式，<code>HAVING</code> 后面可以跟条件表达式和聚合函数</li></ul><blockquote><p><code>WHERE</code> is used to filter records before any groupings take place.<br><code>HAVING</code> is used to filter values after they have been grouped.</p></blockquote><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询男女生的max/min age;</span></span><br><span class="line"><span class="keyword">SELECT</span> Ssex,<span class="built_in">max</span>(Sage),<span class="built_in">min</span>(Sage) <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> Ssex;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Ssex <span class="operator">|</span> <span class="built_in">max</span>(Sage)  <span class="operator">|</span> <span class="built_in">min</span>(Sage)  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> 男   <span class="operator">|</span> <span class="number">1990</span><span class="number">-12</span><span class="number">-21</span> <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女   <span class="operator">|</span> <span class="number">1992</span><span class="number">-03</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-07</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+------------+</span></span><br><span class="line"><span class="comment">-- 查询Sid&gt;2的男女生的max/min age</span></span><br><span class="line"><span class="keyword">SELECT</span> Ssex,<span class="built_in">max</span>(Sage),<span class="built_in">min</span>(Sage) <span class="keyword">from</span> student <span class="keyword">WHERE</span> Sid<span class="operator">&gt;</span><span class="number">2</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> Ssex;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Ssex <span class="operator">|</span> <span class="built_in">max</span>(Sage)  <span class="operator">|</span> <span class="built_in">min</span>(Sage)  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> 男   <span class="operator">|</span> <span class="number">1990</span><span class="number">-08</span><span class="number">-06</span> <span class="operator">|</span> <span class="number">1990</span><span class="number">-05</span><span class="number">-20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女   <span class="operator">|</span> <span class="number">1992</span><span class="number">-03</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-07</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+------------+</span></span><br><span class="line"><span class="comment">-- 查询男女生的max/min age，分组结果只显示为Ssex=男的record</span></span><br><span class="line"><span class="keyword">SELECT</span> Ssex,<span class="built_in">max</span>(Sage),<span class="built_in">min</span>(Sage) <span class="keyword">from</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> Ssex <span class="keyword">HAVING</span> Ssex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Ssex <span class="operator">|</span> <span class="built_in">max</span>(Sage)  <span class="operator">|</span> <span class="built_in">min</span>(Sage)  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> 男   <span class="operator">|</span> <span class="number">1990</span><span class="number">-12</span><span class="number">-21</span> <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------+------------+</span></span><br><span class="line"><span class="comment">-- 查询年龄 &lt; 45 的employee，并根据workaddress分组，显示分组结果中address_count&gt;3的分组</span></span><br><span class="line"><span class="keyword">SELECT</span> workaddress,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> address_count <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> workaddress <span class="keyword">HAVING</span> address_count<span class="operator">&gt;</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> workaddress  <span class="operator">|</span> address_count  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Beijing      <span class="operator">|</span>              <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Shanghai     <span class="operator">|</span>              <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------------+</span></span><br></pre></td></tr></table></figure><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p><strong>Syntax</strong> <code>SELECT field1, field2, ... FROM table_name ORDER BY field1 [ASC|DESC], field2 [ASC|DESC], ...;</code></p><ul><li>ASC: ascending order 升序</li><li>DESC: descending order 降序</li><li>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> Sage <span class="keyword">ASC</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> Sid <span class="operator">|</span> Sname <span class="operator">|</span> Sage       <span class="operator">|</span> Ssex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">07</span>  <span class="operator">|</span> 郑竹  <span class="operator">|</span> <span class="number">1989</span><span class="number">-07</span><span class="number">-01</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">01</span>  <span class="operator">|</span> 赵雷  <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">08</span>  <span class="operator">|</span> 王菊  <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-20</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">03</span>  <span class="operator">|</span> 孙风  <span class="operator">|</span> <span class="number">1990</span><span class="number">-05</span><span class="number">-20</span> <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">04</span>  <span class="operator">|</span> 李云  <span class="operator">|</span> <span class="number">1990</span><span class="number">-08</span><span class="number">-06</span> <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">02</span>  <span class="operator">|</span> 钱电  <span class="operator">|</span> <span class="number">1990</span><span class="number">-12</span><span class="number">-21</span> <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">05</span>  <span class="operator">|</span> 周梅  <span class="operator">|</span> <span class="number">1991</span><span class="number">-12</span><span class="number">-01</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">06</span>  <span class="operator">|</span> 吴兰  <span class="operator">|</span> <span class="number">1992</span><span class="number">-03</span><span class="number">-01</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="comment">-- 按照age升序排序，如果age相同，则再按照entrydate降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>,entrydate <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p><strong>Syntax</strong> <code>SELECT field1, field2, ... FROM table_name LIMIT offset, count;</code><br><code>offset</code>表示偏移量，<code>count</code>表示查询的记录数<br><code>offset = (pageNo - 1) * pageSize</code><br>分页查询属于 MySQL 的扩展语法，不是 SQL 标准语法，不同的数据库有不同的实现方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">0</span>,<span class="number">3</span>; <span class="comment">-- 第1页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">3</span>,<span class="number">3</span>; <span class="comment">-- 第2页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">6</span>,<span class="number">2</span>; <span class="comment">-- 第3页</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> Sid <span class="operator">|</span> Sname <span class="operator">|</span> Sage       <span class="operator">|</span> Ssex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">01</span>  <span class="operator">|</span> 赵雷  <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">02</span>  <span class="operator">|</span> 钱电  <span class="operator">|</span> <span class="number">1990</span><span class="number">-12</span><span class="number">-21</span> <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">03</span>  <span class="operator">|</span> 孙风  <span class="operator">|</span> <span class="number">1990</span><span class="number">-05</span><span class="number">-20</span> <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.27</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> Sid <span class="operator">|</span> Sname <span class="operator">|</span> Sage       <span class="operator">|</span> Ssex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">04</span>  <span class="operator">|</span> 李云  <span class="operator">|</span> <span class="number">1990</span><span class="number">-08</span><span class="number">-06</span> <span class="operator">|</span> 男   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">05</span>  <span class="operator">|</span> 周梅  <span class="operator">|</span> <span class="number">1991</span><span class="number">-12</span><span class="number">-01</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">06</span>  <span class="operator">|</span> 吴兰  <span class="operator">|</span> <span class="number">1992</span><span class="number">-03</span><span class="number">-01</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.23</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> Sid <span class="operator">|</span> Sname <span class="operator">|</span> Sage       <span class="operator">|</span> Ssex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">07</span>  <span class="operator">|</span> 郑竹  <span class="operator">|</span> <span class="number">1989</span><span class="number">-07</span><span class="number">-01</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">08</span>  <span class="operator">|</span> 王菊  <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-20</span> <span class="operator">|</span> 女   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+------------+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.22</span> sec)</span><br></pre></td></tr></table></figure><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><p><code>CREATE</code>用于创建一个新的用户，并设置其密码<br><code>ALTER</code>用于修改一个已存在的用户的密码<br><code>DROP</code>用于删除一个已存在的用户</p><ul><li><code>%</code>：表示用户可以从任何主机连接到数据库</li><li><code>localhost</code>：表示用户只能从本地主机连接到数据库</li><li><code>192.168.1.1</code>：表示用户只能从指定的 IP 地址连接到数据库</li><li><code>%.example.com</code>：表示用户可以从 example.com 域名下的任何主机连接到数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Jason&#x27;</span>@<span class="string">&#x27;xxx.xxx.x.x&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>; <span class="comment">-- 可从指定主机连接到数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Jason&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;JasonPassword&#x27;</span>; <span class="comment">-- 可从任何主机连接到数据库</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;Jason&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;NewJasonPassword&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p><code>GRANT</code>：用于授予用户数据库的访问权限<br><code>REVOKE</code>：用于撤销用户的数据库访问权限。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授予 user 在 database.table 上执行 SELECT，INSERT 和 DELETE 操作的权限。</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">DELETE</span> <span class="keyword">ON</span> database.table <span class="keyword">TO</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br><span class="line"><span class="comment">-- 撤销了 user 在 database.table 上执行 INSERT 和 DELETE 操作的权限。</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span>, <span class="keyword">DELETE</span> <span class="keyword">ON</span> database.table <span class="keyword">FROM</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>常用权限</strong></p><ul><li><code>ALL, ALL PRIVILEGES</code> 所有权限</li><li><code>SELECT</code> 查询数据</li><li><code>INSERT</code> 插入数据</li><li><code>UPDATE</code> 修改数据</li><li><code>DELETE</code> 删除数据</li><li><code>ALTER</code> 修改表</li><li><code>DROP</code> 删除数据库&#x2F;表&#x2F;视图</li><li><code>CREATE</code> 创建数据库&#x2F;表</li></ul>]]></content>
    
    
    <summary type="html">数据库学习笔记，本篇主要记录数据库相关概念，以及部分SQL基础语法</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="DataBase" scheme="https://efterklang.github.io/categories/Tech/DataBase/"/>
    
    
    <category term="DataBase" scheme="https://efterklang.github.io/tags/DataBase/"/>
    
    <category term="SQL" scheme="https://efterklang.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Recommended VSCode Extensions</title>
    <link href="https://efterklang.github.io/Tech/VSCode/RecommendedExtensions/"/>
    <id>https://efterklang.github.io/Tech/VSCode/RecommendedExtensions/</id>
    <published>2024-01-17T10:30:43.000Z</published>
    <updated>2024-01-26T06:21:00.271Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>个人使用插件推荐，仅供参考。</p></div></article><span id="more"></span><h1 id="Ⅰ-Beautification"><a href="#Ⅰ-Beautification" class="headerlink" title="Ⅰ. Beautification"></a><font color = "teal">Ⅰ. Beautification</font></h1><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/Recommended-VSCode-Extensions-2024-01-17-22-21-55" alt="Showcase" style="border-radius: 10px" align = "center" /><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a><strong>Themes</strong></h2><ul><li><strong>Dark Space</strong></li><li><strong>Material Theme</strong></li><li><strong>Tokyo Night</strong></li><li><strong>Tokyo Night Ported Nvim</strong></li><li><strong>Tokyo Night Frameless</strong></li><li><strong>Solarized Palenight</strong></li></ul><h2 id="Icons"><a href="#Icons" class="headerlink" title="Icons"></a><strong>Icons</strong></h2><ul><li><strong>Material Icon Theme</strong></li><li><strong>Fluent Icons</strong></li></ul><h2 id="Customization"><a href="#Customization" class="headerlink" title="Customization"></a><strong>Customization</strong></h2><ul><li><strong>CodeUI</strong><br><em>Highlight web colors in your editor</em></li><li><strong>Color Highlight</strong><br><em>Highlight web colors in your editor</em></li><li><strong>Apc Custom UI++</strong><br><em>Advanced VSCode user interface customizations. Very experimental.</em></li><li><strong>VSCode Animations</strong><br><em>Clean and customizable animations for VSCode</em></li></ul><h1 id="Ⅱ-Productivity"><a href="#Ⅱ-Productivity" class="headerlink" title="Ⅱ. Productivity"></a><font color = "teal">Ⅱ. Productivity</font></h1><h2 id="Editing"><a href="#Editing" class="headerlink" title="Editing"></a><strong>Editing</strong></h2><ul><li><strong>Bookmarks</strong><br><em>Mark lines and jump to them</em></li><li><strong>jumpy</strong><br><em>Jumpy provides fast cursor movement</em></li><li><strong>Code Translate</strong><br><em>A pure vscode translation plug-in; 一款纯粹的 vscode 滑词翻译插件</em></li><li><strong>CodeSnap</strong><br><em>📷 Take beautiful screenshots of your code</em></li><li><strong>Github Copilot</strong><br><em>Your AI pair programmer</em></li><li><strong>GitHub Copilot Chat</strong><br><em>AI chat features powered by Copilot</em></li><li><strong>Error Lens</strong><br><em>Improve highlighting of errors, warnings and other language diagnostics.</em></li><li><strong>Better Comments</strong><br><em>Improve your code commenting by annotating with alert, informational, TODOs, and more!</em></li></ul><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a><strong>Markdown</strong></h2><ul><li><strong>Markdown All In One</strong><br><em>All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)</em></li><li><strong>Markdown Preview Enhanced</strong><br><em>Markdown Preview Enhanced ported to vscode</em></li><li><strong>Markdown Lint</strong><br><em>Markdown linting and style checking for Visual Studio Code</em></li><li><strong>Markmap</strong><br><em>Visualize your Markdown as mindmaps with Markmap.</em></li><li><strong>PicGo</strong><br><em>Upload images to online, and generate markdown urls.</em></li><li><strong>Foam</strong><br><em>VS Code + Markdown + Wikilinks for your note taking and knowledge base</em></li></ul><h2 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a><strong>Formatter</strong></h2><ul><li><strong>Prettier</strong><br><em>Code formatter using prettier</em></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a><strong>Git</strong></h2><ul><li><strong>Git Graph</strong><br><em>View a Git Graph of your repository, and perform Git actions from the graph.</em></li><li><strong>Git History</strong><br><em>View git log, file history, compare branches or commits</em></li><li><strong>GitHub Codespaces</strong><br><em>Your instant dev environment</em></li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><ul><li><strong>Live Server</strong><br><em>Launch a development local Server with live reload feature for static &amp; dynamic pages</em></li></ul><h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a><strong>Miscellaneous</strong></h2><ul><li><strong>Live Server</strong><br><em>Launch a development local Server with live reload feature for static &amp; dynamic pages</em></li><li><strong>LeetCode</strong><br><em>Solve LeetCode problems in VS Code</em></li><li><strong>file-size</strong><br><em>Show file size in the status bar</em></li><li><strong>Resource Monitor</strong><br><em>Display CPU frequency, usage, memory consumption, and battery percentage remaining within the VSCode status bar</em></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;个人使用插件推荐，仅供参考。&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="VSCode" scheme="https://efterklang.github.io/categories/Tech/VSCode/"/>
    
    
    <category term="VSCode" scheme="https://efterklang.github.io/tags/VSCode/"/>
    
    <category term="Extensions" scheme="https://efterklang.github.io/tags/Extensions/"/>
    
    <category term="Beautification" scheme="https://efterklang.github.io/tags/Beautification/"/>
    
    <category term="Productivity" scheme="https://efterklang.github.io/tags/Productivity/"/>
    
  </entry>
  
  <entry>
    <title>Letter From Olgierd von Everec</title>
    <link href="https://efterklang.github.io/Gaming/The%20Witcher%203/Letter-From-Olgierd-von-Everec/"/>
    <id>https://efterklang.github.io/Gaming/The%20Witcher%203/Letter-From-Olgierd-von-Everec/</id>
    <published>2024-01-15T13:20:05.000Z</published>
    <updated>2024-02-13T07:50:36.849Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/latest" alt="Scenes From a Marriage-Iris"></p><div align = center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=430043125&auto=0&height=66"></iframe></div><h1 id="Letter-from-Olgierd-von-Everec"><a href="#Letter-from-Olgierd-von-Everec" class="headerlink" title="Letter from Olgierd von Everec"></a>Letter from Olgierd von Everec</h1><blockquote><p><strong><em>My Dearest Wife,</em></strong></p><p><strong><em>Were I only as skilled with words as I am with my blade.</em></strong></p><p><strong><em>Especially now, when an icy void grips my heart.</em></strong></p><p><strong><em>I see how you look at me, and I see how you wither.</em></strong></p><p><strong><em>I cannot help you, but I believe I can cease harming you.</em></strong></p><p><strong><em>This letter and this <a href="https://witcher.fandom.com/wiki/Violet_rose">rose</a> are my farewell.</em></strong></p><p><strong><em>May you live in health and remember but the good times.</em></strong></p><p><strong><em><a href="https://witcher.fandom.com/wiki/Olgierd_von_Everec">Olgierd</a></em></strong></p></blockquote><h1 id="The-Painted-World"><a href="#The-Painted-World" class="headerlink" title="The Painted World"></a>The Painted World</h1><p>​ Geralt finds himself in the <a href="https://witcher.fandom.com/wiki/The_Painted_World">surreal painted world</a> reminiscent of the estate. The dog and cat, who apparently exist simultaneously in both worlds, informing him that in order to truly awaken Iris, Geralt has to complete the memories she has been denying, and destroy the fears and nightmares that bind her.</p><p>​ As you reenact the memories, Geralt will see how the couple’s marriage began to deteriorate over time, how Iris’ family didn’t approve of Olgierd as her husband, and how Olgierd tried to use magic to summon <a href="https://witcher.fandom.com/wiki/Gaunter_O'Dimm">Gaunter O’Dimm</a> to try and break the pact he forged, but it ultimately failed and set fire to the manor. Eventually, it leads to a scene where, having grown indifferent to Iris and only remembering that he was supposed to love her, Olgierd gave her the strange cat and dog for company and the Caretaker for protection.</p><h1 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h1><div alias = center><iframe src="//player.bilibili.com/player.html?aid=583358619&bvid=BV1Vz4y197sb&cid=194726096&p=1&autoplay=0&danmuku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"  width=640 height=400 > </iframe></div>]]></content>
    
    
    <summary type="html">Scenes From a Marriage-Iris</summary>
    
    
    
    <category term="Gaming" scheme="https://efterklang.github.io/categories/Gaming/"/>
    
    <category term="The Witcher 3" scheme="https://efterklang.github.io/categories/Gaming/The-Witcher-3/"/>
    
    
    <category term="CDPR" scheme="https://efterklang.github.io/tags/CDPR/"/>
    
    <category term="Music" scheme="https://efterklang.github.io/tags/Music/"/>
    
    <category term="Games" scheme="https://efterklang.github.io/tags/Games/"/>
    
  </entry>
  
  <entry>
    <title>VSCode Keyboard Shortcuts</title>
    <link href="https://efterklang.github.io/Tech/VSCode/Shortcuts/"/>
    <id>https://efterklang.github.io/Tech/VSCode/Shortcuts/</id>
    <published>2024-01-15T09:46:23.000Z</published>
    <updated>2024-02-14T14:43:40.892Z</updated>
    
    <content type="html"><![CDATA[<center><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/Anime_ClassRoom.jpg" alt="ClassRoom"></p></center><h2 id="Ⅰ-Editor"><a href="#Ⅰ-Editor" class="headerlink" title="Ⅰ. Editor"></a>Ⅰ. Editor</h2><h3 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h3><table><thead><tr><th>Shortcut</th><th>Command</th></tr></thead><tbody><tr><td><code>Ctrl + 1/2</code></td><td>Focus first&#x2F;second editor group</td></tr><tr><td><code>Ctrl + M</code></td><td>Maximize editor group</td></tr><tr><td><code>Ctrl + W</code></td><td>Close editor</td></tr><tr><td><code>Alt + F4</code></td><td>Close windows</td></tr><tr><td><code>Alt + A/D</code></td><td>Open previous&#x2F;next editor</td></tr><tr><td><code>Ctrl + Shift + W/A/S/D</code></td><td>View: split editor up&#x2F;down&#x2F;left&#x2F;right</td></tr></tbody></table><p>📨 PS:</p><ul><li><code>Ctrl + M</code> When spliting, maximize the current editor group, press again to cancel</li><li><code>Alt + A/D</code> Open previous&#x2F;next editor in the current editor group</li><li><code>Ctrl + Shift + W/A/S/D</code> Move the current editor group to the up&#x2F;left&#x2F;down&#x2F;right</li></ul><hr><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><table><thead><tr><th>Shortcut</th><th>Command</th></tr></thead><tbody><tr><td><code>Alt + Up/DownArrow</code></td><td>Move line up&#x2F;down</td></tr><tr><td><code>Alt + Shift + Up/DownArrow</code></td><td>Copy line up&#x2F;down</td></tr><tr><td><code>Ctrl + C/X/Y</code></td><td>Copy&#x2F;Cut&#x2F;Delete line</td></tr><tr><td><code>Ctrl + Z</code></td><td>Undo</td></tr><tr><td><code>Ctrl + Shift + Z</code></td><td>Redo</td></tr><tr><td><code>Alt + Scroll</code></td><td>Accelerate scrolling</td></tr><tr><td><code>Ctrl + Alt + Up/DownArrow</code></td><td>Add cursor above&#x2F;below</td></tr><tr><td><code>Alt + Click</code></td><td>Insert cursor at click</td></tr><tr><td><code>Ctrl + Home/End</code></td><td>cursorTop&#x2F;Bottom</td></tr></tbody></table><p>📨 PS:</p><ul><li><code>Alt + Up/DownArrow</code> Move the current line up&#x2F;down</li><li><code>Ctrl + Alt + Up/DownArrow</code> Add cursor above&#x2F;below the current line, press <code>ESC</code><br>to exit</li><li><code>Alt + Click</code> Insert cursor where you click, press <code>ESC</code> to exit</li><li><code>Ctrl + Home/End</code> Move cursor to the top&#x2F;bottom of the file</li></ul><hr><h3 id="Go-to-and-Peek"><a href="#Go-to-and-Peek" class="headerlink" title="Go to and Peek"></a>Go to and Peek</h3><table><thead><tr><th>Shortcut</th><th>Command</th></tr></thead><tbody><tr><td><code>F12</code></td><td>Go to definition</td></tr><tr><td><code>Ctrl + F12</code></td><td>Peek implementation</td></tr><tr><td><code>Shift + F12</code></td><td>Go to references</td></tr><tr><td><code>Alt + F12</code></td><td>Peek definition</td></tr><tr><td><code>Shift + Alt + F12</code></td><td>Find all references</td></tr><tr><td><code>Ctrl + Shift + O</code></td><td>Go to symbol in editor</td></tr><tr><td><code>Ctrl + T</code></td><td>Go to symbol in workspace</td></tr></tbody></table><h2 id="Ⅱ-Explorer"><a href="#Ⅱ-Explorer" class="headerlink" title="Ⅱ. Explorer"></a>Ⅱ. Explorer</h2><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><table><thead><tr><th>Shortcut</th><th>Command</th></tr></thead><tbody><tr><td><code>J</code></td><td>New File</td></tr><tr><td><code>K</code></td><td>New Folder</td></tr><tr><td><code>E</code></td><td>Reveal in explorer</td></tr><tr><td><code>C/X/R</code></td><td>Copy&#x2F;cut&#x2F;rename</td></tr><tr><td><code>T</code></td><td>Open in default integrated terminal</td></tr></tbody></table><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><table><thead><tr><th>Shortcut</th><th>Command</th></tr></thead><tbody><tr><td><code>I</code></td><td>List.focusParent</td></tr><tr><td><code>A</code></td><td>List.collapse</td></tr><tr><td><code>D</code></td><td>List.expand</td></tr><tr><td><code>Q</code></td><td>List.collapseAll</td></tr><tr><td><code>F3</code></td><td>List.find</td></tr></tbody></table><h2 id="Ⅲ-Workbench"><a href="#Ⅲ-Workbench" class="headerlink" title="Ⅲ. Workbench"></a>Ⅲ. Workbench</h2><table><thead><tr><th>Shortcut</th><th>Command</th></tr></thead><tbody><tr><td><code>Ctrl + Shift + P</code></td><td>Show all command</td></tr><tr><td><code>Ctrl + Shift + M</code></td><td>Toggle panel visibility</td></tr><tr><td><code>Ctrl + Shift + F</code></td><td>Toggle search visibility</td></tr><tr><td><code>Ctrl + Shift + G</code></td><td>Toggle source control visibility</td></tr><tr><td><code>Ctrl + Shift + T</code></td><td>Toggle todo tree visibility</td></tr><tr><td><code>Ctrl + E</code></td><td>Toggle explorer visibility</td></tr><tr><td><code>Alt + E</code></td><td>Toggle Secondary Sidebar visibility</td></tr></tbody></table><h2 id="Ⅳ-Extensions"><a href="#Ⅳ-Extensions" class="headerlink" title="Ⅳ. Extensions"></a>Ⅳ. Extensions</h2><table><thead><tr><th>Shortcut</th><th>Command</th></tr></thead><tbody><tr><td><code>Alt + O</code></td><td>Project Manager: List Projects to Open</td></tr><tr><td><code>Alt+Q</code></td><td>Jumpy Word Mode</td></tr><tr><td><code>Alt+W</code></td><td>Jumpy Line Mode</td></tr><tr><td><code>Ctrl+L</code></td><td>Bookmarks: Toggle Labeled</td></tr><tr><td><code>Bookmarks: List</code></td><td>Bookmarks: List</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">My frequently used VSCode Keyboard Shortcuts</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="VSCode" scheme="https://efterklang.github.io/categories/Tech/VSCode/"/>
    
    
    <category term="VSCode" scheme="https://efterklang.github.io/tags/VSCode/"/>
    
    <category term="Extensions" scheme="https://efterklang.github.io/tags/Extensions/"/>
    
    <category term="Productivity" scheme="https://efterklang.github.io/tags/Productivity/"/>
    
    <category term="Shortcuts" scheme="https://efterklang.github.io/tags/Shortcuts/"/>
    
  </entry>
  
  <entry>
    <title>VSCode C_Cpp Debug</title>
    <link href="https://efterklang.github.io/Tech/VSCode/DebugForC/"/>
    <id>https://efterklang.github.io/Tech/VSCode/DebugForC/</id>
    <published>2024-01-15T07:22:25.000Z</published>
    <updated>2024-02-13T14:45:13.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><div align = center><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/image-20240115153604101.png" alt="Hello,world!" style="zoom:50%;" /></div><p>​ 今天阅读<a href="https://code.visualstudio.com/docs/cpp/launch-json-reference">Configure launch.json for C&#x2F;C++ debugging in Visual Studio Code</a>，初步完成 VSCode C&#x2F;C++ debug 的配置，于是写下本文，旨在记录个人在 Windows&#x2F;WSL 平台，VSCode 配置 C&#x2F;C++的 Debug 环境过程，以供其他初学者参考。在此之前，你需要先安装 VSCode，配置好 WSL 环境以及 gcc 环境变量。<br>文章介绍了<code>launch.json</code>和<code>tasks.json</code>中部分<code>attribute</code>的含义，并给出本人的配置供读者参考</p><span id="more"></span><h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><p>配置 debug 环境，首先要配置<code>launch.json</code>，<code>launch.json</code>是用来配置 VSCode 的 debug 环境的，它包含了一系列的调试配置，每个调试配置都是一个对象，包含了一系列的字段，用于定义如何启动和运行调试器。在 VSCode 中，你可以通过<code>F5</code>快捷键或者点击左侧的 debug 按钮进入 debug 模式，此时 VSCode 会自动寻找当前工作目录下的<code>launch.json</code>文件，如果没有找到，VSCode 会提示你创建一个<code>launch.json</code>文件，如果找到了，VSCode 会自动加载<code>launch.json</code>中的配置，然后根据配置启动调试器。</p><blockquote><p>A <code>launch.json</code> file is used to configure the <a href="https://code.visualstudio.com/docs/editor/debugging">debugger</a> in Visual Studio Code.</p><p>Visual Studio Code generates a <code>launch.json</code> (under a <code>.vscode</code> folder in your project) with almost all of the required information. To get started with debugging you need to fill in the <code>program</code> field with the path to the executable you plan to debug. This must be specified for both the launch and attach (if you plan to attach to a running instance at any point) configurations.</p></blockquote><h3 id="Launch-json-Code"><a href="#Launch-json-Code" class="headerlink" title="Launch.json Code"></a>Launch.json Code</h3><p><strong>个人配置如下，仅供参考</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c/c++ gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integratedTerminal&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile c file(Windows)&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;linux&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile c file(Linux)&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><ul><li><p><strong>version</strong>：version of this file format<br>不必修改</p></li><li><p><strong>configurations</strong>：List of configurations.<br>configuration 数组， 包含了你的调试配置。每个调试配置都是一个对象，包含了一系列的字段，用于定义如何启动和运行调试器</p></li><li><p><strong>type</strong>：Type of configuration<br>用于指定要使用的调试器类型。可选的值取决于你已经安装的调试器扩展。常见的 type 字段值有 <code>node、java、lldb(主要用于调试c/cpp以及其他llvm支持的语言)、chrome(JavaScript,TypeScript)</code>等等</p></li><li><p><strong>name</strong>：Name of configuration; appears in the launch configuration dropdown menu.<br>字面意思，此处的<code>c/c++ gdb</code>即为<code>launch.json</code>的<code>name</code></p></li></ul><center><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/image-20240115160623469.png" alt="configure name" style="zoom:50%;" /></center><ul><li><p><strong>preLaunchTask</strong>：Task to run before debug session starts.<br>在 debug 开始前执行的 task，例如编译你的代码，生成一个可执行文件(.exe, .out e.g.)，如果 task 失败，则不会启动 debug session。此处我们要配置 c&#x2F;cpp 的 debug 环境，所以 preLaunchTask 设置为 build active file(名字任意)，与<code>tasks.json</code>中的 task 对象的 label 属性对应即可</p></li><li><p><strong>program</strong>：Path to the program to debug.<br>Specify debug program’s path。以 windows 平台为例，我们编写了 hello.c，要调试的程序即为<code>filePath/hello.exe</code>，我们可以用如下预定义变量简化 program</p><blockquote><p><strong>Common pre-defined variables provided by VSCode for configuration files:</strong></p><ul><li><code>$&#123;workspaceFolder&#125;</code>: The path of the folder opened in VS Code.</li><li><code>$&#123;workspaceRootFolderName&#125;</code>: The name of the folder opened in VS Code without any slashes (&#x2F;).</li><li><code>$&#123;file&#125;</code>: The current opened file.</li><li><code>$&#123;fileWorkspaceFolder&#125;</code>: The current opened file’s workspace folder.</li><li><code>$&#123;relativeFile&#125;</code>: The current opened file relative to workspaceFolder.</li><li><code>$&#123;relativeFileDirname&#125;</code>: The current opened file’s dirname relative to workspaceFolder.</li><li><code>$&#123;fileBasename&#125;</code>: The current opened file’s basename.</li><li><code>$&#123;fileBasenameNoExtension&#125;</code>: The current opened file’s basename with no file extension.</li><li><code>$&#123;fileDirname&#125;</code>: The current opened file’s dirname.</li><li><code>$&#123;fileExtname&#125;</code>: The current opened file’s extension.</li><li><code>$&#123;lineNumber&#125;</code>: The current selected line number in the active file.</li><li><code>$&#123;selectedText&#125;</code>: The current selected text in the active file.</li><li><code>$&#123;execPath&#125;</code>: The location of the VS Code executable.</li><li><code>$&#123;defaultBuildTask&#125;</code>: The name of the default build task.</li></ul></blockquote></li><li><p><strong>request</strong>：Indicates whether the configuration section is intended to <code>launch</code> the program or <code>attach</code> to an already running instance.<br>一般选择 launch，前端 debug 可能会用到 attach</p></li><li><p><strong>console</strong>：Terminal type to use.<br>取决个人喜好，可选参数如下</p><ul><li><p><strong>internalConsole</strong>：VSCode Panel 中的 TERMINAL</p></li><li><p><strong>integratedTerminal</strong>：VSCode Panel 中的 DEBUG CONSOLE</p></li><li><p><strong>externalTerminal</strong>：外部的集成终端</p></li></ul></li><li><p><strong>cwd</strong>：Program working directory.<br><code>cwd</code> 字段用于设置当前工作目录（Current Working Directory）。当你启动调试器时，这个目录将被用作程序的工作目录，一般配置为 <code>&quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;</code></p></li><li><p><strong>window&#x2F;linux&#x2F;osx</strong>：specific launch configuration attributes<br>针对 Window,Linux&#x2F;WSL,MacOS 平台单独设置的 attributes</p></li></ul><h2 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h2><p>debugger 正常工作，需要先编译你的代码，生成一个可执行文件(.exe, .out e.g.)，于是在<code>preLaunch</code>中我们定义了两个 task,用来编译 c 文件<br>[<a href="tasks.json%E7%9A%84%E4%BD%BF%E7%94%A8.md" title="tasks.json的使用">tasks.json的使用</a>]-&gt;<a href="https://efterklang.github.io/2024/01/26/Tech/VSCode/tasks.json%E7%9A%84%E4%BD%BF%E7%94%A8/">See more</a></p><h3 id="Tasks-json-Code"><a href="#Tasks-json-Code" class="headerlink" title="Tasks.json Code"></a>Tasks.json Code</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile c file(Windows)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile c file(Linux)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.out&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h3><ul><li><p><strong>tasks</strong>：The task configurations. Usually these are enrichments of task already defined in the external task runner.<br>例如之前在<code>launch.json</code>定义的两个<code>task</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build active file(Windows)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;linux&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build active file(Linux)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>type</strong>：Defines whether the task is run as a process or as a command inside a shell.<br>可选参数有 shell,progess。gcc 命令在 shell 中执行，此处选择 shell 即可</p></li><li><p><strong>label</strong>：The task’s user interface label<br>任务的名称，在<code>launch.json</code>通过 label specify tasks to run</p></li><li><p><strong>command</strong>：The command to be executed. Can be an external program or a shell command.<br>此处选择 gcc 即可，也可选 clang 等 c&#x2F;cpp 编译器</p></li><li><p><strong>args</strong>：Arguments passed to the command when this task is invoked.<br>命令的参数，例如-o，-g 等等</p></li></ul><h2 id="Outro"><a href="#Outro" class="headerlink" title="Outro"></a>Outro</h2><p>​ 以经典的<code>hello.c</code>测试，能正常 debug。希望本文对你有帮助 🕊️</p><p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/image-20240115165525013.png" alt="demo"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;div align = center&gt;

&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/image-20240115153604101.png&quot; alt=&quot;Hello,world!&quot; style=&quot;zoom:50%;&quot; /&gt;

&lt;/div&gt;

&lt;p&gt;​ 今天阅读&lt;a href=&quot;https://code.visualstudio.com/docs/cpp/launch-json-reference&quot;&gt;Configure launch.json for C&amp;#x2F;C++ debugging in Visual Studio Code&lt;/a&gt;，初步完成 VSCode C&amp;#x2F;C++ debug 的配置，于是写下本文，旨在记录个人在 Windows&amp;#x2F;WSL 平台，VSCode 配置 C&amp;#x2F;C++的 Debug 环境过程，以供其他初学者参考。在此之前，你需要先安装 VSCode，配置好 WSL 环境以及 gcc 环境变量。&lt;br&gt;文章介绍了&lt;code&gt;launch.json&lt;/code&gt;和&lt;code&gt;tasks.json&lt;/code&gt;中部分&lt;code&gt;attribute&lt;/code&gt;的含义，并给出本人的配置供读者参考&lt;/p&gt;</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="VSCode" scheme="https://efterklang.github.io/categories/Tech/VSCode/"/>
    
    
    <category term="VSCode" scheme="https://efterklang.github.io/tags/VSCode/"/>
    
    <category term="C_Cpp" scheme="https://efterklang.github.io/tags/C-Cpp/"/>
    
    <category term="Debug" scheme="https://efterklang.github.io/tags/Debug/"/>
    
    <category term="json" scheme="https://efterklang.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Phantom Liberty</title>
    <link href="https://efterklang.github.io/Gaming/CyberPunk2077/Phantom-Liberty/"/>
    <id>https://efterklang.github.io/Gaming/CyberPunk2077/Phantom-Liberty/</id>
    <published>2024-01-14T14:26:44.000Z</published>
    <updated>2024-02-02T12:48:55.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/photomode_13012024_234943.png" alt="比远方更远"></p><h1 id="Lyrics"><a href="#Lyrics" class="headerlink" title="Lyrics"></a>Lyrics</h1><p>by <a href="https://matchlyric.com/artist/cd-projekt-red">CD PROJEKT RED</a>, <a href="https://matchlyric.com/artist/dawid-podsiadlo">Dawid Podsiadło</a>, <a href="https://matchlyric.com/artist/p-t-adamczyk">P.T. Adamczyk</a></p><p><strong>Album</strong> Cyberpunk 2077: Phantom Liberty (Original Score - Deluxe Edition)</p><p><a href="https://matchlyric.com/cd-projekt-red-dawid-podsiadlo-p-t-adamczyk-phantom-liberty">CD PROJEKT RED, Dawid Podsiadło, P.T. Adamczyk – Phantom Liberty lyrics | Matchlyric</a></p><blockquote><p><strong>Verse 1</strong><br>Found out<br>Treasures are always lost<br>Pleasures and rage combined<br>I’m watchin’ you<br>Be careful with your moves<br>Tonight, I think the time is right<br>I think the blood has dried<br>It cries for more<br>So what are we waiting for?</p><p><strong>Chorus 1</strong><br>Wires and chains<br><em>(I’m just tired of lookin’ the other way)</em><br>Starting to fade<br><em>(I’m just tired of lookin’ the other way)</em><br>It feels like a game<br><em>(I’m just tired of lookin’ the other way)</em><br>You have to play<br><em>(I’m just tired of lookin’ the other way)</em></p><p><strong>Verse 2</strong><br>Lights out, is this who you really are?<br>Can’t look into your eyes<br>Your twisted mind<br>It’s dark, so dark<br>We end it now<br>It ends right here, right now<br>Please tell me you brought the iron<br>Let’s light up the sky<br>And fade into the night</p><p><strong>Chorus 1</strong><br>Wires and chains<br><em>(I’m just tired of lookin’ the other way)</em><br>Starting to fade<br><em>(I’m just tired of lookin’ the other way)</em><br>It feels like a game<br><em>(I’m just tired of lookin’ the other way)</em><br>You have to play<br><em>(I’m just tired of lookin’ the other way)</em></p><p><strong>Bridge</strong><br>The days when it was good are gone <em>(*Nah-nah-nah, nah-nah, nah*)</em><br>I’m tryna see what it was for, but I’ll never know <em>(*Nah-nah-nah, nah-nah, nah*)</em><br>And though it’s dead, I hear the call <em>(*Nah-nah-nah, nah-nah, nah*)</em><br>Ooh-ooh-ooh-ooh-ooh</p><p><strong>Chorus 2</strong><br>Wires and chains<br><em>(I’m just tired of lookin’ the other way)</em><br>Starting to fade<br><em>(I’m just tired of lookin’ the other way)</em><br>Feels like a game<br><em>(I’m just tired of lookin’ the other way)</em><br>You can’t escape<br><em>(I’m just tired of lookin’ the other way)</em><br>Wires and chains<br><em>(I’m just tired of lookin’ the other way)</em><br>Starting to fade<br><em>(I’m just tired of lookin’ the other way)</em><br>Feels like a game<br><em>(I’m just tired of lookin’ the other way)</em><br>You can’t escape<br><em>(I’m just tired of lookin’ the other way)</em></p><p><strong>Outro</strong><br>I found out<br>Treasures are always lost<br>Pleasures are long forgotten<br>Who are you now?</p></blockquote><h1 id="Appreciation"><a href="#Appreciation" class="headerlink" title="Appreciation"></a>Appreciation</h1><p>“Phantom Liberty” by Dawid Podsiadło &amp; P.T. Adamczyk explores themes of lost treasures, suppressed emotions, and the feeling of being trapped. The lyrics suggest a sense of danger and caution, urging the listener to be careful with their actions and movements. The line “I think the blood is dried, it cries for more” implies a craving for intensity and stimulation. There is an underlying desire to break free from a stagnant and monotonous existence.</p><p>The chorus of the song emphasizes the feeling of being stuck and unable to escape. Wires and chains symbolize constraints and limitations, while the mention of fading suggests a loss of vitality or passion. The lyrics portray life as a game that one must play, even if it feels repetitive and meaningless. It hints at the idea that one may feel trapped by circumstances beyond their control.</p><p>In the second verse, the lyrics delve into the darkness within someone’s mind. The narrator’s inability to look into the eyes of another person suggests a lack of trust or fear of confronting their true intentions. There is a desire to bring an end to this twisted and oppressive situation, as indicated by the line “We end it now, it ends right here, right now.” The idea of fading into the moon signifies a longing for escape or transcendence.</p><p>The bridge reflects on the loss of better days and the frustration of not fully understanding the purpose behind certain experiences. The mention of hearing the clock suggests an awareness of time passing and the need to take action. Overall, “Phantom Liberty” depicts a struggle with confinement, questioning the meaning of existence, and a yearning for freedom and liberation.</p><blockquote><p>流行音乐常用的歌曲结构一般是ABABCB，也就是<strong>Verse-Chorus-Verse-Chorus-Bridge-Chorus</strong>， <strong>VERSE 是主歌</strong>， <strong>CHORUS 是副歌</strong>(chorus有合唱，副歌的意思)。 <strong>Bridge是经常出现在第二段副歌之后的乐段</strong>，为歌曲提供一些变化、增加张力等。 长度一般是4或8小节，也被称为“middle 8”，具体时长取决于歌曲需要</p></blockquote>]]></content>
    
    
    <summary type="html">Phantom Liberty by Dawid Podsiadło &amp; P.T.</summary>
    
    
    
    <category term="Gaming" scheme="https://efterklang.github.io/categories/Gaming/"/>
    
    <category term="CyberPunk2077" scheme="https://efterklang.github.io/categories/Gaming/CyberPunk2077/"/>
    
    
    <category term="CDPR" scheme="https://efterklang.github.io/tags/CDPR/"/>
    
    <category term="Music" scheme="https://efterklang.github.io/tags/Music/"/>
    
    <category term="Games" scheme="https://efterklang.github.io/tags/Games/"/>
    
    <category term="CyberPunk2077" scheme="https://efterklang.github.io/tags/CyberPunk2077/"/>
    
  </entry>
  
  <entry>
    <title>PicGo-Github配置图床(Typora&amp;VSCode)</title>
    <link href="https://efterklang.github.io/Tech/FrontEnd/imageBed/"/>
    <id>https://efterklang.github.io/Tech/FrontEnd/imageBed/</id>
    <published>2024-01-13T03:46:56.000Z</published>
    <updated>2024-02-13T15:51:43.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><h2 id="什么是图床"><a href="#什么是图床" class="headerlink" title="什么是图床"></a>什么是图床</h2><p>图床，也被称为图像托管服务（Image Hosting Service），是一种在线服务，它提供了一个方便的方式来存储和分享图片。用户可以上传图片到图床，然后图床会生成一个可以在网页、论坛、博客或其他地方使用的链接，以便他人可以查看或下载这些图片。</p><span id="more"></span><p>图床服务通常提供一定的免费存储空间，但可能会对图片的大小、格式或数量有限制。一些图床还提供额外的付费服务，如更大的存储空间、更高的带宽或更多的功能。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul><li><strong>节省存储空间</strong>：图床服务可以帮助你节省本地或服务器的存储空间，因为图片是存储在图床服务的服务器上的。</li><li><strong>易于分享</strong>：图床服务通常会为上传的图片提供一个 URL 链接，你可以将这个链接分享给他人，或者在网站、博客、论坛等地方使用，让他人可以轻松地查看或下载图片。</li><li><strong>易于管理</strong>：许多图床服务提供了用户友好的界面和工具，使得上传、管理和分享图片变得非常简单</li></ul><hr><ul><li>虽然图床服务有许多优势，但也有一些潜在的<strong>缺点</strong>，如可能的隐私问题、服务商可能会关闭或更改服务条款、以及对免费用户的存储空间或带宽的限制等。</li></ul><h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><h2 id="Github-Repo"><a href="#Github-Repo" class="headerlink" title="Github Repo"></a>Github Repo</h2><ul><li><p><a href="https://github.com/dashboard">新建 Repo</a>，可见性设置为 Public</p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/image-20240113121208179.png" alt="new-repo" style="zoom:80%;border-radius: 10px;" /></li><li><p><a href="https://github.com/settings/apps">Gen GitHub Token</a>,在Personal access tokens 中可选 Fine-grained tokens 或 Tokens(classic)，前者对权限有更细致的划分。</p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/image-20240113123341962.png" alt="gen-token" style="zoom:80%;border-radius: 10px;" /></li></ul><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><table><thead><tr><th align="center">下载源</th><th align="center">地址&#x2F;安装方式</th></tr></thead><tbody><tr><td align="center">GitHub Release</td><td align="center"><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></td></tr><tr><td align="center">腾讯云 COS</td><td align="center"><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></td></tr><tr><td align="center">山东大学镜像站</td><td align="center"><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo">https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo</a></td></tr></tbody></table><p>在图床设置中进行如下配置</p><p>自定义域名可设置为<a href="https://cdn.jsdelivr.net/gh/your-repo-name@master">https://cdn.jsdelivr.net/gh/your-repo-name@master</a></p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/image-20240113124109008.png" alt="picgo-config" style="zoom:80%;border-radius: 10px;" /><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>语言设置为中文</p><p>偏好-图形，进行如下设置</p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/VSCode-PicGo-Github配置图床-2024-01-18-00-27-28" alt="Typora-Setting" style="zoom:80%;border-radius: 10px;" /><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p>下载 PicGo 插件，<code>Ctrl+Shift+P - Preferences: Open User Settings (JSON)</code>，<br>添加如下配置</p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/VSCode-PicGo-Github配置图床-2024-01-18-00-19-01" alt="settings.json" style="zoom:80%;border-radius: 10px;" /><p>默认快捷键如下</p><img src="https://cdn.jsdelivr.net/gh/Efterklang/imageBed@master/VSCode-PicGo-Github配置图床-2024-01-18-00-20-46" alt="Keyboard Shortcuts" style="zoom:80%;border-radius: 10px;"  />]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;h2 id=&quot;什么是图床&quot;&gt;&lt;a href=&quot;#什么是图床&quot; class=&quot;headerlink&quot; title=&quot;什么是图床&quot;&gt;&lt;/a&gt;什么是图床&lt;/h2&gt;&lt;p&gt;图床，也被称为图像托管服务（Image Hosting Service），是一种在线服务，它提供了一个方便的方式来存储和分享图片。用户可以上传图片到图床，然后图床会生成一个可以在网页、论坛、博客或其他地方使用的链接，以便他人可以查看或下载这些图片。&lt;/p&gt;</summary>
    
    
    
    <category term="Tech" scheme="https://efterklang.github.io/categories/Tech/"/>
    
    <category term="FrontEnd" scheme="https://efterklang.github.io/categories/Tech/FrontEnd/"/>
    
    
    <category term="Others" scheme="https://efterklang.github.io/tags/Others/"/>
    
    <category term="Github" scheme="https://efterklang.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://efterklang.github.io/Home/hello-world/"/>
    <id>https://efterklang.github.io/Home/hello-world/</id>
    <published>2024-01-04T04:30:43.000Z</published>
    <updated>2024-02-13T07:38:14.214Z</updated>
    
    <content type="html"><![CDATA[<style>h1 {    font-family: Consolas;    color: #426cc2;    text-align: center;    font-style: bold;    /* font-size: 3em; */}.title_card {    display: flex; /* 使用flex布局 */    position: relative; /* 添加relative定位 */    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);    transition: 0.3s;    width: 100%;    height: 100%;    border-radius: 5px;    overflow: hidden;    align-items: center; /* 垂直居中 */    justify-content: center; /* 水平居中 */}.title_card:hover {    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);}.title_card_text {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    display: flex;    align-items: center; /* 垂直居中 */    justify-content: center; /* 水平居中 */    color: white; /* 将文字颜色设置为白色 */    opacity: 0;    transition: opacity 0.3s;    font-family: 'Trebuchet MS'; /* 将字体设置为Arial */    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); /* 添加文字阴影 */}.title_card:hover .title_card_text {    opacity: 0.9;    animation: jelly 0.5s;}@keyframes jelly {    0%,    100% {    transform: scale(1, 1);    }    25% {    transform: scale(0.9, 1.1);    }    50% {    transform: scale(1.1, 0.9);    }    75% {    transform: scale(0.95, 1.05);    }}</style><div class="title_card">  <img src="/img/gallery/card.png" style="width:100%; height:100%; object-fit:cover;">  <div class="title_card_text">    <p style="font-size: 4.5em;">HOME</p>  </div></div><h1><strong><font color = "#426cc2">🔭About Me</font></strong></h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =========================================================</span></span><br><span class="line"><span class="comment">// *                    aboutme.json                       *</span></span><br><span class="line"><span class="comment">// =========================================================</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gjx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Age&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;School&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UESTC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Skills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Copy&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Paste&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Major&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Software Engineering&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Occupation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Undergraduate&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Home&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TsingTao, Shandong, CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Email-Address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gaojiaxing2004@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Author.hobbies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;🕹️Immersing in Diverse Gaming Universes&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;🎼Harmonizing with the Rhythm of Music&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;🪁Exploring the World of Literature&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;🧑🏻‍🎨Enjoy the Journey of Beautification&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;🔦Unearthing Productivity Tools&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;📚Learning New Things About SE&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;📸Collecting Beautiful Pictures&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Author.achievements&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;2006年《时代周刊》年度风云人物&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;2008年《感动中国》年度人物&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;联合国2019年度地球卫士奖联合获奖人&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1><strong><font color = "#426cc2">🌃How To Reach Me</font></strong></h1><ul><li>😼<a href="https://github.com/Efterklang"><strong>Github</strong></a></li><li>🐧<a href="tencent://message/?uin=2413875873&Site=qq&Mqenu=yes"><strong>QQ</strong></a></li><li>📺<a href="https://space.bilibili.com/521738139?spm_id_from=333.1007.0.0"><strong>Bilibili</strong></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">

&lt;style&gt;
h1 {
    font-family: Consolas;
    color: #426cc2;
    text-align: center;
    font-style: bold;
    /* font-size: 3em; */
}
.tit</summary>
      
    
    
    
    
  </entry>
  
</feed>
